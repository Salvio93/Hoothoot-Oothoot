./addons/website_links/tests/test_ui.py:from unittest.mock import patch
./addons/account_peppol/tests/test_peppol_participant.py:from unittest.mock import patch
./addons/account_peppol/tests/test_peppol_participant.py:    def _get_mock_responses(cls):
./addons/account_peppol/tests/test_peppol_participant.py:        responses = cls._get_mock_responses()
./addons/account_peppol/tests/test_peppol_participant.py:        with patch('odoo.addons.account_peppol.models.account_edi_proxy_user.Account_Edi_Proxy_ClientUser._call_peppol_proxy') as mocked_patch:
./addons/account_peppol/tests/test_peppol_participant.py:            mocked_patch.assert_called_once_with(**args)
./addons/account_peppol/tests/test_peppol_messages.py:from unittest.mock import patch
./addons/account_peppol/tests/test_peppol_messages.py:    def _get_mock_data(cls, error=False, nr_invoices=1):
./addons/account_peppol/tests/test_peppol_messages.py:            proxy_documents, responses = cls._get_mock_data(cls.env.context.get('error'), nr_invoices=len(body['params']['documents']))
./addons/account_peppol/tests/test_peppol_messages.py:            proxy_documents, responses = cls._get_mock_data(cls.env.context.get('error'))
./addons/account_peppol/tests/test_peppol_messages.py:    def test_send_peppol_alerts_not_valid_format_partner(self, mocked_check):
./addons/account_peppol/tools/demo_utils.py:def _mock_call_peppol_proxy(func, self, *args, **kwargs):
./addons/account_peppol/tools/demo_utils.py:    def _mock_get_all_documents(user, args, kwargs):
./addons/account_peppol/tools/demo_utils.py:    def _mock_get_document(user, args, kwargs):
./addons/account_peppol/tools/demo_utils.py:    def _mock_send_document(user, args, kwargs):
./addons/account_peppol/tools/demo_utils.py:        'get_all_documents': _mock_get_all_documents,
./addons/account_peppol/tools/demo_utils.py:        'get_document': _mock_get_document,
./addons/account_peppol/tools/demo_utils.py:        'send_document': _mock_send_document,
./addons/account_peppol/tools/demo_utils.py:        # service routes are not available in demo mode, mocked by safety
./addons/account_peppol/tools/demo_utils.py:def _mock_get_peppol_verification_state(func, self, *args, **kwargs):
./addons/account_peppol/tools/demo_utils.py:def _mock_check_peppol_participant_exists(func, self, *args, **kwargs):
./addons/account_peppol/tools/demo_utils.py:def _mock_register_proxy_user(func, self, *args, **kwargs):
./addons/account_peppol/tools/demo_utils.py:    '_call_peppol_proxy': _mock_call_peppol_proxy,  # account_edi_proxy_client.user
./addons/account_peppol/tools/demo_utils.py:    '_get_peppol_verification_state': _mock_get_peppol_verification_state,  # res.partner
./addons/account_peppol/tools/demo_utils.py:    '_check_peppol_participant_exists': _mock_check_peppol_participant_exists,  # res.partner
./addons/account_peppol/tools/demo_utils.py:    '_register_proxy_user': _mock_register_proxy_user,  # account_edi_proxy_client.user
./addons/account_peppol/tools/demo_utils.py:    """ This decorator is used on methods that should be mocked in demo mode.
./addons/test_mail_full/static/tests/test_mail_full_test_helpers.js:import { MailTestRating } from "@test_mail_full/../tests/mock_server/models/mail_test_rating";
./addons/test_mail_full/tests/test_mail_bot.py:from unittest.mock import patch
./addons/test_mail_full/tests/test_rating.py:                with self.mock_mail_gateway(mail_unlink_sent=False), self.mock_mail_app():
./addons/test_mail_full/tests/test_rating.py:                with self.mock_mail_gateway(mail_unlink_sent=False), self.mock_mail_app():
./addons/test_mail_full/tests/test_mass_mailing.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mail_full/tests/test_portal.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail_full/tests/test_portal.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/payment_authorize/tests/test_authorize.py:from unittest.mock import patch
./addons/payment_authorize/tests/test_refund_flows.py:from unittest.mock import patch
./addons/payment_authorize/tests/test_refund_flows.py:        ) as void_mock, patch(
./addons/payment_authorize/tests/test_refund_flows.py:        self.assertEqual(void_mock.call_count, 1)
./addons/payment_authorize/tests/test_refund_flows.py:        ) as refund_mock, patch(
./addons/payment_authorize/tests/test_refund_flows.py:        self.assertEqual(refund_mock.call_count, 1)
./addons/website_sale_loyalty/tests/test_free_product_reward.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale_loyalty/tests/test_free_product_reward.py:        with MockRequest(self.env, website=self.website, sale_order_id=order.id):
./addons/website_sale_loyalty/tests/test_apply_pending_coupon.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale_loyalty/tests/test_apply_pending_coupon.py:        with MockRequest(self.env, website=self.website, sale_order_id=order.id) as request:
./addons/website_sale_loyalty/tests/test_apply_pending_coupon.py:        with MockRequest(self.env, website=self.website, sale_order_id=order.id) as request:
./addons/website_sale_loyalty/tests/test_ewallet.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale_loyalty/tests/test_ewallet.py:        with MockRequest(self.env, website=self.website, sale_order_id=order.id):
./addons/website_sale_loyalty/tests/test_shop_multi_reward.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale_loyalty/tests/test_shop_multi_reward.py:        with MockRequest(self.env, website=self.website, sale_order_id=order.id):
./addons/website_sale_loyalty/tests/test_website_sale_loyalty_delivery.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale_loyalty/tests/test_website_sale_loyalty_delivery.py:        with MockRequest(self.env, sale_order_id=self.cart.id, website=self.website):
./addons/website_sale_loyalty/tests/test_website_sale_auto_invoice.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale_loyalty/tests/test_website_sale_auto_invoice.py:        with MockRequest(self.env, website=self.website, sale_order_id=self.cart.id):
./addons/website_sale_loyalty/tests/test_sale_coupon_multiwebsite.py:from odoo.addons.website_sale.tests.common import MockRequest
./addons/website_sale_loyalty/tests/test_sale_coupon_multiwebsite.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale_loyalty/tests/test_sale_coupon_multiwebsite.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale_loyalty/tests/test_sale_coupon_multiwebsite.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale_loyalty/tests/test_sale_coupon_multiwebsite.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale_loyalty/tests/test_sale_coupon_multiwebsite.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale_loyalty/tests/test_sale_coupon_multiwebsite.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale_loyalty/tests/test_sale_coupon_multiwebsite.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale_loyalty/tests/test_sale_coupon_multiwebsite.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale_loyalty/tests/test_sale_coupon_multiwebsite.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale_loyalty/tests/test_shop_sale_coupon.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale_loyalty/tests/test_shop_sale_coupon.py:        with MockRequest(website.env, website=self.website, sale_order_id=order.id):
./addons/website_sale_loyalty/tests/test_shop_sale_coupon.py:        with MockRequest(self.env, website=self.website, sale_order_id=order.id) as request:
./addons/website_sale_loyalty/tests/test_shop_sale_coupon.py:        with MockRequest(website.env, website=self.website, sale_order_id=order.id):
./addons/test_mail_sms/tests/test_sms_management.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_management.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_management.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_management.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_management.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_server_actions.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_server_actions.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_server_actions.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_server_actions.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway(sim_error='wrong_number_format'):
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.mock_datetime_and_now(now), \
./addons/test_mail_sms/tests/test_sms_post.py:             self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.mock_datetime_and_now(now):
./addons/test_mail_sms/tests/test_sms_post.py:        with self.mock_datetime_and_now(now + timedelta(days=5)), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        # with self.with_user('employee'), self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway(sim_error='credit'):
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway(nbr_t_error={self.partner_2._phone_format(): 'credit'}):
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway(sim_error='jsonrpc_exception'):
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway(sim_error='unregistered'):
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway(nbr_t_error={self.partner_2._phone_format(): 'unregistered'}):
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway(sim_error='wrong_number_format'):
./addons/test_mail_sms/tests/test_sms_post.py:        with self.with_user('employee'), self.mockSMSGateway(nbr_t_error={self.partner_2._phone_format(): 'wrong_number_format'}):
./addons/test_mail_sms/tests/test_sms_post.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_post.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway(sms_allow_unlink=True):
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:        with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:        with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway(sms_allow_unlink=True):
./addons/test_mail_sms/tests/test_sms_composer.py:        with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_composer.py:            with self.mockSMSGateway():
./addons/test_mail_sms/tests/test_sms_sms.py:from unittest.mock import patch
./addons/test_mail_sms/tests/test_sms_sms.py:from unittest.mock import DEFAULT
./addons/test_mail_sms/tests/test_sms_sms.py:from odoo.addons.link_tracker.tests.common import MockLinkTracker
./addons/test_mail_sms/tests/test_sms_sms.py:class TestSMSPost(SMSCommon, MockLinkTracker):
./addons/test_mail_sms/tests/test_sms_sms.py:        with patch.object(SmsModel, '_send', autospec=True, side_effect=_send) as _send_mock:
./addons/test_mail_sms/tests/test_sms_sms.py:        with self.mockSMSGateway(sms_allow_unlink=True, sim_error='jsonrpc_exception'):
./addons/test_mail_sms/tests/test_sms_sms.py:        with self.mockSMSGateway(sms_allow_unlink=True, nbr_t_error={
./addons/test_mail_sms/tests/test_sms_sms.py:        with self.mockSMSGateway(sms_allow_unlink=True, nbr_t_error={
./addons/test_mail_sms/tests/test_sms_sms.py:        with self.mockSMSGateway(sms_allow_unlink=True, nbr_t_error={
./addons/test_mail_sms/tests/test_sms_sms.py:        with self.mockSMSGateway(sms_allow_unlink=True, nbr_t_error={
./addons/test_mail_sms/tests/test_sms_sms.py:            with self.mockSMSGateway(sim_error='jsonrpc_exception'):
./addons/test_mail_sms/tests/test_sms_sms.py:        with self.mockSMSGateway(sim_error='jsonrpc_exception'):
./addons/test_mail_sms/tests/test_sms_sms.py:        with self.mockSMSGateway(moderated=True):
./addons/test_mail_sms/tests/test_sms_sms.py:        with self.mockSMSGateway(sim_error='something_new'):
./addons/test_mail_sms/tests/test_sms_performance.py:        with self.subTest("QueryCount"), self.mockSMSGateway(sms_allow_unlink=True), self.assertQueryCount(employee=31):  # tms: 31
./addons/test_mail_sms/tests/test_sms_performance.py:        with self.subTest("QueryCount"), self.mockSMSGateway(sms_allow_unlink=True), self.assertQueryCount(employee=31):  # tms: 31
./addons/test_mail_sms/tests/test_sms_performance.py:        with self.subTest("QueryCount"), self.mockSMSGateway(sms_allow_unlink=True), self.assertQueryCount(employee=32):  # tms: 32
./addons/test_mail_sms/tests/test_sms_performance.py:class TestSMSMassPerformance(BaseMailPerformance, sms_common.MockSMS):
./addons/test_mail_sms/tests/test_sms_performance.py:        with self.mockSMSGateway(sms_allow_unlink=True), self.assertQueryCount(employee=59):
./addons/test_mail_sms/tests/test_sms_performance.py:        with self.mockSMSGateway(sms_allow_unlink=True), self.assertQueryCount(employee=62):
./addons/crm/static/tests/mock_server.js:import { MockServer } from "@web/../tests/helpers/mock_server";
./addons/crm/static/tests/mock_server.js:patch(MockServer.prototype, {
./addons/crm/static/tests/crm_rainbowman_tests.js:import "@crm/../tests/mock_server";
./addons/crm/static/tests/crm_rainbowman_tests.js:function getMockRpc(assert) {
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/crm_rainbowman_tests.js:            mockRPC: getMockRpc(assert),
./addons/crm/static/tests/forecast_kanban_tests.js:     * Since mock_server does not support fill_temporal,
./addons/crm/static/tests/forecast_kanban_tests.js:            mockRPC: function (route, args) {
./addons/crm/static/tests/forecast_kanban_tests.js:     * Since mock_server does not support fill_temporal,
./addons/crm/static/tests/forecast_kanban_tests.js:            mockRPC: function (route, args) {
./addons/crm/static/tests/forecast_kanban_tests.js:            async mockRPC(route, args) {
./addons/crm/static/tests/crm_test_helpers.js:import { CrmLead } from "@crm/../tests/mock_server/mock_models/crm_lead";
./addons/crm/static/tests/crm_kanban_progress_bar_mrr_sum_field_tests.js:import { patchUserWithCleanup } from "@web/../tests/helpers/mock_services";
./addons/crm/static/tests/crm_kanban_progress_bar_mrr_sum_field_tests.js:            async mockRPC(route, args) {
./addons/crm/static/tests/forecast_view_tests.js:import { mock } from "@web/../tests/legacy_tests/helpers/test_utils";
./addons/crm/static/tests/forecast_view_tests.js:const patchDate = mock.patchDate;
./addons/crm/static/tests/forecast_view_tests.js:            mockRPC(_, args) {
./addons/crm/static/tests/forecast_view_tests.js:                mockRPC(_, args) {
./addons/crm/tests/test_crm_lead_convert.py:        cls.crm_lead_dt_mock.now.return_value = date
./addons/crm/tests/test_crm_lead_convert.py:        self.crm_lead_dt_mock.now.return_value = date
./addons/crm/tests/test_crm_lead_convert.py:        self.crm_lead_dt_mock.now.return_value = date
./addons/crm/tests/common.py:from unittest.mock import patch
./addons/crm/tests/common.py:        cls.crm_lead_dt_mock = cls.startClassPatcher(cls.crm_lead_dt_patcher)
./addons/crm/tests/test_crm_pls.py:        with self.mock_mail_gateway():
./addons/crm/tests/test_crm_lead_assignment.py:from unittest.mock import patch
./addons/crm/tests/test_crm_lead.py:from unittest.mock import patch
./addons/crm/views/assets.xml:            <script type="text/javascript" src="/crm/static/tests/mock_server.js"></script>
./addons/crm/__manifest__.py:            'crm/static/tests/mock_server/**/*',
./addons/crm/__manifest__.py:            ('remove', 'crm/static/tests/mock_server/**/*'),
./addons/website_event_crm/tests/test_event_registration.py:            with self.mock_datetime_and_now(now):
./addons/website_event_crm/tests/test_event_registration.py:            with self.mock_datetime_and_now(now + timedelta(hours=1)):
./addons/payment_mollie/tests/test_mollie.py:from unittest.mock import patch
./addons/analytic/static/tests/analytic_distribution_tests.js:            mockRPC(route, { method, model }) {
./addons/analytic/static/tests/analytic_distribution_tests.js:            mockRPC(route, { kwargs, method, model }) {
./addons/analytic/static/tests/analytic_distribution_tests.js:            mockRPC(route, { kwargs, method, model }) {
./addons/snailmail/static/tests/messaging_menu/messaging_menu_patch.test.js:import { asyncStep, mockService, serverState, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/snailmail/static/tests/messaging_menu/messaging_menu_patch.test.js:    mockService("action", {
./addons/snailmail/static/tests/snailmail_test_helpers.js:import { IapAccount } from "@snailmail/../tests/mock_server/mock_model/iap_account";
./addons/snailmail/static/tests/snailmail_test_helpers.js:import { SnailmailLetter } from "@snailmail/../tests/mock_server/mock_model/snailmail_letter";
./addons/snailmail/static/tests/message/message_patch.test.js:import { Deferred } from "@odoo/hoot-mock";
./addons/link_tracker/tests/common.py:from unittest.mock import patch
./addons/link_tracker/tests/common.py:class MockLinkTracker(common.BaseCase):
./addons/link_tracker/tests/common.py:        super(MockLinkTracker, self).setUp()
./addons/link_tracker/tests/test_link_tracker.py:from odoo.addons.link_tracker.tests.common import MockLinkTracker
./addons/link_tracker/tests/test_link_tracker.py:class TestLinkTracker(common.TransactionCase, MockLinkTracker):
./addons/l10n_es_edi_facturae/tests/test_edi_xml.py:from unittest.mock import patch
./addons/web/static/tests/search/search_model.test.js:import { mockDate, mockTimeZone } from "@odoo/hoot-mock";
./addons/web/static/tests/search/search_model.test.js:    mockDate("2019-01-06T15:00:00");
./addons/web/static/tests/search/search_model.test.js:    mockDate("2019-01-06T15:00:00");
./addons/web/static/tests/search/search_model.test.js:    mockDate("2019-01-06T15:00:00");
./addons/web/static/tests/search/search_model.test.js:    mockDate("2019-01-06T15:00:00");
./addons/web/static/tests/search/search_model.test.js:    mockDate("2021-09-17T10:00:00");
./addons/web/static/tests/search/search_model.test.js:    mockTimeZone(2);
./addons/web/static/tests/search/with_search.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/search/pager_hook.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/search/search_utils.test.js:import { mockDate, mockTimeZone } from "@odoo/hoot-mock";
./addons/web/static/tests/search/search_utils.test.js:    mockTimeZone(0);
./addons/web/static/tests/search/search_utils.test.js:    mockDate("2020-06-01T13:00:00");
./addons/web/static/tests/search/search_utils.test.js:    mockTimeZone(2);
./addons/web/static/tests/search/search_utils.test.js:    mockDate("2020-06-01T00:00:00");
./addons/web/static/tests/search/search_utils.test.js:    mockDate("2020-06-01T13:00:00");
./addons/web/static/tests/search/search_utils.test.js:    mockTimeZone(2);
./addons/web/static/tests/search/search_utils.test.js:    mockDate("2020-06-01T00:00:00");
./addons/web/static/tests/search/search_utils.test.js:    mockDate("2020-01-01T12:00:00");
./addons/web/static/tests/search/search_utils.test.js:    mockDate("2020-01-01T12:00:00");
./addons/web/static/tests/search/search_utils.test.js:    mockDate("2020-06-01T13:00:00");
./addons/web/static/tests/search/search_utils.test.js:    mockDate("2020-06-01T13:00:00");
./addons/web/static/tests/search/search_utils.test.js:    mockDate("2020-06-01T13:00:00");
./addons/web/static/tests/search/control_panel.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/search/search_bar_menu/groupby_menu.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/search/search_bar_menu/favorite_menu.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/web/static/tests/search/search_bar_menu/favorite_menu.test.js:    mockService,
./addons/web/static/tests/search/search_bar_menu/favorite_menu.test.js:    mockService("action", {
./addons/web/static/tests/search/search_bar_menu/favorite_menu.test.js:    mockDate("2019-07-31T13:43:00");
./addons/web/static/tests/search/search_bar_menu/filter_menu.test.js:import { animationFrame, mockDate } from "@odoo/hoot-mock";
./addons/web/static/tests/search/search_bar_menu/filter_menu.test.js:    mockService,
./addons/web/static/tests/search/search_bar_menu/filter_menu.test.js:    mockDate("2017-03-22T01:00:00");
./addons/web/static/tests/search/search_bar_menu/filter_menu.test.js:    mockDate("2017-01-07T03:00:00");
./addons/web/static/tests/search/search_bar_menu/filter_menu.test.js:    mockDate("2017-01-07T03:00:00");
./addons/web/static/tests/search/search_bar_menu/filter_menu.test.js:    mockDate("2017-01-07T03:00:00");
./addons/web/static/tests/search/search_bar_menu/filter_menu.test.js:    mockDate("2019-07-31T13:43:00");
./addons/web/static/tests/search/search_bar_menu/filter_menu.test.js:    mockDate("2019-07-31T13:43:00");
./addons/web/static/tests/search/search_bar_menu/filter_menu.test.js:    mockDate("2019-07-31T13:43:00");
./addons/web/static/tests/search/search_bar_menu/filter_menu.test.js:    mockDate("2019-07-31T13:43:00");
./addons/web/static/tests/search/search_bar_menu/filter_menu.test.js:        mockDate("2019-07-31T13:43:00");
./addons/web/static/tests/search/search_bar_menu/filter_menu.test.js:    mockService("notification", {
./addons/web/static/tests/search/search_panel_desktop.test.js:import { Deferred, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/search/search_bar.test.js:import { Deferred, animationFrame, mockTimeZone } from "@odoo/hoot-mock";
./addons/web/static/tests/search/search_bar.test.js:    mockTimeZone(6);
./addons/web/static/tests/search/custom_favorite_item.test.js:    mockService,
./addons/web/static/tests/search/custom_favorite_item.test.js:    mockService("notification", {
./addons/web/static/tests/search/custom_favorite_item.test.js:    mockService("notification", {
./addons/web/static/tests/search/custom_favorite_item.test.js:    mockService("notification", {
./addons/web/static/tests/mock_server/mock_server.test.js:    makeMockServer,
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    const { env } = await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    const { env } = await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    const { env } = await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    const { env } = await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    const { env } = await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    const { env } = await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    const { env } = await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    const { env } = await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_server.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_model.test.js:    MockServer,
./addons/web/static/tests/mock_server/mock_model.test.js:    makeMockEnv,
./addons/web/static/tests/mock_server/mock_model.test.js:    makeMockServer,
./addons/web/static/tests/mock_server/mock_model.test.js:    await makeMockServer();
./addons/web/static/tests/mock_server/mock_model.test.js:    expect(MockServer.env["anonymous"]).toBeInstanceOf(AnonymousClass);
./addons/web/static/tests/mock_server/mock_model.test.js:    expect(MockServer.env["foo"]).toBeInstanceOf(Foo);
./addons/web/static/tests/mock_server/mock_model.test.js:    expect(MockServer.env["project.task"]).toBeInstanceOf(ResCurrency);
./addons/web/static/tests/mock_server/mock_model.test.js:    expect(MockServer.env["res.partner"]).toBeInstanceOf(ResPartner);
./addons/web/static/tests/mock_server/mock_model.test.js:    expect(() => MockServer.env["res.currency"]).toThrow(
./addons/web/static/tests/mock_server/mock_model.test.js:test("model should be defined on the mock server", async () => {
./addons/web/static/tests/mock_server/mock_model.test.js:    await makeMockEnv();
./addons/web/static/tests/mock_server/mock_model.test.js:        await makeMockEnv();
./addons/web/static/tests/mock_server/mock_model.test.js:        await makeMockEnv();
./addons/web/static/tests/mock_server/mock_model.test.js:            await makeMockEnv();
./addons/web/static/tests/public/interaction.test.js:import { advanceTime, Deferred } from "@odoo/hoot-mock";
./addons/web/static/tests/public/interaction_service.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/public/interaction_service.test.js:import { makeMockEnv } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/public/interaction_service.test.js:    const env = await makeMockEnv();
./addons/web/static/tests/public/helpers.js:import { clearRegistry, makeMockEnv, patchWithCleanup } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/public/helpers.js:    const env = await makeMockEnv();
./addons/web/static/tests/public/helpers.js:export function mockSendRequests() {
./addons/web/static/tests/public/public_component_service.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/legacy/search/helpers.js:import { makeTestEnv } from "@web/../tests/helpers/mock_env";
./addons/web/static/tests/legacy/search/helpers.js:    const mockRPC = props.mockRPC || undefined;
./addons/web/static/tests/legacy/search/helpers.js:    delete props.mockRPC;
./addons/web/static/tests/legacy/search/helpers.js:    const env = await makeTestEnv({ serverData, mockRPC });
./addons/web/static/tests/legacy/setup.js:import { prepareRegistriesWithCleanup } from "./helpers/mock_env";
./addons/web/static/tests/legacy/setup.js:function makeMockLocation() {
./addons/web/static/tests/legacy/setup.js:    const mockLocation = makeMockLocation();
./addons/web/static/tests/legacy/setup.js:    let historyStack = [[null, mockLocation.href]];
./addons/web/static/tests/legacy/setup.js:                throw new Error("sendBeacon called in test but not mocked");
./addons/web/static/tests/legacy/setup.js:        location: mockLocation,
./addons/web/static/tests/legacy/setup.js:                mockLocation.assign(url);
./addons/web/static/tests/legacy/setup.js:                mockLocation.assign(url);
./addons/web/static/tests/legacy/setup.js:                mockLocation.assign(url);
./addons/web/static/tests/legacy/setup.js:                mockLocation.assign(url);
./addons/web/static/tests/legacy/setup.js:        XMLHttpRequest: class MockXHR {
./addons/web/static/tests/legacy/setup.js:    const mockedUser = _makeUser(sessionInfo);
./addons/web/static/tests/legacy/setup.js:    patchWithCleanup(user, mockedUser);
./addons/web/static/tests/legacy/setup.js:                    "%c[assets] fetch (mock) JS ressource: " + ressource,
./addons/web/static/tests/legacy/setup.js:                    "%c[assets] fetch (mock) CSS ressource: " + ressource,
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils_mock.js:/** @odoo-module alias=@web/../tests/legacy_tests/helpers/test_utils_mock default=false */
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils_mock.js: * Mock Test Utils
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils_mock.js: * This module defines various utility functions to help mocking data.
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils_mock.js: *  testUtils.mock.patchDate(2018, 0, 10, 17, 59, 30)
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils_tests.js:    const unpatchDate = testUtils.mock.patchDate(2018, 9, 23, 14, 50, 0);
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils_tests.js:    const unpatchDate = testUtils.mock.patchDate(2018, 9, 23, 14, 50, 0);
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:     * In this module, we define various utility functions to help simulate a mock
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:    import testUtilsMock from "@web/../tests/legacy_tests/helpers/test_utils_mock";
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:    export const mock = {
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:        intercept: testUtilsMock.intercept,
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:        patch: testUtilsMock.patch,
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:        patchDate: testUtilsMock.patchDate,
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:        unpatch: testUtilsMock.unpatch,
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:        getView: testUtilsMock.getView,
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:        mock,
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:        getView: deprecated(testUtilsMock.getView, 'mock'),
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:        intercept: deprecated(testUtilsMock.intercept, 'mock'),
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:        patch: deprecated(testUtilsMock.patch, 'mock'),
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:        patchDate: deprecated(testUtilsMock.patchDate, 'mock'),
./addons/web/static/tests/legacy/legacy_tests/helpers/test_utils.js:        unpatch: deprecated(testUtilsMock.unpatch, 'mock'),
./addons/web/static/tests/legacy/mock_server_tests.js:/** @odoo-module alias=@web/../tests/mock_server_tests default=false */
./addons/web/static/tests/legacy/mock_server_tests.js:import { MockServer } from "./helpers/mock_server";
./addons/web/static/tests/legacy/mock_server_tests.js:QUnit.module("MockServer", (hooks) => {
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:            const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:            const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:            const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:            const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:            const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const mockServer = new MockServer(data);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.deepEqual(mockServer.models.bar.records[0].one2many_field, [2]);
./addons/web/static/tests/legacy/mock_server_tests.js:        mockServer.mockUnlink("foo", [2]);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.deepEqual(mockServer.models.bar.records[0].one2many_field, []);
./addons/web/static/tests/legacy/mock_server_tests.js:        const mockServer = new MockServer(data);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.deepEqual(mockServer.models.bar.records[0].one2many_field, [2]);
./addons/web/static/tests/legacy/mock_server_tests.js:        mockServer.mockUnlink("foo", [2]);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.deepEqual(mockServer.models.bar.records[0].one2many_field, []);
./addons/web/static/tests/legacy/mock_server_tests.js:        const mockServer = new MockServer(data);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.strictEqual(mockServer.models.bar.records[0].many2one_field, 3);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.strictEqual(mockServer.models.bar.records[1].many2one_field, 3);
./addons/web/static/tests/legacy/mock_server_tests.js:        mockServer.mockUnlink("foo", [3]);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.strictEqual(mockServer.models.bar.records[0].many2one_field, false);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.strictEqual(mockServer.models.bar.records[1].many2one_field, false);
./addons/web/static/tests/legacy/mock_server_tests.js:        const mockServer = new MockServer(data);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.deepEqual(mockServer.models.bar.records[0].many2many_field, [2]);
./addons/web/static/tests/legacy/mock_server_tests.js:        mockServer.mockUnlink("foo", [2]);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.deepEqual(mockServer.models.bar.records[0].many2many_field, []);
./addons/web/static/tests/legacy/mock_server_tests.js:        const mockServer = new MockServer(data);
./addons/web/static/tests/legacy/mock_server_tests.js:        mockServer.mockWrite("foo", [[3], { one2many_field: [1] }]);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.strictEqual(mockServer.models.bar.records[0].many2one_field, 3);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.strictEqual(mockServer.models.bar.records[1].many2one_field, false);
./addons/web/static/tests/legacy/mock_server_tests.js:        const mockServer = new MockServer(data);
./addons/web/static/tests/legacy/mock_server_tests.js:        mockServer.mockWrite("foo", [[2], { many2many_field: [] }]); // save nothing
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.deepEqual(mockServer.models.bar.records[0].many2many_field, [2]);
./addons/web/static/tests/legacy/mock_server_tests.js:        const mockServer = new MockServer(data);
./addons/web/static/tests/legacy/mock_server_tests.js:        mockServer.mockWrite("foo", [[2], { many2one_field: false }]);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.deepEqual(mockServer.models.bar.records[0].one2many_field, []);
./addons/web/static/tests/legacy/mock_server_tests.js:        const mockServer = new MockServer(data);
./addons/web/static/tests/legacy/mock_server_tests.js:        mockServer.mockWrite("foo", [[2], { many2one_reference: false }]);
./addons/web/static/tests/legacy/mock_server_tests.js:        assert.deepEqual(mockServer.models.bar.records[0].one2many_field, []);
./addons/web/static/tests/legacy/mock_server_tests.js:        const mockServer = new MockServer(data);
./addons/web/static/tests/legacy/mock_server_tests.js:        const result = mockServer.mockWebRead("bar", [[1]], {
./addons/web/static/tests/legacy/mock_server_tests.js:        const mockServer = new MockServer(data);
./addons/web/static/tests/legacy/mock_server_tests.js:        const { views } = mockServer.mockGetViews("bar", { views: [[10001, "list"]], options: {} });
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:        const server = new MockServer(data, {});
./addons/web/static/tests/legacy/mock_server_tests.js:            const mockServer = new MockServer(data);
./addons/web/static/tests/legacy/mock_server_tests.js:            const { views } = mockServer.mockGetViews("bar", {
./addons/web/static/tests/legacy/mock_server_tests.js:            const mockServer = new MockServer(data);
./addons/web/static/tests/legacy/mock_server_tests.js:            const { views } = mockServer.mockGetViews("bar", {
./addons/web/static/tests/legacy/views/kanban/helpers.js:import { makeFakeDialogService } from "@web/../tests/helpers/mock_services";
./addons/web/static/tests/legacy/views/helpers.js:import { makeTestEnv } from "@web/../tests/helpers/mock_env";
./addons/web/static/tests/legacy/views/helpers.js:} from "../helpers/mock_services";
./addons/web/static/tests/legacy/views/helpers.js: *  mockRPC?: Function,
./addons/web/static/tests/legacy/views/helpers.js:    const mockRPC = props.mockRPC;
./addons/web/static/tests/legacy/views/helpers.js:    delete props.mockRPC;
./addons/web/static/tests/legacy/views/helpers.js:    const env = await makeTestEnv({ serverData, mockRPC });
./addons/web/static/tests/legacy/views/list_view_tests.js:                mockRPC(route, args) {
./addons/web/static/tests/legacy/views/list_view_tests.js:                mockRPC(route, args) {
./addons/web/static/tests/legacy/views/list_view_tests.js:                mockRPC(route, args) {
./addons/web/static/tests/legacy/views/list_view_tests.js:            mockRPC(route, args) {
./addons/web/static/tests/legacy/views/calendar/helpers.js:import { clearRegistryWithCleanup, makeTestEnv } from "../../helpers/mock_env";
./addons/web/static/tests/legacy/core/condition_tree_editor_helpers.js:import { makeFakeLocalizationService } from "../helpers/mock_services";
./addons/web/static/tests/legacy/helpers/mock_server.js:/** @odoo-module alias=@web/../tests/helpers/mock_server default=false */
./addons/web/static/tests/legacy/helpers/mock_server.js:import { patchRPCWithCleanup, makeMockFetch } from "./mock_services";
./addons/web/static/tests/legacy/helpers/mock_server.js:// MockServer
./addons/web/static/tests/legacy/helpers/mock_server.js:export class MockServer {
./addons/web/static/tests/legacy/helpers/mock_server.js:            throw new Error(`Model ${modelName} was not defined in mock server data`);
./addons/web/static/tests/legacy/helpers/mock_server.js:                values[fname] = this.mockWebRead(field.relation, [[val]], {
./addons/web/static/tests/legacy/helpers/mock_server.js:                            cmd[2] = this.mockWebRead(field.relation, [[cmd[1]]], {
./addons/web/static/tests/legacy/helpers/mock_server.js:                    const result = this.mockWebRead(model, [[id]], {
./addons/web/static/tests/legacy/helpers/mock_server.js:        // Check if there is an handler in the mockRegistry: either specific for this model
./addons/web/static/tests/legacy/helpers/mock_server.js:        // This allows to mock routes/methods defined outside web.
./addons/web/static/tests/legacy/helpers/mock_server.js:        const mockFunction =
./addons/web/static/tests/legacy/helpers/mock_server.js:            registry.category("mock_server").get(`${args.model}/${methodName}`, null) ||
./addons/web/static/tests/legacy/helpers/mock_server.js:            registry.category("mock_server").get(methodName, null);
./addons/web/static/tests/legacy/helpers/mock_server.js:        if (mockFunction) {
./addons/web/static/tests/legacy/helpers/mock_server.js:            return mockFunction.call(this, route, args);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockLoadMenus();
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockLoadAction(args);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockLoadBreadcrumbs(args);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockWrite(args.model, [args.args[0], { active: false }]);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockWrite(args.model, [args.args[0], { active: true }]);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockCopy(args.model, args.args, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockCreate(args.model, args.args[0], args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockFieldsGet(args.model, args.fields);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockGetViews(args.model, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockNameCreate(args.model, args.args[0], args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockNameSearch(args.model, args.args, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockOnchange(args.model, args.args, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockRead(args.model, args.args);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockSearch(args.model, args.args, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockSearchCount(args.model, args.args, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockSearchPanelSelectRange(args.model, args.args, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockSearchPanelSelectMultiRange(args.model, args.args, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockSearchRead(args.model, args.args, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockUnlink(args.model, args.args);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockWebRead(args.model, args.args, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockWebSave(args.model, args.args, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockFormattedReadGroup(args.model, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockWebReadGroup(args.model, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockWebSearchReadUnity(args.model, args.args, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockReadProgressBar(args.model, args.kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:                return this.mockWrite(args.model, args.args);
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockCopy(modelName, [ids], kwargs = {}) {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockCreate(modelName, valsList, kwargs = {}) {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockDefaultGet(modelName, args, kwargs = {}) {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockFieldsGet(modelName, fieldNames) {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockLoadAction({ action_id } = {}) {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockLoadBreadcrumbs({ actions }) {
./addons/web/static/tests/legacy/helpers/mock_server.js:                const act = this.mockLoadAction({ action_id });
./addons/web/static/tests/legacy/helpers/mock_server.js:                        display_name: this.mockRead(act.res_model, [[resId], ["display_name"]])[0]
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockLoadMenus() {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockGetViews(modelName, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:            models[modelName] = { fields: this.mockFieldsGet(modelName, [...fields]) };
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockNameCreate(modelName, name, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:        const [id] = this.mockCreate(modelName, [values], kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockNameSearch(model, args, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockOnchange(modelName, args, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:            serverValues = this.mockRead(modelName, [args[0], [...fieldsFromView]], kwargs)[0];
./addons/web/static/tests/legacy/helpers/mock_server.js:            const defaultValues = this.mockDefaultGet(modelName, [[...fieldsFromView]], kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockRead(modelName, args) {
./addons/web/static/tests/legacy/helpers/mock_server.js:        // Mapping of model records used in the current mockRead call.
./addons/web/static/tests/legacy/helpers/mock_server.js:                    "mock read: falsy value given as id, would result in an access error in actual server !"
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockFormattedReadGroup(modelName, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:                    throw new Error(`Aggregate "${func}" not implemented in MockServer`);
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockUnlink(modelName, [ids]) {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockWebReadGroup(modelName, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:        const groups = this.mockFormattedReadGroup(modelName, kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:        const allGroups = this.mockFormattedReadGroup(modelName, {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockReadProgressBar(modelName, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:        const groups = this.mockFormattedReadGroup(modelName, {
./addons/web/static/tests/legacy/helpers/mock_server.js:     * @see mockSearchPanelDomainImage()
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockSearchPanelFieldImage(model, fieldName, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:            return this.mockSearchPanelDomainImage(model, fieldName, countDomain, true);
./addons/web/static/tests/legacy/helpers/mock_server.js:        const modelDomainImage = this.mockSearchPanelDomainImage(
./addons/web/static/tests/legacy/helpers/mock_server.js:            const countDomainImage = this.mockSearchPanelDomainImage(
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockSearchPanelDomainImage(model, fieldName, domain, setCount = false, limit = false) {
./addons/web/static/tests/legacy/helpers/mock_server.js:            // mockFormattedReadGroup does not take care of the condition [fieldName, '!=', false]
./addons/web/static/tests/legacy/helpers/mock_server.js:        const groups = this.mockFormattedReadGroup(model, {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockSearchPanelGlobalCounters(valuesRange, parentName) {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockSearchPanelSanitizedParentHierarchy(records, parentName, ids) {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockSearchPanelSelectionRange(model, fieldName, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:            domainImage = this.mockSearchPanelFieldImage(model, fieldName, newKwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockSearchPanelSelectRange(model, [fieldName], kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:                values: this.mockSearchPanelSelectionRange(model, fieldName, newKwargs),
./addons/web/static/tests/legacy/helpers/mock_server.js:            domainImage = this.mockSearchPanelFieldImage(model, fieldName, newKwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:        let comodelRecords = this.mockSearchRead(field.relation, [comodelDomain, fieldNames], {
./addons/web/static/tests/legacy/helpers/mock_server.js:            comodelRecords = this.mockSearchPanelSanitizedParentHierarchy(
./addons/web/static/tests/legacy/helpers/mock_server.js:            this.mockSearchPanelGlobalCounters(fieldRange, parentName);
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockSearchPanelSelectMultiRange(model, [fieldName], kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:                values: this.mockSearchPanelSelectionRange(model, fieldName, newKwargs),
./addons/web/static/tests/legacy/helpers/mock_server.js:            const comodelRecords = this.mockSearchRead(
./addons/web/static/tests/legacy/helpers/mock_server.js:                        count = this.mockSearchCount(model, [searchCountDomain]);
./addons/web/static/tests/legacy/helpers/mock_server.js:                            inImage = this.mockSearch(model, [searchDomain], { limit: 1 }).length;
./addons/web/static/tests/legacy/helpers/mock_server.js:                domainImage = this.mockSearchPanelFieldImage(model, fieldName, newKwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:            const comodelRecords = this.mockSearchRead(
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockSearch(modelName, args, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:        const result = this.mockSearchController({
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockSearchCount(model, args, kwargs = {}) {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockSearchRead(modelName, args, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:        const { fieldNames, records } = this.mockSearchController({
./addons/web/static/tests/legacy/helpers/mock_server.js:        return this.mockRead(modelName, [records.map((r) => r.id), fieldNames]);
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockWebSave(modelName, args, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:            args[0] = this.mockCreate(modelName, args[1], kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:            this.mockWrite(modelName, args);
./addons/web/static/tests/legacy/helpers/mock_server.js:        return this.mockWebRead(modelName, args, kwargs);
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockWebRead(modelName, args, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:        const records = this.mockRead(modelName, [ids, fieldNames], {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockWebSearchReadUnity(modelName, args, kwargs) {
./addons/web/static/tests/legacy/helpers/mock_server.js:        const { fieldNames, length, records } = this.mockSearchController({
./addons/web/static/tests/legacy/helpers/mock_server.js:            records: this.mockRead(modelName, [records.map((r) => r.id), fieldNames]),
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockSearchController(params) {
./addons/web/static/tests/legacy/helpers/mock_server.js:    mockWrite(modelName, args) {
./addons/web/static/tests/legacy/helpers/mock_server.js:            const [originalRecord] = this.mockSearchRead(modelName, [[["id", "=", id]]], {});
./addons/web/static/tests/legacy/helpers/mock_server.js:                `Mock: cannot sort records of model "${modelName}" by field "${fieldName}": field not found`
./addons/web/static/tests/legacy/helpers/mock_server.js:            throw new Error("MockServer._getRecords: given domain has to be an array.");
./addons/web/static/tests/legacy/helpers/mock_server.js:                    `Mock: Can't write value "${JSON.stringify(
./addons/web/static/tests/legacy/helpers/mock_server.js:                        const [newId] = this.mockCreate(field.relation, [inverseData]);
./addons/web/static/tests/legacy/helpers/mock_server.js:                        this.mockWrite(field.relation, [[command[1]], command[2]]);
./addons/web/static/tests/legacy/helpers/mock_server.js:                            )}" not supported by the MockServer on field "${fieldName}" on record "${model},${id}"`
./addons/web/static/tests/legacy/helpers/mock_server.js:                            const result = this.mockWebRead(model, [[id]], {
./addons/web/static/tests/legacy/helpers/mock_server.js:                            const result = this.mockWebRead(model, [[id]], {
./addons/web/static/tests/legacy/helpers/mock_server.js:                        const result = this.mockWebRead(field.relation, [ids], {
./addons/web/static/tests/legacy/helpers/mock_server.js:                                record[fieldName] = this.mockWebRead(
./addons/web/static/tests/legacy/helpers/mock_server.js:// MockServer deployment helper
./addons/web/static/tests/legacy/helpers/mock_server.js:// instance of `MockServer` linked to the current test.
./addons/web/static/tests/legacy/helpers/mock_server.js:let mockServer;
./addons/web/static/tests/legacy/helpers/mock_server.js:QUnit.testStart(() => (mockServer = undefined));
./addons/web/static/tests/legacy/helpers/mock_server.js:export async function makeMockServer(serverData, mockRPC) {
./addons/web/static/tests/legacy/helpers/mock_server.js:    if (!mockServer) {
./addons/web/static/tests/legacy/helpers/mock_server.js:        mockServer = new MockServer(serverData, {
./addons/web/static/tests/legacy/helpers/mock_server.js:        Object.assign(mockServer.archs, serverData.views);
./addons/web/static/tests/legacy/helpers/mock_server.js:        Object.assign(mockServer.actions, serverData.actions);
./addons/web/static/tests/legacy/helpers/mock_server.js:    const _mockRPC = async (route, args = {}) => {
./addons/web/static/tests/legacy/helpers/mock_server.js:        if (!mockServer.active) {
./addons/web/static/tests/legacy/helpers/mock_server.js:        if (mockRPC) {
./addons/web/static/tests/legacy/helpers/mock_server.js:            res = await mockRPC(route, args, mockServer.performRPC.bind(mockServer));
./addons/web/static/tests/legacy/helpers/mock_server.js:            res = await mockServer.performRPC(route, args);
./addons/web/static/tests/legacy/helpers/mock_server.js:        fetch: makeMockFetch(_mockRPC),
./addons/web/static/tests/legacy/helpers/mock_server.js:    patchRPCWithCleanup(_mockRPC);
./addons/web/static/tests/legacy/helpers/mock_server.js:    if (mockRPC) {
./addons/web/static/tests/legacy/helpers/mock_server.js:                    // Bypass `mockRPC` for the stracktrace.js lib to avoid infinite loop if there
./addons/web/static/tests/legacy/helpers/mock_server.js:                    // is an error inside the `mockRPC` call.
./addons/web/static/tests/legacy/helpers/mock_server.js:                let res = await mockRPC(resource, {});
./addons/web/static/tests/legacy/helpers/mock_server.js:                    makeLogger("ASSETS", "fetch (mock) JS resource").request(resource);
./addons/web/static/tests/legacy/helpers/mock_server.js:                let res = await mockRPC(resource, {});
./addons/web/static/tests/legacy/helpers/mock_server.js:                    makeLogger("ASSETS", "fetch (mock) CSS resource").request(resource);
./addons/web/static/tests/legacy/helpers/mock_server.js:    registerCleanup(() => (mockServer.active = false));
./addons/web/static/tests/legacy/helpers/mock_server.js:    return mockServer;
./addons/web/static/tests/legacy/helpers/utils.js:export function mockDownload(cb) {
./addons/web/static/tests/legacy/helpers/utils.js:export function mockSendBeacon(mock) {
./addons/web/static/tests/legacy/helpers/utils.js:            return mock(url, blob) !== false;
./addons/web/static/tests/legacy/helpers/utils.js:export function mockTimeout() {
./addons/web/static/tests/legacy/helpers/utils.js:export function mockAnimationFrame() {
./addons/web/static/tests/legacy/helpers/mock_services.js:/** @odoo-module alias=@web/../tests/helpers/mock_services default=false */
./addons/web/static/tests/legacy/helpers/mock_services.js:// Mock Services
./addons/web/static/tests/legacy/helpers/mock_services.js:export function patchRPCWithCleanup(mockRPC = () => {}) {
./addons/web/static/tests/legacy/helpers/mock_services.js:                Promise.resolve(mockRPC(...arguments))
./addons/web/static/tests/legacy/helpers/mock_services.js:export function makeMockXHR(response, sendCb, def) {
./addons/web/static/tests/legacy/helpers/mock_services.js:    const MockXHR = function () {
./addons/web/static/tests/legacy/helpers/mock_services.js:    return MockXHR;
./addons/web/static/tests/legacy/helpers/mock_services.js:// Low level API mocking
./addons/web/static/tests/legacy/helpers/mock_services.js:export function makeMockFetch(mockRPC) {
./addons/web/static/tests/legacy/helpers/mock_services.js:            res = await mockRPC(route, params);
./addons/web/static/tests/legacy/helpers/mock_services.js:        // Mock some functions of the Response API to make them almost synchronous (micro-tick level)
./addons/web/static/tests/legacy/helpers/mock_services.js:export function makeFakeNotificationService(mock) {
./addons/web/static/tests/legacy/helpers/mock_services.js:                if (mock) {
./addons/web/static/tests/legacy/helpers/mock_services.js:                    return mock(...arguments);
./addons/web/static/tests/legacy/helpers/mock_services.js:export const mocks = {
./addons/web/static/tests/legacy/helpers/mount_in_fixture.js:import { makeTestEnv } from "@web/../tests/helpers/mock_env";
./addons/web/static/tests/legacy/helpers/mount_in_fixture.js:import { mocks } from "@web/../tests/helpers/mock_services";
./addons/web/static/tests/legacy/helpers/mount_in_fixture.js:        await addService("localization", mocks.localization);
./addons/web/static/tests/legacy/helpers/mock_env.js:/** @odoo-module alias=@web/../tests/helpers/mock_env default=false */
./addons/web/static/tests/legacy/helpers/mock_env.js:import { makeMockServer } from "./mock_server";
./addons/web/static/tests/legacy/helpers/mock_env.js:import { mocks } from "./mock_services";
./addons/web/static/tests/legacy/helpers/mock_env.js:                if (depName in mocks && !serviceRegistry.contains(depName)) {
./addons/web/static/tests/legacy/helpers/mock_env.js:                    const dep = mocks[depName]();
./addons/web/static/tests/legacy/helpers/mock_env.js:    if (config.serverData || config.mockRPC || config.activateMockServer) {
./addons/web/static/tests/legacy/helpers/mock_env.js:        await makeMockServer(config.serverData, config.mockRPC);
./addons/web/static/tests/legacy/webclient/helpers.js:import { makeTestEnv } from "../helpers/mock_env";
./addons/web/static/tests/legacy/webclient/helpers.js:} from "../helpers/mock_services";
./addons/web/static/tests/legacy/webclient/helpers.js:    const mockRPC = params.mockRPC || undefined;
./addons/web/static/tests/legacy/webclient/helpers.js:        mockRPC,
./addons/web/static/tests/model/record.test.js:import { runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/model/sample_server.test.js:        const { records } = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const { records } = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const { records } = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:            message: "Display name has been mocked",
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/model/sample_server.test.js:        const result = await server.mockRpc({
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockTouch,
./addons/web/static/tests/views/kanban/kanban_view.test.js:} from "@odoo/hoot-mock";
./addons/web/static/tests/views/kanban/kanban_view.test.js:    MockServer,
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService,
./addons/web/static/tests/views/kanban/kanban_view.test.js:async function createFileInput({ mockPost, mockAdd, props }) {
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService("notification", {
./addons/web/static/tests/views/kanban/kanban_view.test.js:        add: mockAdd || (() => {}),
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService("http", {
./addons/web/static/tests/views/kanban/kanban_view.test.js:        post: mockPost || (() => {}),
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService("action", {
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService("action", {
./addons/web/static/tests/views/kanban/kanban_view.test.js:    MockServer.env["partner"].create([{ foo: "new record" }]);
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService("action", {
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService("action", {
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService("action", {
./addons/web/static/tests/views/kanban/kanban_view.test.js:     * Added columns in mockRPC are empty
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService("action", {
./addons/web/static/tests/views/kanban/kanban_view.test.js:        mockPost: async (route) => {
./addons/web/static/tests/views/kanban/kanban_view.test.js:    const mockedCurrencies = {};
./addons/web/static/tests/views/kanban/kanban_view.test.js:        mockedCurrencies[record.id] = record;
./addons/web/static/tests/views/kanban/kanban_view.test.js:    patchWithCleanup(currencies, mockedCurrencies);
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService("action", {
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService("action", {
./addons/web/static/tests/views/kanban/kanban_view.test.js:test("sample server: _mockWebReadGroup API", async () => {
./addons/web/static/tests/views/kanban/kanban_view.test.js:        async _mockWebReadGroup() {
./addons/web/static/tests/views/kanban/kanban_view.test.js:            const result = await super._mockWebReadGroup(...arguments);
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService("action", {
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockService("action", {
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockTouch(true);
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockTouch(true);
./addons/web/static/tests/views/kanban/kanban_view.test.js:    mockTouch(true);
./addons/web/static/tests/views/view_dialogs/form_view_dialog.test.js:import { animationFrame, Deferred } from "@odoo/hoot-mock";
./addons/web/static/tests/views/view_dialogs/form_view_dialog.test.js:    mockService,
./addons/web/static/tests/views/view_dialogs/form_view_dialog.test.js:    mockService("action", {
./addons/web/static/tests/views/view_dialogs/form_view_dialog.test.js:    mockService("action", {
./addons/web/static/tests/views/view_dialogs/form_view_dialog.test.js:    mockService("action", {
./addons/web/static/tests/views/view_dialogs/export_data_dialog.test.js:import { animationFrame, Deferred, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/view_dialogs/export_data_dialog.test.js:    getMockEnv,
./addons/web/static/tests/views/view_dialogs/export_data_dialog.test.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/view_dialogs/select_create_dialog.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/view.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/view.test.js:    makeMockEnv,
./addons/web/static/tests/views/view.test.js:    mockService,
./addons/web/static/tests/views/view.test.js:    await makeMockEnv({ config: { views: [[1, "toy"]] } });
./addons/web/static/tests/views/view.test.js:    await makeMockEnv({ config: { views: [[false, "other"]] } });
./addons/web/static/tests/views/view.test.js:    await makeMockEnv({
./addons/web/static/tests/views/view.test.js:    mockService("action", {
./addons/web/static/tests/views/view.test.js:    mockService("action", {
./addons/web/static/tests/views/view.test.js:    mockService("action", {
./addons/web/static/tests/views/layout.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/layout.test.js:    makeMockEnv,
./addons/web/static/tests/views/layout.test.js:        env: await makeMockEnv({ config: {} }),
./addons/web/static/tests/views/layout.test.js:        env: await makeMockEnv({
./addons/web/static/tests/views/list/column_widths.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/list/list_view.test.js:    mockDate,
./addons/web/static/tests/views/list/list_view.test.js:    mockTimeZone,
./addons/web/static/tests/views/list/list_view.test.js:} from "@odoo/hoot-mock";
./addons/web/static/tests/views/list/list_view.test.js:    getMockEnv,
./addons/web/static/tests/views/list/list_view.test.js:    mockService,
./addons/web/static/tests/views/list/list_view.test.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/list/list_view.test.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/list/list_view.test.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/list/list_view.test.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/list/list_view.test.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:            // TODO: The mock server cannot handle order count
./addons/web/static/tests/views/list/list_view.test.js:            // TODO: The mock server cannot handle order count
./addons/web/static/tests/views/list/list_view.test.js:    mockService("notification", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("notification", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("notification", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("notification", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockDate("2017-02-10 12:00:00");
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockTimeZone(+2);
./addons/web/static/tests/views/list/list_view.test.js:    mockService("notification", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:    mockTimeZone(+6);
./addons/web/static/tests/views/list/list_view.test.js:    mockTimeZone(+6);
./addons/web/static/tests/views/list/list_view.test.js:        // to mock the behavihour of some fields e.g stage_id on the sale order.
./addons/web/static/tests/views/list/list_view.test.js:    mockService("action", {
./addons/web/static/tests/views/list/list_view.test.js:test(`list view with optional fields rendering and local storage mock`, async () => {
./addons/web/static/tests/views/list/list_view.test.js:    mockDate("1997-01-09 12:00:00");
./addons/web/static/tests/views/list/list_view.test.js:    mockDate("1997-01-09 12:00:00");
./addons/web/static/tests/views/list/list_view.test.js:    mockService("notification", {
./addons/web/static/tests/views/list/list_view.test.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/list/list_view.test.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/list/list_view.test.js:    mockTimeZone(0);
./addons/web/static/tests/views/list/list_view.test.js:    mockService("notification", {
./addons/web/static/tests/views/view_button_hook.test.js:import { contains, mockService, mountWithCleanup } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/views/view_button_hook.test.js:    mockService("action", {
./addons/web/static/tests/views/view_button_hook.test.js:    mockService("action", {
./addons/web/static/tests/views/widgets/notification_alert.test.js:import { mockPermission } from "@odoo/hoot-mock";
./addons/web/static/tests/views/widgets/notification_alert.test.js:    mockPermission("notifications", "denied");
./addons/web/static/tests/views/widgets/notification_alert.test.js:    mockPermission("notifications", "granted");
./addons/web/static/tests/views/widgets/notification_alert.test.js:    mockPermission("notifications", "default");
./addons/web/static/tests/views/widgets/attach_document.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/widgets/attach_document.test.js:    mockService,
./addons/web/static/tests/views/widgets/attach_document.test.js:    mockService("http", {
./addons/web/static/tests/views/widgets/attach_document.test.js:    mockService("http", {
./addons/web/static/tests/views/widgets/signature.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/text_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/image_field.test.js:import { animationFrame, runAllTimers, mockDate } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/image_field.test.js:    mockDate("2017-02-06 10:00:00");
./addons/web/static/tests/views/fields/selection_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/numeric_fields.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/many2one_barcode_field.test.js:import { mockUserAgent, mockVibrate, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/many2one_barcode_field.test.js:    mockUserAgent("android");
./addons/web/static/tests/views/fields/many2one_barcode_field.test.js:    mockVibrate((pattern) => expect.step(`vibrate:${pattern}`));
./addons/web/static/tests/views/fields/many2one_barcode_field.test.js:    // The product selected (mock) for the barcode scanner
./addons/web/static/tests/views/fields/many2one_barcode_field.test.js:    // The product selected (mock) for the barcode scanner
./addons/web/static/tests/views/fields/many2one_barcode_field.test.js:    // The product selected (mock) for the barcode scanner
./addons/web/static/tests/views/fields/many2one_barcode_field.test.js:    // The product selected (mock) for the barcode scanner
./addons/web/static/tests/views/fields/html_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/char_field.test.js:import { Deferred, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/boolean_icon_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/many2many_tags_field.test.js:import { Deferred, animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/many2many_tags_field.test.js:    mockService,
./addons/web/static/tests/views/fields/many2many_tags_field.test.js:    mockService("notification", {
./addons/web/static/tests/views/fields/reference_field.test.js:import { animationFrame, Deferred, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/reference_field.test.js:    mockService,
./addons/web/static/tests/views/fields/reference_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/many2many_field.test.js:import { Deferred, animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/many2many_field.test.js:    MockServer,
./addons/web/static/tests/views/fields/many2many_field.test.js:        const [record] = MockServer.env["partner.type"].search_read([["name", "=", "A new type"]]);
./addons/web/static/tests/views/fields/copy_clipboard_field.test.js:    mockService,
./addons/web/static/tests/views/fields/copy_clipboard_field.test.js:    mockService("popover", {
./addons/web/static/tests/views/fields/datetime_field.test.js:import { animationFrame, mockTimeZone } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/datetime_field.test.js:    mockTimeZone(+2); // UTC+2
./addons/web/static/tests/views/fields/datetime_field.test.js:    mockTimeZone(+2);
./addons/web/static/tests/views/fields/datetime_field.test.js:    mockTimeZone(0);
./addons/web/static/tests/views/fields/datetime_field.test.js:    mockTimeZone(+2);
./addons/web/static/tests/views/fields/datetime_field.test.js:    mockTimeZone(+2);
./addons/web/static/tests/views/fields/datetime_field.test.js:    mockTimeZone(+2);
./addons/web/static/tests/views/fields/datetime_field.test.js:    mockTimeZone(+2);
./addons/web/static/tests/views/fields/datetime_field.test.js:    mockTimeZone(+2);
./addons/web/static/tests/views/fields/datetime_field.test.js:    mockTimeZone(+2);
./addons/web/static/tests/views/fields/datetime_field.test.js:    mockTimeZone(+2);
./addons/web/static/tests/views/fields/datetime_field.test.js:    mockTimeZone(-2); // UTC-2
./addons/web/static/tests/views/fields/datetime_field.test.js:    mockTimeZone(-2); // UTC-2
./addons/web/static/tests/views/fields/binary_field.test.js:import { Deferred, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/statusbar_field.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/statusbar_field.test.js:    mockService,
./addons/web/static/tests/views/fields/statusbar_field.test.js:    mockService("ui", (env) => {
./addons/web/static/tests/views/fields/statusbar_field.test.js:    mockService("notification", {
./addons/web/static/tests/views/fields/journal_dashboard_graph_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/signature_field.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/properties_field.test.js:import { animationFrame, mockDate, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/properties_field.test.js:    // mock random function to have predictable auto generated properties names
./addons/web/static/tests/views/fields/properties_field.test.js:    mockDate("2022-01-03T08:00:00");
./addons/web/static/tests/views/fields/integer_field.test.js:    // `localization > grouping` required for this test is [3, 0], which is the default in mock server
./addons/web/static/tests/views/fields/integer_field.test.js:    // `localization > grouping` required for this test is [3, 0], which is the default in mock server
./addons/web/static/tests/views/fields/integer_field.test.js:    // `localization > grouping` required for this test is [3, 0], which is the default in mock server
./addons/web/static/tests/views/fields/integer_field.test.js:    // `localization > grouping` required for this test is [3, 0], which is the default in mock server
./addons/web/static/tests/views/fields/integer_field.test.js:    // `localization > grouping` required for this test is [3, 0], which is the default in mock server
./addons/web/static/tests/views/fields/integer_field.test.js:    // `localization > grouping` required for this test is [3, 0], which is the default in mock server
./addons/web/static/tests/views/fields/integer_field.test.js:    // `localization > grouping` required for this test is [3, 0], which is the default in mock server
./addons/web/static/tests/views/fields/ace_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/monetary_field.test.js:import { Deferred, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/dynamic_placeholder.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/many2many_tags_avatar_field.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/one2many_field.test.js:import { Deferred, animationFrame, mockTimeZone, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/one2many_field.test.js:    mockService,
./addons/web/static/tests/views/fields/one2many_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/one2many_field.test.js:    mockTimeZone(+2);
./addons/web/static/tests/views/fields/one2many_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/one2many_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/one2many_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/one2many_field.test.js:    mockService("notification", {
./addons/web/static/tests/views/fields/one2many_field.test.js:        // done, but yet it is. Actually, it wasn't before because mockOnChange
./addons/web/static/tests/views/fields/one2many_field.test.js:        // this value was ignored. Now that mockOnChange properly works, the value
./addons/web/static/tests/views/fields/one2many_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/one2many_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/one2many_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/one2many_field.test.js:    mockService("notification", {
./addons/web/static/tests/views/fields/one2many_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/boolean_toggle_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/daterange_field.test.js:import { animationFrame, Deferred, mockDate, mockTimeZone } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/daterange_field.test.js:    mockTimeZone(+5.5);
./addons/web/static/tests/views/fields/daterange_field.test.js:    mockDate("22014-08-14 12:34:56", +0);
./addons/web/static/tests/views/fields/daterange_field.test.js:    mockDate("2014-08-14 12:34:56", +0);
./addons/web/static/tests/views/fields/daterange_field.test.js:    mockDate("2014-08-14 12:34:56", +0);
./addons/web/static/tests/views/fields/daterange_field.test.js:    mockDate("2014-08-14 12:34:56", +0);
./addons/web/static/tests/views/fields/daterange_field.test.js:    mockDate("2014-08-14 12:34:56", +0);
./addons/web/static/tests/views/fields/daterange_field.test.js:    mockDate("2014-08-14 12:34:56", +0);
./addons/web/static/tests/views/fields/daterange_field.test.js:    mockTimeZone(+2);
./addons/web/static/tests/views/fields/phone_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/image_url_field.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/state_selection_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/parsers.test.js:import { makeMockEnv, patchWithCleanup } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/views/fields/parsers.test.js:beforeEach(makeMockEnv);
./addons/web/static/tests/views/fields/many2one_avatar_field.test.js:import { runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/many2one_field.test.js:import { Deferred, animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/many2one_field.test.js:    mockService,
./addons/web/static/tests/views/fields/many2one_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/many2one_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/many2one_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/priority_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/handle_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/label_selection_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/radio_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/iframe_wrapper_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/date_field.test.js:import { animationFrame, mockDate, mockTimeZone } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/date_field.test.js:    mockTimeZone(2); // should be ignored by date fields
./addons/web/static/tests/views/fields/date_field.test.js:    mockTimeZone(-2); // should be ignored by date fields
./addons/web/static/tests/views/fields/date_field.test.js:    mockTimeZone(2);
./addons/web/static/tests/views/fields/date_field.test.js:    mockDate({ year: 2021, month: 2, day: 15 });
./addons/web/static/tests/views/fields/progress_bar_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/boolean_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/many2many_binary_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/many2many_binary_field.test.js:    mockService,
./addons/web/static/tests/views/fields/many2many_binary_field.test.js:    mockService("http", () => ({
./addons/web/static/tests/views/fields/many2many_binary_field.test.js:    mockService("http", () => ({
./addons/web/static/tests/views/fields/many2many_binary_field.test.js:    mockService("http", () => ({
./addons/web/static/tests/views/fields/many2many_checkboxes_field.test.js:import { runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/many2one_reference_field.test.js:import { runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/many2one_reference_field.test.js:    mockService,
./addons/web/static/tests/views/fields/many2one_reference_field.test.js:    mockService("action", {
./addons/web/static/tests/views/fields/remaining_days_field.test.js:import { animationFrame, mockDate } from "@odoo/hoot-mock";
./addons/web/static/tests/views/fields/remaining_days_field.test.js:    mockDate("2017-10-08 15:35:11");
./addons/web/static/tests/views/fields/remaining_days_field.test.js:    mockDate("2017-10-08 15:35:11"); // October 8 2017, 15:35:11
./addons/web/static/tests/views/fields/remaining_days_field.test.js:    mockDate("2017-10-08 15:35:11"); // October 8 2017, 15:35:11
./addons/web/static/tests/views/fields/remaining_days_field.test.js:    mockDate("2017-10-08 15:35:11"); // October 8 2017, 15:35:11
./addons/web/static/tests/views/fields/remaining_days_field.test.js:    mockDate("2017-10-08 15:35:11"); // October 8 2017, 15:35:11
./addons/web/static/tests/views/fields/remaining_days_field.test.js:    mockDate("2017-10-08 15:35:11"); // October 8 2017, 15:35:11
./addons/web/static/tests/views/fields/remaining_days_field.test.js:    mockDate("2017-10-08 15:35:11", 0); // October 8 2017, 15:35:11
./addons/web/static/tests/views/fields/remaining_days_field.test.js:    mockDate("2017-10-08 15:35:11", +6); // October 8 2017, 15:35:11, UTC+6
./addons/web/static/tests/views/fields/remaining_days_field.test.js:    mockDate("2017-10-08 15:35:11", -6); // October 8 2017, 15:35:11, UTC-6
./addons/web/static/tests/views/fields/remaining_days_field.test.js:    mockDate("2017-10-08 15:35:11", -8); // October 8 2017, 15:35:11, UTC-8
./addons/web/static/tests/views/fields/remaining_days_field.test.js:    mockDate("2017-10-08 15:35:11");
./addons/web/static/tests/views/form/auto_save.test.js:import { animationFrame, Deferred, mockSendBeacon } from "@odoo/hoot-mock";
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon((_, blob) => {
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon(() => {
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon(() => expect.step("sendBeacon"));
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon(() => expect.step("sendBeacon"));
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon(() => {
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon(() => expect.step("sendBeacon"));
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon(() => expect.step("sendBeacon"));
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon((_, blob) => {
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon((_, blob) => {
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon((_, blob) => {
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon((_, blob) => {
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon(() => expect.step("sendBeacon"));
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon(() => expect.step("sendBeacon"));
./addons/web/static/tests/views/form/auto_save.test.js:    mockSendBeacon(() => expect.step("sendBeacon"));
./addons/web/static/tests/views/form/form_view.test.js:    mockTimeZone,
./addons/web/static/tests/views/form/form_view.test.js:    mockTouch,
./addons/web/static/tests/views/form/form_view.test.js:} from "@odoo/hoot-mock";
./addons/web/static/tests/views/form/form_view.test.js:    mockService,
./addons/web/static/tests/views/form/form_view.test.js:    mockService("ui", (env) => {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("ui", (env) => {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("ui", (env) => {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockTimeZone(2);
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("ui", (env) => {
./addons/web/static/tests/views/form/form_view.test.js:    mockTouch(true);
./addons/web/static/tests/views/form/form_view.test.js:    after(() => mockTouch(false));
./addons/web/static/tests/views/form/form_view.test.js:    mockService("ui", (env) => {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:test(`form view with inline list view with optional fields and local storage mock`, async () => {
./addons/web/static/tests/views/form/form_view.test.js:test(`form view with list_view_ref with optional fields and local storage mock`, async () => {
./addons/web/static/tests/views/form/form_view.test.js:        // the mock server doesn't replicate fully this behavior.
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("notification", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("notification", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("notification", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("http", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("action", {
./addons/web/static/tests/views/form/form_view.test.js:    mockService("notification", {
./addons/web/static/tests/views/view_components/view_scale_selector.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/pivot_view.test.js:import { Deferred, animationFrame, mockDate } from "@odoo/hoot-mock";
./addons/web/static/tests/views/pivot_view.test.js:    mockService,
./addons/web/static/tests/views/pivot_view.test.js:    mockService("action", {
./addons/web/static/tests/views/pivot_view.test.js:    mockService("action", {
./addons/web/static/tests/views/pivot_view.test.js:    mockDate("2016-12-20T1:00:00");
./addons/web/static/tests/views/pivot_view.test.js:    mockService("action", {
./addons/web/static/tests/views/pivot_view.test.js:    mockDate("2016-12-20T1:00:00");
./addons/web/static/tests/views/pivot_view.test.js:    mockService("action", {
./addons/web/static/tests/views/pivot_view.test.js:    mockDate("2016-12-20T1:00:00");
./addons/web/static/tests/views/pivot_view.test.js:    mockService("action", {
./addons/web/static/tests/views/view_service.test.js:    makeMockEnv,
./addons/web/static/tests/views/view_service.test.js:    await makeMockEnv();
./addons/web/static/tests/views/view_service.test.js:    await makeMockEnv();
./addons/web/static/tests/views/view_service.test.js:    await makeMockEnv();
./addons/web/static/tests/views/view_service.test.js:    await makeMockEnv();
./addons/web/static/tests/views/calendar/calendar_year_renderer.test.js:import { mockTimeZone } from "@odoo/hoot-mock";
./addons/web/static/tests/views/calendar/calendar_year_renderer.test.js:import { mockService, mountWithCleanup, preloadBundle } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/views/calendar/calendar_year_renderer.test.js:    mockService("popover", () => ({
./addons/web/static/tests/views/calendar/calendar_year_renderer.test.js:    mockTimeZone(-9);
./addons/web/static/tests/views/calendar/calendar_common_renderer.test.js:import { runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/calendar/calendar_common_renderer.test.js:import { mockService, mountWithCleanup, preloadBundle } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/views/calendar/calendar_common_renderer.test.js:    mockService("popover", () => ({
./addons/web/static/tests/views/calendar/calendar_filter_panel.test.js:import { runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/views/calendar/calendar_test_helpers.js:import { advanceFrame, advanceTime, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/views/calendar/calendar_test_helpers.js:import { contains, getMockEnv, swipeLeft, swipeRight } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/views/calendar/calendar_test_helpers.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/calendar/calendar_test_helpers.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/calendar/calendar_test_helpers.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/calendar/calendar_test_helpers.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/calendar/calendar_test_helpers.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/calendar/calendar_test_helpers.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/views/calendar/calendar_date_picker.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/web/static/tests/views/calendar/calendar_date_picker.test.js:    mockDate("2021-08-14T08:00:00");
./addons/web/static/tests/views/calendar/calendar_date_picker.test.js:    mockDate("2021-07-04T08:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate,
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone,
./addons/web/static/tests/views/calendar/calendar_view.test.js:} from "@odoo/hoot-mock";
./addons/web/static/tests/views/calendar/calendar_view.test.js:    MockServer,
./addons/web/static/tests/views/calendar/calendar_view.test.js:    getMockEnv,
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService,
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2016-12-12T08:00:00", 1);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    const container = getMockEnv().isSmall ? ".modal" : ".o_cw_popover";
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService("dialog", {
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(2);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(-7);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService("action", {
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(2);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(2);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(11);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(2);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(-11);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(-11);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(2);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService("action", {
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(2);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService("action", {
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(2);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(2);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService("action", {
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(-4);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService("action", {
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(-4);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(-4);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(-4);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService("action", {
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService("action", {
./addons/web/static/tests/views/calendar/calendar_view.test.js:    expect(MockServer.env["filter.partner"].read([2])[0].is_checked).toBe(true);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    expect(MockServer.env["filter.partner"].read([2])[0].is_checked).toBe(false);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    expect(MockServer.env["filter.partner"].read([2])[0].is_checked).toBe(false);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    expect(MockServer.env["filter.partner"].read([2])[0].is_checked).toBe(true);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    expect(MockServer.env["filter.partner"].read([2])[0].is_checked).toBe(false);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    expect(MockServer.env["filter.partner"].read([2])[0].is_checked).toBe(false);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(-8);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(40);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(-40);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(-40);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(2);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockTimeZone(2);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService("action", {
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService("action", {
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService("action", {
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2019-09-12 08:00:00", -7);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2019-09-12 08:00:00", -7);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2019-09-15 08:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2019-09-15 08:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2019-09-15 08:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2019-09-15 08:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2019-09-12 08:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2019-09-12 08:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2019-09-15 08:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2019-09-15 08:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    const popover = getMockEnv().isSmall ? ".modal" : ".o_cw_popover";
./addons/web/static/tests/views/calendar/calendar_view.test.js:    const closeButton = getMockEnv().isSmall ? ".oi-arrow-left" : ".o_cw_popover_close";
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2020-03-12 08:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    const popover = getMockEnv().isSmall ? ".modal" : ".o_cw_popover";
./addons/web/static/tests/views/calendar/calendar_view.test.js:    const popover = getMockEnv().isSmall ? ".modal" : ".o_cw_popover";
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockService("dialog", {
./addons/web/static/tests/views/calendar/calendar_view.test.js:    const popover = getMockEnv().isSmall ? ".modal" : ".o_popover";
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2016-12-14 09:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2015-12-26 09:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2023-12-14 09:00:00");
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2016-12-12T01:00:00", 1);
./addons/web/static/tests/views/calendar/calendar_view.test.js:    mockDate("2016-12-12T20:00:00", 1);
./addons/web/static/tests/views/graph/graph_view.test.js:import { Deferred, animationFrame, mockDate } from "@odoo/hoot-mock";
./addons/web/static/tests/views/graph/graph_view.test.js:    makeMockServer,
./addons/web/static/tests/views/graph/graph_view.test.js:    mockService,
./addons/web/static/tests/views/graph/graph_view.test.js:    const { env } = await makeMockServer();
./addons/web/static/tests/views/graph/graph_view.test.js:    const { env } = await makeMockServer();
./addons/web/static/tests/views/graph/graph_view.test.js:    const { env } = await makeMockServer();
./addons/web/static/tests/views/graph/graph_view.test.js:    mockService("action", {
./addons/web/static/tests/views/graph/graph_view.test.js:    mockService("action", {
./addons/web/static/tests/views/graph/graph_view.test.js:    mockService("action", {
./addons/web/static/tests/views/graph/graph_view.test.js:    mockService("action", {
./addons/web/static/tests/views/graph/graph_view.test.js:    mockDate("2023-06-15 08:00:00");
./addons/web/static/tests/env.test.js:import { Deferred, tick } from "@odoo/hoot-mock";
./addons/web/static/tests/env.test.js:import { clearRegistry, makeMockEnv, patchTranslations } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/env.test.js:    const env = await makeMockEnv();
./addons/web/static/tests/env.test.js:    await expect(makeMockEnv()).rejects.toThrow("boom");
./addons/web/static/tests/env.test.js:    await expect(makeMockEnv()).rejects.toThrow("boom");
./addons/web/static/tests/env.test.js:    const envCreationPromise = makeMockEnv();
./addons/web/static/tests/env.test.js:    await makeMockEnv();
./addons/web/static/tests/env.test.js:    await makeMockEnv();
./addons/web/static/tests/env.test.js:    const envCreationPromise = makeMockEnv();
./addons/web/static/tests/env.test.js:    const envCreationPromise = makeMockEnv();
./addons/web/static/tests/env.test.js:    const envCreationPromise = makeMockEnv();
./addons/web/static/tests/web_test_helpers.js:import { mockFetch } from "@odoo/hoot-mock";
./addons/web/static/tests/web_test_helpers.js:import * as _fields from "./_framework/mock_server/mock_fields";
./addons/web/static/tests/web_test_helpers.js:import * as _models from "./_framework/mock_server/mock_model";
./addons/web/static/tests/web_test_helpers.js:import { IrAttachment } from "./_framework/mock_server/mock_models/ir_attachment";
./addons/web/static/tests/web_test_helpers.js:import { IrModel } from "./_framework/mock_server/mock_models/ir_model";
./addons/web/static/tests/web_test_helpers.js:import { IrModelAccess } from "./_framework/mock_server/mock_models/ir_model_access";
./addons/web/static/tests/web_test_helpers.js:import { IrModelFields } from "./_framework/mock_server/mock_models/ir_model_fields";
./addons/web/static/tests/web_test_helpers.js:import { IrModuleCategory } from "./_framework/mock_server/mock_models/ir_module_category";
./addons/web/static/tests/web_test_helpers.js:import { IrRule } from "./_framework/mock_server/mock_models/ir_rule";
./addons/web/static/tests/web_test_helpers.js:import { IrUiView } from "./_framework/mock_server/mock_models/ir_ui_view";
./addons/web/static/tests/web_test_helpers.js:import { ResCompany } from "./_framework/mock_server/mock_models/res_company";
./addons/web/static/tests/web_test_helpers.js:import { ResCountry } from "./_framework/mock_server/mock_models/res_country";
./addons/web/static/tests/web_test_helpers.js:import { ResCurrency } from "./_framework/mock_server/mock_models/res_currency";
./addons/web/static/tests/web_test_helpers.js:import { ResGroups } from "./_framework/mock_server/mock_models/res_groups";
./addons/web/static/tests/web_test_helpers.js:import { ResPartner } from "./_framework/mock_server/mock_models/res_partner";
./addons/web/static/tests/web_test_helpers.js:import { ResUsers } from "./_framework/mock_server/mock_models/res_users";
./addons/web/static/tests/web_test_helpers.js:import { defineModels } from "./_framework/mock_server/mock_server";
./addons/web/static/tests/web_test_helpers.js: * @typedef {import("./_framework/mock_server/mock_fields").FieldType} FieldType
./addons/web/static/tests/web_test_helpers.js: * @typedef {import("./_framework/mock_server/mock_model").ModelRecord} ModelRecord
./addons/web/static/tests/web_test_helpers.js: * @typedef {import("./_framework/mock_server/mock_server").KwArgs<T>} KwArgs
./addons/web/static/tests/web_test_helpers.js: * @typedef {import("./_framework/mock_server/mock_server").RouteCallback<T>} RouteCallback
./addons/web/static/tests/web_test_helpers.js:    getMockEnv,
./addons/web/static/tests/web_test_helpers.js:    makeDialogMockEnv,
./addons/web/static/tests/web_test_helpers.js:    makeMockEnv,
./addons/web/static/tests/web_test_helpers.js:    mockService,
./addons/web/static/tests/web_test_helpers.js:export { Command } from "./_framework/mock_server/mock_model";
./addons/web/static/tests/web_test_helpers.js:    makeMockServer,
./addons/web/static/tests/web_test_helpers.js:    MockServer,
./addons/web/static/tests/web_test_helpers.js:} from "./_framework/mock_server/mock_server";
./addons/web/static/tests/web_test_helpers.js:    MockServerError,
./addons/web/static/tests/web_test_helpers.js:} from "./_framework/mock_server/mock_server_utils";
./addons/web/static/tests/web_test_helpers.js:export { serverState } from "./_framework/mock_server_state.hoot";
./addons/web/static/tests/web_test_helpers.js:        mockFetch(globalCachedFetch);
./addons/web/static/tests/web_test_helpers.js:        mockFetch(null);
./addons/web/static/tests/_framework/mock_user.hoot.js:import { onServerStateChange } from "./mock_server_state.hoot";
./addons/web/static/tests/_framework/mock_user.hoot.js:export function mockUserFactory(name, { fn }) {
./addons/web/static/tests/_framework/mock_server/mock_server_utils.js: * @typedef {import("./mock_server").KwArgs<T>} KwArgs
./addons/web/static/tests/_framework/mock_server/mock_server_utils.js:        throw new MockServerError("more positional arguments than there are given argument names");
./addons/web/static/tests/_framework/mock_server/mock_server_utils.js: * @param {import("./mock_model").ModelRecord} record
./addons/web/static/tests/_framework/mock_server/mock_server_utils.js:export class MockServerError extends Error {
./addons/web/static/tests/_framework/mock_server/mock_server_utils.js:    name = "MockServerError";
./addons/web/static/tests/_framework/mock_server/mock_server.js:import { mockFetch, mockWebSocket } from "@odoo/hoot-mock";
./addons/web/static/tests/_framework/mock_server/mock_server.js:import { serverState } from "../mock_server_state.hoot";
./addons/web/static/tests/_framework/mock_server/mock_server.js:import { DEFAULT_FIELD_VALUES, FIELD_SYMBOL } from "./mock_fields";
./addons/web/static/tests/_framework/mock_server/mock_server.js:    MockServerError,
./addons/web/static/tests/_framework/mock_server/mock_server.js:} from "./mock_server_utils";
./addons/web/static/tests/_framework/mock_server/mock_server.js: * @typedef {import("./mock_fields").FieldDefinition} FieldDefinition
./addons/web/static/tests/_framework/mock_server/mock_server.js: * @typedef {MockServerBaseEnvironment & { [modelName: string]: Model }} MockServerEnvironment
./addons/web/static/tests/_framework/mock_server/mock_server.js: * @typedef {import("./mock_model").Model} Model
./addons/web/static/tests/_framework/mock_server/mock_server.js: * @typedef {import("./mock_model").ModelConstructor} ModelConstructor
./addons/web/static/tests/_framework/mock_server/mock_server.js: *  actions?: Partial<MockServer["actions"]>;
./addons/web/static/tests/_framework/mock_server/mock_server.js: *  lang_parameters?: Partial<MockServer["lang_parameters"]>;
./addons/web/static/tests/_framework/mock_server/mock_server.js: *  modules?: Partial<MockServer["modules"]>;
./addons/web/static/tests/_framework/mock_server/mock_server.js: *  multi_lang?: import("../mock_server_state.hoot").ServerState["multiLang"];
./addons/web/static/tests/_framework/mock_server/mock_server.js: *  routes?: Parameters<MockServer["_onRpc"]>;
./addons/web/static/tests/_framework/mock_server/mock_server.js: * @typedef {(this: MockServer, request: Request, params: Record<T, string>) => any} RouteCallback
./addons/web/static/tests/_framework/mock_server/mock_server.js: * @param {import("./mock_model").ModelRecord} user
./addons/web/static/tests/_framework/mock_server/mock_server.js:    const { env } = MockServer;
./addons/web/static/tests/_framework/mock_server/mock_server.js:        throw new MockServerError("Unauthorized");
./addons/web/static/tests/_framework/mock_server/mock_server.js:const getCurrentMockServer = () => {
./addons/web/static/tests/_framework/mock_server/mock_server.js:    if (!mockServers.has(test.run)) {
./addons/web/static/tests/_framework/mock_server/mock_server.js:        mockServers.set(test.run, new MockServer());
./addons/web/static/tests/_framework/mock_server/mock_server.js:    return mockServers.get(test.run);
./addons/web/static/tests/_framework/mock_server/mock_server.js:    return new MockServerError(message);
./addons/web/static/tests/_framework/mock_server/mock_server.js:class MockServerBaseEnvironment {
./addons/web/static/tests/_framework/mock_server/mock_server.js:        return MockServer.env["res.company"].read(serverState.companies.map((c) => c.id));
./addons/web/static/tests/_framework/mock_server/mock_server.js:        return MockServer.env["res.users"].browse(serverState.userId)[0];
./addons/web/static/tests/_framework/mock_server/mock_server.js:const mockRpcRegistry = registry.category("mock_rpc");
./addons/web/static/tests/_framework/mock_server/mock_server.js:/** @type {WeakMap<() => any, MockServer>} */
./addons/web/static/tests/_framework/mock_server/mock_server.js:const mockServers = new WeakMap();
./addons/web/static/tests/_framework/mock_server/mock_server.js:export class MockServer {
./addons/web/static/tests/_framework/mock_server/mock_server.js:    /** @type {MockServer | null} */
./addons/web/static/tests/_framework/mock_server/mock_server.js:        const mockServer = getCurrentMockServer();
./addons/web/static/tests/_framework/mock_server/mock_server.js:        return mockServer?.started ? mockServer : null;
./addons/web/static/tests/_framework/mock_server/mock_server.js:    /** @type {import("@odoo/hoot-mock").ServerWebSocket[]} */
./addons/web/static/tests/_framework/mock_server/mock_server.js:        mockFetch((input, init) => this._handle(input, init));
./addons/web/static/tests/_framework/mock_server/mock_server.js:        mockWebSocket((ws) => this.websockets.push(ws));
./addons/web/static/tests/_framework/mock_server/mock_server.js:            throw new MockServerError("MockServer has already been started");
./addons/web/static/tests/_framework/mock_server/mock_server.js:        throw new MockServerError(`unimplemented ORM method: ${modelName}.${method}`);
./addons/web/static/tests/_framework/mock_server/mock_server.js:            throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_server.js:                        throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_server.js:                    throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_server.js:                    throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_server.js:                throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_server.js:            throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_server.js:            throw new MockServerError(`unimplemented server route: ${route}`);
./addons/web/static/tests/_framework/mock_server/mock_server.js:        // Register models on mock server instance
./addons/web/static/tests/_framework/mock_server/mock_server.js:                    throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_server.js:                throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_server.js:                            throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_server.js:     * @returns {MockServerEnvironment}
./addons/web/static/tests/_framework/mock_server/mock_server.js:        const serverEnv = new MockServerBaseEnvironment();
./addons/web/static/tests/_framework/mock_server/mock_server.js:        // No mock here: we want to fetch the actual bundle (and cache it between suites),
./addons/web/static/tests/_framework/mock_server/mock_server.js: * Authenticates a user on the mock server given its login and password.
./addons/web/static/tests/_framework/mock_server/mock_server.js:    const { env } = MockServer;
./addons/web/static/tests/_framework/mock_server/mock_server.js: * Registers a list of model classes on the current/future {@link MockServer} instance.
./addons/web/static/tests/_framework/mock_server/mock_server.js:        MockServer.current?.configure(params);
./addons/web/static/tests/_framework/mock_server/mock_server.js:    const { env } = MockServer;
./addons/web/static/tests/_framework/mock_server/mock_server.js: * Shortcut function to create and start a {@link MockServer}.
./addons/web/static/tests/_framework/mock_server/mock_server.js:export async function makeMockServer() {
./addons/web/static/tests/_framework/mock_server/mock_server.js:    const mockServer = getCurrentMockServer();
./addons/web/static/tests/_framework/mock_server/mock_server.js:    // Add routes from "mock_rpc" registry
./addons/web/static/tests/_framework/mock_server/mock_server.js:    for (const [route, callback] of mockRpcRegistry.getEntries()) {
./addons/web/static/tests/_framework/mock_server/mock_server.js:            mockServer._onRpc(route, callback);
./addons/web/static/tests/_framework/mock_server/mock_server.js:    mockServer.configure(getCurrentParams());
./addons/web/static/tests/_framework/mock_server/mock_server.js:    registerDebugInfo(mockServer);
./addons/web/static/tests/_framework/mock_server/mock_server.js:    return mockServer.start();
./addons/web/static/tests/_framework/mock_server/mock_server.js: * Registers an RPC handler on the current/future {@link MockServer} instance.
./addons/web/static/tests/_framework/mock_server/mock_server.js: * @type {MockServer["_onRpc"]}
./addons/web/static/tests/_framework/mock_server/mock_server.js: * calls expect.step for all network calls. Because of how the mock server
./addons/web/static/tests/_framework/mock_server/mock_server.js: * works, you need to call this *after* all your custom mockRPCs that return
./addons/web/static/tests/_framework/mock_server/mock_server.js: * something, otherwise the mock server will not call this function's handler.
./addons/web/static/tests/_framework/mock_server/mock_server.js:    const { env } = MockServer;
./addons/web/static/tests/_framework/mock_server/mock_fields.js:import { MockServerError } from "./mock_server_utils";
./addons/web/static/tests/_framework/mock_server/mock_fields.js:                    throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_models/ir_model.js:import { ServerModel } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_models/ir_ui_view.js:import { ServerModel } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_models/ir_module_category.js:import { ServerModel } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_models/res_company.js:import { serverState } from "../../mock_server_state.hoot";
./addons/web/static/tests/_framework/mock_server/mock_models/res_company.js:import * as fields from "../mock_fields";
./addons/web/static/tests/_framework/mock_server/mock_models/res_company.js:import { ServerModel } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_models/@types/mock_models.d.ts:declare module "mock_models" {
./addons/web/static/tests/_framework/mock_server/mock_models/@types/mock_models.d.ts:    import { IrModelFields as IrModelFields2 } from "@web/../tests/_framework/mock_server/mock_models/ir_model_fields";
./addons/web/static/tests/_framework/mock_server/mock_models/@types/mock_models.d.ts:    import { IrModuleCategory } from "./_framework/mock_server/mock_models/ir_module_category";
./addons/web/static/tests/_framework/mock_server/mock_models/@types/mock_models.d.ts:    import { ResGroups as ResGroups2 } from "@web/../tests/_framework/mock_server/mock_models/res_groups";
./addons/web/static/tests/_framework/mock_server/mock_models/ir_rule.js:import { Model } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_models/res_groups.js:import { serverState } from "../../mock_server_state.hoot";
./addons/web/static/tests/_framework/mock_server/mock_models/res_groups.js:import { ServerModel } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_models/res_users.js:import { serverState } from "../../mock_server_state.hoot";
./addons/web/static/tests/_framework/mock_server/mock_models/res_users.js:import { ServerModel } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_models/res_partner.js:import { serverState } from "../../mock_server_state.hoot";
./addons/web/static/tests/_framework/mock_server/mock_models/res_partner.js:import { ServerModel } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_models/ir_model_fields.js:import { ServerModel } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_models/res_currency.js:import { serverState } from "../../mock_server_state.hoot";
./addons/web/static/tests/_framework/mock_server/mock_models/res_currency.js:import { ServerModel } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_models/ir_model_access.js:import { Model } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_models/res_country.js:import { ServerModel } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_models/ir_attachment.js:import { ServerModel } from "../mock_model";
./addons/web/static/tests/_framework/mock_server/mock_model.js:import * as fields from "./mock_fields";
./addons/web/static/tests/_framework/mock_server/mock_model.js:import { MockServer } from "./mock_server";
./addons/web/static/tests/_framework/mock_server/mock_model.js:    MockServerError,
./addons/web/static/tests/_framework/mock_server/mock_model.js:} from "./mock_server_utils";
./addons/web/static/tests/_framework/mock_server/mock_model.js: * @typedef {import("./mock_fields").FieldDefinition} FieldDefinition
./addons/web/static/tests/_framework/mock_server/mock_model.js: * @typedef {import("./mock_fields").FieldType} FieldType
./addons/web/static/tests/_framework/mock_server/mock_model.js: * @typedef {import("./mock_fields").GroupOperator} GroupOperator
./addons/web/static/tests/_framework/mock_server/mock_model.js:            record.create_uid = MockServer.env.uid;
./addons/web/static/tests/_framework/mock_server/mock_model.js:    return new MockServerError(message);
./addons/web/static/tests/_framework/mock_server/mock_model.js:        throw new MockServer(`Granularity should be always explicit for ${groupByField}`);
./addons/web/static/tests/_framework/mock_server/mock_model.js:    return comodel && MockServer.env[comodel];
./addons/web/static/tests/_framework/mock_server/mock_model.js:            const field = MockServer.env[modelName]._fields[fname];
./addons/web/static/tests/_framework/mock_server/mock_model.js:                throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_model.js:            throw new MockServerError("cannot group: 'groupby' can only target many2one fields");
./addons/web/static/tests/_framework/mock_server/mock_model.js:    return new MockServerError(message);
./addons/web/static/tests/_framework/mock_server/mock_model.js: * Local model used by the {@link MockServer} to store the definition of a model.
./addons/web/static/tests/_framework/mock_server/mock_model.js: * to register it on the current/future {@link MockServer} instance.
./addons/web/static/tests/_framework/mock_server/mock_model.js:        return MockServer.current.env;
./addons/web/static/tests/_framework/mock_server/mock_model.js:                throw new MockServerError(`cannot create a record with a given ID value`);
./addons/web/static/tests/_framework/mock_server/mock_model.js:                    throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_model.js:        const binding_actions = MockServer.current.actions.filter(
./addons/web/static/tests/_framework/mock_server/mock_model.js:            models[modelName] = { fields: MockServer.env[modelName].fields_get(value.fields) };
./addons/web/static/tests/_framework/mock_server/mock_model.js:                    throw new MockServerError(`Aggregate "${func}" not implemented in MockServer`);
./addons/web/static/tests/_framework/mock_server/mock_model.js:                throw new MockServerError(`invalid aggregation function "${func}"`);
./addons/web/static/tests/_framework/mock_server/mock_model.js:                throw new MockServerError(`invalid field in "${fspec}"`);
./addons/web/static/tests/_framework/mock_server/mock_model.js:            throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_model.js:            throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_model.js:        for (const model of Object.values(MockServer.current.models)) {
./addons/web/static/tests/_framework/mock_server/mock_model.js:                    throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_model.js:                throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_model.js:                        throw new MockServerError(
./addons/web/static/tests/_framework/mock_server/mock_model.js:                            )}" is not supported by the MockServer on field "${fieldName}" in model "${
./addons/web/static/tests/_framework/mock_server/mock_model.js:                        throw new MockServerError(
./addons/web/static/tests/_framework/search_test_helpers.js:import { getMockEnv, makeMockEnv } from "./env_test_helpers";
./addons/web/static/tests/_framework/search_test_helpers.js:        getMockEnv().isSmall &&
./addons/web/static/tests/_framework/search_test_helpers.js:    const env = await makeMockEnv({ config: fullConfig });
./addons/web/static/tests/_framework/search_test_helpers.js: * @param {import("./mock_server/mock_server").ViewType} viewType
./addons/web/static/tests/_framework/search_test_helpers.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/_framework/module_set.hoot.js:import { watchKeys, watchListeners } from "@odoo/hoot-mock";
./addons/web/static/tests/_framework/module_set.hoot.js:import { mockBrowserFactory } from "./mock_browser.hoot";
./addons/web/static/tests/_framework/module_set.hoot.js:import { mockCurrencyFactory } from "./mock_currency.hoot";
./addons/web/static/tests/_framework/module_set.hoot.js:import { TEST_SUFFIX } from "./mock_module_loader";
./addons/web/static/tests/_framework/module_set.hoot.js:import { mockSessionFactory } from "./mock_session.hoot";
./addons/web/static/tests/_framework/module_set.hoot.js:import { makeTemplateFactory } from "./mock_templates.hoot";
./addons/web/static/tests/_framework/module_set.hoot.js:import { mockUserFactory } from "./mock_user.hoot";
./addons/web/static/tests/_framework/module_set.hoot.js:const findMockFactory = (name) => {
./addons/web/static/tests/_framework/module_set.hoot.js:            const mockFactory = findMockFactory(name);
./addons/web/static/tests/_framework/module_set.hoot.js:            if (mockFactory) {
./addons/web/static/tests/_framework/module_set.hoot.js:                // Use mock
./addons/web/static/tests/_framework/module_set.hoot.js:                    fn: mockFactory(name, this.factories.get(name)),
./addons/web/static/tests/_framework/module_set.hoot.js:    // Other mocks
./addons/web/static/tests/_framework/module_set.hoot.js:    ["@web/core/browser/browser", mockBrowserFactory],
./addons/web/static/tests/_framework/module_set.hoot.js:    ["@web/core/currency", mockCurrencyFactory],
./addons/web/static/tests/_framework/module_set.hoot.js:    ["@web/core/user", mockUserFactory],
./addons/web/static/tests/_framework/module_set.hoot.js:    ["@web/session", mockSessionFactory],
./addons/web/static/tests/_framework/view_test_helpers.js:import { animationFrame, Deferred, tick } from "@odoo/hoot-mock";
./addons/web/static/tests/_framework/view_test_helpers.js:import { getMockEnv, getService, makeMockEnv } from "./env_test_helpers";
./addons/web/static/tests/_framework/view_test_helpers.js:import { MockServer } from "./mock_server/mock_server";
./addons/web/static/tests/_framework/view_test_helpers.js: * @typedef {import("./mock_server/mock_model").ViewType} ViewType
./addons/web/static/tests/_framework/view_test_helpers.js:    const model = MockServer.env[modelName];
./addons/web/static/tests/_framework/view_test_helpers.js:    const selector = getMockEnv().isSmall
./addons/web/static/tests/_framework/view_test_helpers.js:    if (getMockEnv().isSmall) {
./addons/web/static/tests/_framework/view_test_helpers.js:        env: params.env || getMockEnv() || (await makeMockEnv()),
./addons/web/static/tests/_framework/view_test_helpers.js:        env: params.env || getMockEnv() || (await makeMockEnv({ config })),
./addons/web/static/tests/_framework/patch_test_helpers.js:import { mockTimeZone } from "@odoo/hoot-mock";
./addons/web/static/tests/_framework/patch_test_helpers.js:mockTimeZone.onCall = (tz) => {
./addons/web/static/tests/_framework/component_test_helpers.js:import { getMockEnv, makeMockEnv } from "./env_test_helpers";
./addons/web/static/tests/_framework/component_test_helpers.js:        env: env || getMockEnv() || (await makeMockEnv()),
./addons/web/static/tests/_framework/mock_currency.hoot.js:import { onServerStateChange } from "./mock_server_state.hoot";
./addons/web/static/tests/_framework/mock_currency.hoot.js: * @param {import("./mock_server_state.hoot").ServerState} serverState
./addons/web/static/tests/_framework/mock_currency.hoot.js:export function mockCurrencyFactory(name, { fn }) {
./addons/web/static/tests/_framework/mock_templates.hoot.js:            exports.getTemplate = function mockedGetTemplate(name) {
./addons/web/static/tests/_framework/mock_templates.hoot.js:            exports.clearProcessedTemplates = function mockedClearProcessedTemplates() {
./addons/web/static/tests/_framework/mock_browser.hoot.js:import { mockLocation } from "@odoo/hoot-mock";
./addons/web/static/tests/_framework/mock_browser.hoot.js: * List of properties that should not be mocked on the browser object.
./addons/web/static/tests/_framework/mock_browser.hoot.js: * Browser module needs to be mocked to patch the `location` global object since
./addons/web/static/tests/_framework/mock_browser.hoot.js: * it can't be directly mocked on the window object.
./addons/web/static/tests/_framework/mock_browser.hoot.js:export function mockBrowserFactory(name, { fn }) {
./addons/web/static/tests/_framework/mock_browser.hoot.js:                get: () => mockLocation,
./addons/web/static/tests/_framework/mock_browser.hoot.js:                set: (value) => (mockLocation.href = value),
./addons/web/static/tests/_framework/mock_browser.hoot.js:        beforeEach(function mockAnchorHref() {
./addons/web/static/tests/_framework/mock_browser.hoot.js:                // Assign href to mock location instead of actual location
./addons/web/static/tests/_framework/mock_browser.hoot.js:                mockLocation.href = href;
./addons/web/static/tests/_framework/mock_module_loader.js:    ["define (mocked)"](name, dependencies, factory) {
./addons/web/static/tests/_framework/mock_module_loader.js:}["define (mocked)"];
./addons/web/static/tests/_framework/dom_test_helpers.js:import { advanceFrame, advanceTime, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/_framework/env_test_helpers.js:import { MockServer, makeMockServer } from "./mock_server/mock_server";
./addons/web/static/tests/_framework/env_test_helpers.js:export function getMockEnv() {
./addons/web/static/tests/_framework/env_test_helpers.js: * Makes a mock environment along with a mock server
./addons/web/static/tests/_framework/env_test_helpers.js:export async function makeMockEnv(partialEnv, { makeNew = false } = {}) {
./addons/web/static/tests/_framework/env_test_helpers.js:            `cannot create mock environment: a mock environment has already been declared`
./addons/web/static/tests/_framework/env_test_helpers.js:    if (!MockServer.current) {
./addons/web/static/tests/_framework/env_test_helpers.js:        await makeMockServer();
./addons/web/static/tests/_framework/env_test_helpers.js: * Makes a mock environment for dialog tests
./addons/web/static/tests/_framework/env_test_helpers.js:export async function makeDialogMockEnv(partialEnv) {
./addons/web/static/tests/_framework/env_test_helpers.js:    return makeMockEnv({
./addons/web/static/tests/_framework/env_test_helpers.js:export function mockService(name, serviceFactory) {
./addons/web/static/tests/_framework/translation_test_helpers.js:import { serverState } from "./mock_server_state.hoot";
./addons/web/static/tests/_framework/touch_helpers.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/web/static/tests/_framework/webclient_test_helpers.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/_framework/mock_session.hoot.js:import { onServerStateChange, serverState } from "./mock_server_state.hoot";
./addons/web/static/tests/_framework/mock_session.hoot.js:export function mockSessionFactory() {
./addons/web/static/tests/core/utils/hooks.test.js:import { Deferred, animationFrame, mockTouch } from "@odoo/hoot-mock";
./addons/web/static/tests/core/utils/hooks.test.js:    makeMockEnv,
./addons/web/static/tests/core/utils/hooks.test.js:        mockTouch(true);
./addons/web/static/tests/core/utils/hooks.test.js:        const { bus } = await makeMockEnv();
./addons/web/static/tests/core/utils/hooks.test.js:        useServiceProtectMethodHandling.fn = useServiceProtectMethodHandling.mocked;
./addons/web/static/tests/core/utils/autoresize.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/utils/draggable.test.js:import { animationFrame, mockTouch } from "@odoo/hoot-mock";
./addons/web/static/tests/core/utils/draggable.test.js:    mockTouch(true);
./addons/web/static/tests/core/utils/draggable.test.js:    mockTouch(true);
./addons/web/static/tests/core/utils/sortable.test.js:import { advanceFrame, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/utils/nested_sortable.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/utils/concurrency.test.js:import { tick } from "@odoo/hoot-mock";
./addons/web/static/tests/core/utils/assets.test.js:import { mockFetch } from "@odoo/hoot-mock";
./addons/web/static/tests/core/utils/assets.test.js:const mockHeadAppendChild = (callback) => {
./addons/web/static/tests/core/utils/assets.test.js:    mockHeadAppendChild((node) => {
./addons/web/static/tests/core/utils/assets.test.js:    mockHeadAppendChild((node) => {
./addons/web/static/tests/core/utils/assets.test.js:    mockFetch((route) => {
./addons/web/static/tests/core/utils/assets.test.js:    mockHeadAppendChild(async (node) => {
./addons/web/static/tests/core/utils/assets.test.js:    mockFetch((route) => {
./addons/web/static/tests/core/utils/assets.test.js:    mockHeadAppendChild(async (node) => {
./addons/web/static/tests/core/utils/assets.test.js:    mockFetch((route) => {
./addons/web/static/tests/core/utils/assets.test.js:    mockHeadAppendChild(async (node) => {
./addons/web/static/tests/core/utils/assets.test.js:    mockFetch((route) => {
./addons/web/static/tests/core/utils/assets.test.js:    mockHeadAppendChild(async (node) => {
./addons/web/static/tests/core/utils/timing.test.js:import { Deferred, advanceTime, animationFrame, microTick, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/main_components_container.test.js:import { animationFrame, Deferred } from "@odoo/hoot-mock";
./addons/web/static/tests/core/install_scoped_app.test.js:import { animationFrame, mockFetch } from "@odoo/hoot-mock";
./addons/web/static/tests/core/install_scoped_app.test.js:    makeMockEnv,
./addons/web/static/tests/core/install_scoped_app.test.js:    await makeMockEnv();
./addons/web/static/tests/core/install_scoped_app.test.js:    mockFetch((route) => {
./addons/web/static/tests/core/install_scoped_app.test.js:    await makeMockEnv();
./addons/web/static/tests/core/install_scoped_app.test.js:    mockFetch((route) => {
./addons/web/static/tests/core/resizable_panel.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/user.test.js:import { makeMockEnv, onRpc, patchWithCleanup, serverState } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/core/user.test.js:    await makeMockEnv();
./addons/web/static/tests/core/user.test.js:    await makeMockEnv();
./addons/web/static/tests/core/user.test.js:    // the modification of the serverState will force the re-creation of the user with the new values (see mock_user.hoot.js)
./addons/web/static/tests/core/file_upload.test.js:    mockService,
./addons/web/static/tests/core/file_upload.test.js:import { Deferred, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/file_upload.test.js:    mockService("dialog", {
./addons/web/static/tests/core/effects/effect_service.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/components/pager_indicator.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/components/pager.test.js:import { Deferred, animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/components/datetime/datetime_picker.test.js:import { animationFrame, mockDate } from "@odoo/hoot-mock";
./addons/web/static/tests/core/components/datetime/datetime_picker.test.js:import { defineParams, mountWithCleanup, makeMockEnv, serverState } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/core/components/datetime/datetime_picker.test.js:beforeEach(() => mockDate("2023-04-25T12:45:01"));
./addons/web/static/tests/core/components/datetime/datetime_picker.test.js:    await makeMockEnv();
./addons/web/static/tests/core/components/datetime/datetime_picker.test.js:    await makeMockEnv();
./addons/web/static/tests/core/components/datetime/datetime_input.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/components/datetime/datetime_input.test.js:    makeMockEnv,
./addons/web/static/tests/core/components/datetime/datetime_input.test.js:    await makeMockEnv();
./addons/web/static/tests/core/components/datetime/datetime_input.test.js:        await makeMockEnv();
./addons/web/static/tests/core/components/datetime/datetime_input.test.js:        await makeMockEnv();
./addons/web/static/tests/core/components/datetime/datetime_input.test.js:        await makeMockEnv();
./addons/web/static/tests/core/components/datetime/datetime_input.test.js:        await makeMockEnv();
./addons/web/static/tests/core/components/datetime/datetime_hook.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/web/static/tests/core/model_field_selector.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/popover/popover.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/popover/popover_hook.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/popover/popover_service.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/model_selector.test.js:import { runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/action_swiper.test.js:import { defineParams } from "../_framework/mock_server/mock_server";
./addons/web/static/tests/core/action_swiper.test.js:import { advanceTime, animationFrame, mockTouch } from "@odoo/hoot-mock";
./addons/web/static/tests/core/action_swiper.test.js:    mockTouch(true);
./addons/web/static/tests/core/router.test.js:import { tick } from "@odoo/hoot-mock";
./addons/web/static/tests/core/debug/profiling_qweb.test.js:import { runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/debug/debug_manager.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/debug/debug_manager.test.js:    makeDialogMockEnv,
./addons/web/static/tests/core/debug/debug_manager.test.js:        const env = await makeDialogMockEnv();
./addons/web/static/tests/core/debug/debug_manager.test.js:        const env = await makeDialogMockEnv();
./addons/web/static/tests/core/file_input.test.js:    mockService,
./addons/web/static/tests/core/file_input.test.js:import { Deferred, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/file_input.test.js:async function createFileInput({ mockPost, mockAdd, props }) {
./addons/web/static/tests/core/file_input.test.js:    mockService("notification", {
./addons/web/static/tests/core/file_input.test.js:        add: mockAdd || (() => {}),
./addons/web/static/tests/core/file_input.test.js:    mockService("http", {
./addons/web/static/tests/core/file_input.test.js:        post: mockPost || (() => {}),
./addons/web/static/tests/core/file_input.test.js:        mockPost: (route, params) => {
./addons/web/static/tests/core/file_input.test.js:        mockPost: (route, params) => {
./addons/web/static/tests/core/file_input.test.js:        mockPost: (_, params) => {
./addons/web/static/tests/core/file_input.test.js:        mockPost: (_, params) => {
./addons/web/static/tests/core/file_input.test.js:        mockAdd: (message) => {
./addons/web/static/tests/core/file_input.test.js:        mockPost: async (route) => {
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:import { animationFrame, mockDate, mockTimeZone, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    mockDate("2023-04-20 17:00:00", 0);
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    // Create the domain selector and its mock environment
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    mockTimeZone(0);
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    mockTimeZone(0);
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    mockTimeZone(0);
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    mockTimeZone(0);
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    mockTimeZone(0);
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    mockDate("2023-01-01 00:00:00", 0);
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    mockDate("2023-10-05 15:00:00", 0);
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    mockDate("2023-04-20 17:00:00", 0);
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    mockDate("2023-04-20 17:00:00", 0);
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    mockTimeZone(+2);
./addons/web/static/tests/core/domain_selector/domain_selector.test.js:    mockTimeZone(+2);
./addons/web/static/tests/core/domain_selector/domain_selector_dialog.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/domain_selector/domain_selector_dialog.test.js:    makeDialogMockEnv,
./addons/web/static/tests/core/domain_selector/domain_selector_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:import { advanceTime, animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/notifications/notifications.test.js:import { getService, makeMockEnv, mountWithCleanup } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/notifications/notifications.test.js:    await makeMockEnv();
./addons/web/static/tests/core/dropdown/dropdown_group.test.js:import { Deferred, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/dropdown/dropdown.test.js:import { Deferred, animationFrame, runAllTimers, tick } from "@odoo/hoot-mock";
./addons/web/static/tests/core/dropdown/dropdown.test.js:import { makeMockEnv, mockService } from "@web/../tests/_framework/env_test_helpers";
./addons/web/static/tests/core/dropdown/dropdown.test.js:    const env = await makeMockEnv();
./addons/web/static/tests/core/dropdown/dropdown.test.js:    const env = await makeMockEnv();
./addons/web/static/tests/core/dropdown/dropdown.test.js:    await makeMockEnv();
./addons/web/static/tests/core/dropdown/dropdown.test.js:    mockService("hotkey", {
./addons/web/static/tests/core/dropdown/dropdown_item.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/dropdown/dropdown_accordion_item.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/tags_list.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/navigation_hook.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/confirmation_dialog.test.js:import { tick, Deferred } from "@odoo/hoot-mock";
./addons/web/static/tests/core/confirmation_dialog.test.js:import { mountWithCleanup, contains, makeDialogMockEnv } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/confirmation_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/select_menu.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/field_service.test.js:    makeMockEnv,
./addons/web/static/tests/core/field_service.test.js:import { Deferred, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/field_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/field_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/field_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:import { getService, makeMockEnv, mountWithCleanup, onRpc } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/orm_service.test.js:    const { services } = await makeMockEnv();
./addons/web/static/tests/core/expression_editor/expression_editor.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/expression_editor/expression_editor_dialog.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/expression_editor/expression_editor_dialog.test.js:    makeDialogMockEnv,
./addons/web/static/tests/core/expression_editor/expression_editor_dialog.test.js:    mockService,
./addons/web/static/tests/core/expression_editor/expression_editor_dialog.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/expression_editor/expression_editor_dialog.test.js:    mockService("notification", {
./addons/web/static/tests/core/errors/error_service.test.js:import { Deferred, advanceTime, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/errors/error_service.test.js:    makeMockEnv,
./addons/web/static/tests/core/errors/error_service.test.js:    mockService,
./addons/web/static/tests/core/errors/error_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:    mockService("dialog", {
./addons/web/static/tests/core/errors/error_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:    mockService("dialog", {
./addons/web/static/tests/core/errors/error_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:    mockService("dialog", {
./addons/web/static/tests/core/errors/error_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:    mockService("notification", {
./addons/web/static/tests/core/errors/error_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:    const testEnv = await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:    mockService("dialog", {
./addons/web/static/tests/core/errors/error_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:    mockService("dialog", {
./addons/web/static/tests/core/errors/error_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:    mockService("dialog", {
./addons/web/static/tests/core/errors/error_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:    mockService("dialog", {
./addons/web/static/tests/core/errors/error_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:        await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:        await makeMockEnv();
./addons/web/static/tests/core/errors/error_service.test.js:        await makeMockEnv();
./addons/web/static/tests/core/errors/error_dialogs.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/web/static/tests/core/errors/error_dialogs.test.js:    mockService,
./addons/web/static/tests/core/errors/error_dialogs.test.js:    makeDialogMockEnv,
./addons/web/static/tests/core/errors/error_dialogs.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/errors/error_dialogs.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/errors/error_dialogs.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/errors/error_dialogs.test.js:    mockService("popover", () => ({
./addons/web/static/tests/core/errors/error_dialogs.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/errors/error_dialogs.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/errors/error_dialogs.test.js:    mockService("action", {
./addons/web/static/tests/core/errors/error_dialogs.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/errors/error_dialogs.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/errors/error_dialogs.test.js:    const env = await makeDialogMockEnv();
./addons/web/static/tests/core/position/position_hook.test.js:import { Deferred, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/l10n/translation.test.js:    makeMockEnv,
./addons/web/static/tests/core/l10n/translation.test.js:async function mockLang(lang) {
./addons/web/static/tests/core/l10n/translation.test.js:    await makeMockEnv();
./addons/web/static/tests/core/l10n/translation.test.js:    await mockLang("fr_FR");
./addons/web/static/tests/core/l10n/translation.test.js:    await makeMockEnv();
./addons/web/static/tests/core/l10n/translation.test.js:    await makeMockEnv();
./addons/web/static/tests/core/l10n/translation.test.js:    await mockLang("fr_BE");
./addons/web/static/tests/core/l10n/translation.test.js:    await mockLang("ar_001");
./addons/web/static/tests/core/l10n/translation.test.js:    await mockLang("ar_DZ");
./addons/web/static/tests/core/l10n/translation.test.js:    await mockLang("ar_LY");
./addons/web/static/tests/core/l10n/translation.test.js:    await mockLang("ar_MA");
./addons/web/static/tests/core/l10n/translation.test.js:    await mockLang("ar_SA");
./addons/web/static/tests/core/l10n/translation.test.js:    await mockLang("ar_TN");
./addons/web/static/tests/core/l10n/translation.test.js:    await mockLang("bn");
./addons/web/static/tests/core/l10n/translation.test.js:    await mockLang("pa_IN");
./addons/web/static/tests/core/l10n/translation.test.js:    await mockLang("ta");
./addons/web/static/tests/core/l10n/dates.test.js:import { mockDate, mockTimeZone } from "@odoo/hoot-mock";
./addons/web/static/tests/core/l10n/dates.test.js:    makeMockEnv,
./addons/web/static/tests/core/l10n/dates.test.js:    mockDate("2009-05-04 11:34:56", +1);
./addons/web/static/tests/core/l10n/dates.test.js:    mockDate("2009-05-03 23:00:00", +1);
./addons/web/static/tests/core/l10n/dates.test.js:    mockDate("2009-05-03 08:00:00");
./addons/web/static/tests/core/l10n/dates.test.js:    mockTimeZone(0);
./addons/web/static/tests/core/l10n/dates.test.js:    mockDate("2009-05-04 00:00:00", 0);
./addons/web/static/tests/core/l10n/dates.test.js:    await makeMockEnv();
./addons/web/static/tests/core/l10n/dates.test.js:    mockTimeZone(+1);
./addons/web/static/tests/core/l10n/dates.test.js:    mockTimeZone(+5.5);
./addons/web/static/tests/core/l10n/dates.test.js:    mockTimeZone(-11);
./addons/web/static/tests/core/l10n/dates.test.js:    await makeMockEnv();
./addons/web/static/tests/core/l10n/dates.test.js:    mockTimeZone(+1);
./addons/web/static/tests/core/l10n/dates.test.js:    await makeMockEnv();
./addons/web/static/tests/core/l10n/dates.test.js:    await makeMockEnv();
./addons/web/static/tests/core/l10n/dates.test.js:    mockDate("2020-01-01 00:00:00", 0);
./addons/web/static/tests/core/l10n/dates.test.js:    mockTimeZone(+1);
./addons/web/static/tests/core/l10n/dates.test.js:    mockDate("2022-02-21 15:11:42");
./addons/web/static/tests/core/l10n/dates.test.js:    mockDate("2022-02-20 23:00:00");
./addons/web/static/tests/core/l10n/dates.test.js:    mockDate("2022-02-21 15:11:42");
./addons/web/static/tests/core/l10n/dates.test.js:    mockDate("2022-02-20 23:00:00");
./addons/web/static/tests/core/l10n/dates.test.js:    mockDate("2020-07-15 12:30:00", 0);
./addons/web/static/tests/core/l10n/dates.test.js:    mockDate("2020-07-15 11:30:00", 0);
./addons/web/static/tests/core/l10n/dates.test.js:    await makeMockEnv();
./addons/web/static/tests/core/code_editor.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/pwa_service.test.js:import { mockFetch } from "@odoo/hoot-mock";
./addons/web/static/tests/core/pwa_service.test.js:import { getService, makeMockEnv, patchWithCleanup } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/core/pwa_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/pwa_service.test.js:    mockFetch((route) => {
./addons/web/static/tests/core/pwa_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/pwa_service.test.js:    mockFetch((route) => {
./addons/web/static/tests/core/macro.test.js:import { advanceTime, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/dialog.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/dialog.test.js:    makeDialogMockEnv,
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv();
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv({
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv();
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv({
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv();
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv({
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv();
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv();
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv();
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv();
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv();
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv();
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv();
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv();
./addons/web/static/tests/core/dialog.test.js:    await makeDialogMockEnv();
./addons/web/static/tests/core/dialog_service.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/scroller.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/transition.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/autocomplete.test.js:import { Deferred, animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/cache.test.js:import { Deferred } from "@odoo/hoot-mock";
./addons/web/static/tests/core/domain_field.test.js:import { Deferred, animationFrame, mockDate } from "@odoo/hoot-mock";
./addons/web/static/tests/core/domain_field.test.js:    mockDate("2020-09-05 00:00:00");
./addons/web/static/tests/core/browser/title_service.test.js:import { getService, makeMockEnv } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/core/browser/title_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/hotkey_sevice.test.js:import { animationFrame, mockUserAgent, tick } from "@odoo/hoot-mock";
./addons/web/static/tests/core/hotkey_sevice.test.js:    makeMockEnv,
./addons/web/static/tests/core/hotkey_sevice.test.js:    await makeMockEnv();
./addons/web/static/tests/core/hotkey_sevice.test.js:    await makeMockEnv();
./addons/web/static/tests/core/hotkey_sevice.test.js:    await makeMockEnv();
./addons/web/static/tests/core/hotkey_sevice.test.js:    await makeMockEnv();
./addons/web/static/tests/core/hotkey_sevice.test.js:    mockUserAgent("mac");
./addons/web/static/tests/core/hotkey_sevice.test.js:    mockUserAgent("mac");
./addons/web/static/tests/core/hotkey_sevice.test.js:    await makeMockEnv();
./addons/web/static/tests/core/hotkey_sevice.test.js:    await makeMockEnv();
./addons/web/static/tests/core/hotkey_sevice.test.js:    await makeMockEnv();
./addons/web/static/tests/core/hotkey_sevice.test.js:    mockUserAgent("mac");
./addons/web/static/tests/core/hotkey_sevice.test.js:    await makeMockEnv();
./addons/web/static/tests/core/hotkey_sevice.test.js:    await makeMockEnv();
./addons/web/static/tests/core/tooltip/tooltip_service.test.js:import { advanceTime, animationFrame, mockTouch, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/tooltip/tooltip_service.test.js:import { makeMockEnv, mockService, mountWithCleanup } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/core/tooltip/tooltip_service.test.js:    mockService("popover", (...kargs) => {
./addons/web/static/tests/core/tooltip/tooltip_service.test.js:    await makeMockEnv({ tooltip_text: "tooltip" });
./addons/web/static/tests/core/tooltip/tooltip_service.test.js:    mockTouch(true);
./addons/web/static/tests/core/commands/command_service.test.js:    mockUserAgent,
./addons/web/static/tests/core/commands/command_service.test.js:} from "@odoo/hoot-mock";
./addons/web/static/tests/core/commands/command_service.test.js:    makeMockEnv,
./addons/web/static/tests/core/commands/command_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/commands/command_service.test.js:    mockUserAgent("mac");
./addons/web/static/tests/core/commands/command_service.test.js:    mockUserAgent("mac");
./addons/web/static/tests/core/commands/command_palette.test.js:import { Deferred, advanceTime, animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/commands/menu_provider.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/virtual_grid_hook.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/core/currency.test.js:import { makeMockEnv, serverState } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/core/currency.test.js:    await makeMockEnv(); // To start the localization service
./addons/web/static/tests/core/name_service.test.js:    makeMockEnv,
./addons/web/static/tests/core/name_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/name_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/name_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/name_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/name_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/name_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/name_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/name_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/name_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/session_service.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/network/rpc.test.js:import { mockFetch } from "@odoo/hoot-mock";
./addons/web/static/tests/core/network/rpc.test.js:    mockFetch((_, { body }) => {
./addons/web/static/tests/core/network/rpc.test.js:    mockFetch(() => ({
./addons/web/static/tests/core/network/rpc.test.js:    mockFetch((route, { body }) => ({
./addons/web/static/tests/core/network/rpc.test.js:    mockFetch(() => ({ result: {} }));
./addons/web/static/tests/core/network/rpc.test.js:    mockFetch(() => ({
./addons/web/static/tests/core/network/rpc.test.js:    mockFetch(() => new Promise(() => {}));
./addons/web/static/tests/core/network/rpc.test.js:    mockFetch(() => new Response("<h...", { status: 500 }));
./addons/web/static/tests/core/network/rpc.test.js:    mockFetch((url, settings) => {
./addons/web/static/tests/core/network/http_service.test.js:import { mockFetch } from "@odoo/hoot-mock";
./addons/web/static/tests/core/network/http_service.test.js:    mockFetch((_, { method }) => expect.step(method));
./addons/web/static/tests/core/network/http_service.test.js:    mockFetch(() => new Response("{}", { status: 502 }));
./addons/web/static/tests/core/network/http_service.test.js:    mockFetch((_, { body }) => {
./addons/web/static/tests/core/network/http_service.test.js:    mockFetch((_, { body }) => expect(body).toBe(formData));
./addons/web/static/tests/core/network/download.test.js:import { Deferred, mockFetch } from "@odoo/hoot-mock";
./addons/web/static/tests/core/network/download.test.js:    mockFetch(() => new Response("", { status: 502 }));
./addons/web/static/tests/core/network/download.test.js:    mockFetch(() => Promise.reject());
./addons/web/static/tests/core/network/download.test.js:    mockFetch(() => new Blob([JSON.stringify(serverError)], { type: "text/html" }));
./addons/web/static/tests/core/network/download.test.js:    mockFetch(() => new Blob([JSON.stringify(serverError)], { type: "text/html" }));
./addons/web/static/tests/core/network/download.test.js:    mockFetch((_, { body }) => {
./addons/web/static/tests/core/ui_service.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/record_selectors/record_selector.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/record_selectors/multi_record_selector.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/overlay_service.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/overlay_service.test.js:import { getService, makeMockEnv, mountWithCleanup } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/core/overlay_service.test.js:    await makeMockEnv();
./addons/web/static/tests/core/py_js/py_date.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/web/static/tests/core/py_js/py_date.test.js:        mockDate("2021-09-17 10:00:00", +6);
./addons/web/static/tests/core/py_js/py_date.test.js:        mockDate("2021-10-17 10:00:00", "Europe/Brussels");
./addons/web/static/tests/core/py_js/py_date.test.js:        mockDate("2021-09-20 10:00:00");
./addons/web/static/tests/core/datetime/datetime_test_helpers.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/core/notebook.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/helpers/dom_test_helpers.test.js:import { contains, getMockEnv, mountWithCleanup } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/helpers/dom_test_helpers.test.js:    if (!getMockEnv().isSmall) {
./addons/web/static/tests/webclient/navbar.test.js:import { advanceTime, animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/navbar.test.js:    makeMockEnv,
./addons/web/static/tests/webclient/navbar.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/navbar.test.js:    const env = await makeMockEnv();
./addons/web/static/tests/webclient/navbar.test.js:    const env = await makeMockEnv();
./addons/web/static/tests/webclient/navbar.test.js:    const env = await makeMockEnv();
./addons/web/static/tests/webclient/navbar.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/navbar.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/loading_indicator.test.js:import { advanceTime, animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/user_menu.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/user_menu.test.js:    mockService,
./addons/web/static/tests/webclient/user_menu.test.js:    mockService("action", {
./addons/web/static/tests/webclient/switch_company_menu.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/settings_form_view/res_config_dev_tool.test.js:import { tick } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/settings_form_view/settings_form_view.test.js:import { animationFrame, Deferred, mockSendBeacon, mockTouch, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/settings_form_view/settings_form_view.test.js:    mockService,
./addons/web/static/tests/webclient/settings_form_view/settings_form_view.test.js:    mockSendBeacon(() => expect.step("sendBeacon"));
./addons/web/static/tests/webclient/settings_form_view/settings_form_view.test.js:    mockService("action", {
./addons/web/static/tests/webclient/settings_form_view/settings_form_view.test.js:    mockService("action", {
./addons/web/static/tests/webclient/settings_form_view/settings_form_view.test.js:    mockTouch(true);
./addons/web/static/tests/webclient/settings_form_view/settings_form_view.test.js:    mockTouch(true);
./addons/web/static/tests/webclient/settings_form_view/settings_upgrade_boolean_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/reload_company_service.test.js:    makeMockEnv,
./addons/web/static/tests/webclient/reload_company_service.test.js:    mockService,
./addons/web/static/tests/webclient/reload_company_service.test.js:    mockService("action", {
./addons/web/static/tests/webclient/reload_company_service.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/reload_company_service.test.js:    mockService("action", {
./addons/web/static/tests/webclient/reload_company_service.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/res_user_group_ids_field.test.js:import { ResGroups } from "../_framework/mock_server/mock_models/res_groups";
./addons/web/static/tests/webclient/res_user_group_ids_field.test.js:import { ResUsers } from "../_framework/mock_server/mock_models/res_users";
./addons/web/static/tests/webclient/res_user_group_ids_field.test.js:import { ResCompany } from "../_framework/mock_server/mock_models/res_company";
./addons/web/static/tests/webclient/res_user_group_ids_field.test.js:import { ResPartner } from "../_framework/mock_server/mock_models/res_partner";
./addons/web/static/tests/webclient/webclient.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/webclient.test.js:    makeMockEnv,
./addons/web/static/tests/webclient/webclient.test.js:    const env = await makeMockEnv();
./addons/web/static/tests/webclient/barcode/barcode_scanner.test.js:import { Deferred } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/barcode/barcode_scanner.test.js:    makeMockEnv,
./addons/web/static/tests/webclient/barcode/barcode_scanner.test.js:    const env = await makeMockEnv();
./addons/web/static/tests/webclient/barcode/barcode_scanner.test.js:    function mockUserMedia() {
./addons/web/static/tests/webclient/barcode/barcode_scanner.test.js:            getUserMedia: mockUserMedia,
./addons/web/static/tests/webclient/barcode/barcode_scanner.test.js:    function mockUserMedia() {
./addons/web/static/tests/webclient/barcode/barcode_scanner.test.js:            getUserMedia: mockUserMedia,
./addons/web/static/tests/webclient/actions/target.test.js:import { animationFrame, Deferred } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/actions/target.test.js:    mockService,
./addons/web/static/tests/webclient/actions/target.test.js:        mockService("title", {
./addons/web/static/tests/webclient/actions/url_action.test.js:import { getService, makeMockEnv, patchWithCleanup } from "@web/../tests/web_test_helpers";
./addons/web/static/tests/webclient/actions/url_action.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/actions/url_action.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/actions/url_action.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/actions/url_action.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/actions/effect.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/actions/close_action.test.js:import { animationFrame, Deferred } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/actions/embedded_action.test.js:import { mockTouch, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/actions/embedded_action.test.js:    mockTouch(true);
./addons/web/static/tests/webclient/actions/client_action.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/actions/error_handling.test.js:import { animationFrame, mockFetch, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/actions/error_handling.test.js:    mockFetch((input) => {
./addons/web/static/tests/webclient/actions/error_handling.test.js:        "/web/dataset/call_kw/partner/web_read", // from mockFetch
./addons/web/static/tests/webclient/actions/error_handling.test.js:        "/web/dataset/call_kw/partner/web_search_read", // from mockFetch
./addons/web/static/tests/webclient/actions/error_handling.test.js:    mockFetch((input) => {
./addons/web/static/tests/webclient/actions/error_handling.test.js:        "/web/dataset/call_kw/partner/web_search_read", // from mockFetch
./addons/web/static/tests/webclient/actions/window_action.test.js:import { Deferred, animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/actions/window_action.test.js:    MockServer,
./addons/web/static/tests/webclient/actions/window_action.test.js:    makeMockEnv,
./addons/web/static/tests/webclient/actions/window_action.test.js:    expectedAction = MockServer.current._findAction(3);
./addons/web/static/tests/webclient/actions/window_action.test.js:    const env = await makeMockEnv();
./addons/web/static/tests/webclient/actions/concurrency.test.js:import { animationFrame, Deferred } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/actions/push_state.test.js:import { Deferred, animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/actions/report_action.test.js:import { runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/actions/report_action.test.js:    mockService,
./addons/web/static/tests/webclient/actions/report_action.test.js:    // This ensures the request to be done only once. In the test environment, we mock this request
./addons/web/static/tests/webclient/actions/report_action.test.js:    mockService("notification", {
./addons/web/static/tests/webclient/actions/report_action.test.js:    mockService("notification", {
./addons/web/static/tests/webclient/actions/report_action.test.js:    mockService("notification", {
./addons/web/static/tests/webclient/actions/load_state.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/actions/load_state.test.js:    makeMockEnv,
./addons/web/static/tests/webclient/actions/load_state.test.js:        const env = await makeMockEnv();
./addons/web/static/tests/webclient/actions/load_state.test.js:        const env = await makeMockEnv();
./addons/web/static/tests/webclient/actions/load_state.test.js:        const env = await makeMockEnv();
./addons/web/static/tests/webclient/actions/load_state.test.js:        const env = await makeMockEnv();
./addons/web/static/tests/webclient/actions/load_state.test.js:        const env = await makeMockEnv();
./addons/web/static/tests/webclient/actions/load_state.test.js:        const env = await makeMockEnv();
./addons/web/static/tests/webclient/actions/misc.test.js:import { animationFrame, Deferred } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/actions/misc.test.js:    makeMockEnv,
./addons/web/static/tests/webclient/actions/misc.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/actions/misc.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/actions/misc.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/actions/misc.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/actions/misc.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/mobile/burger_menu.test.js:    makeMockServer,
./addons/web/static/tests/webclient/mobile/burger_menu.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/mobile/burger_menu.test.js:    const server = await makeMockServer();
./addons/web/static/tests/webclient/mobile/burger_menu.test.js:    const server = await makeMockServer();
./addons/web/static/tests/webclient/mobile/burger_user_menu.test.js:    mockService,
./addons/web/static/tests/webclient/mobile/burger_user_menu.test.js:    mockService("action", {
./addons/web/static/tests/webclient/mobile/mobile_switch_company.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/currency_service.test.js:    makeMockEnv,
./addons/web/static/tests/webclient/currency_service.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/currency_service.test.js:    await makeMockEnv();
./addons/web/static/tests/webclient/clickbot.test.js:import { animationFrame, Deferred, mockDate, runAllTimers, tick } from "@odoo/hoot-mock";
./addons/web/static/tests/webclient/clickbot.test.js:    mockDate("2017-10-08T15:35:11.000");
./addons/web/static/tests/webclient/clickbot.test.js:    mockDate("2017-10-08T15:35:11.000");
./addons/web/static/tests/webclient/clickbot.test.js:    mockDate("2024-04-10T00:00:00.000");
./addons/web/static/tests/webclient/clickbot.test.js:    mockDate("2017-10-08T15:35:11.000");
./addons/web/static/lib/hoot-dom/helpers/dom.js:                result = value === mockedMatchMedia.DISPLAY_MODE;
./addons/web/static/lib/hoot-dom/helpers/dom.js:                result = value === mockedMatchMedia.COLOR_SCHEME;
./addons/web/static/lib/hoot-dom/helpers/dom.js:                result = value === mockedMatchMedia.REDUCED_MOTION;
./addons/web/static/lib/hoot-dom/helpers/dom.js:export function mockedMatchMedia(query) {
./addons/web/static/lib/hoot-dom/helpers/dom.js:mockedMatchMedia.COLOR_SCHEME = "light";
./addons/web/static/lib/hoot-dom/helpers/dom.js:mockedMatchMedia.DISPLAY_MODE = "browser";
./addons/web/static/lib/hoot-dom/helpers/dom.js:mockedMatchMedia.REDUCED_MOTION = "reduce";
./addons/web/static/lib/hoot-dom/helpers/events.js: * This allows the `mockFetch` helper to take control over submit requests.
./addons/web/static/lib/hoot-dom/helpers/events.js:        // Use `globalThis.setTimeout` to potentially make use of the mock timeouts
./addons/web/static/lib/hoot-dom/helpers/time.js:export function mockedCancelAnimationFrame(handle) {
./addons/web/static/lib/hoot-dom/helpers/time.js:export function mockedClearInterval(intervalId) {
./addons/web/static/lib/hoot-dom/helpers/time.js:export function mockedClearTimeout(timeoutId) {
./addons/web/static/lib/hoot-dom/helpers/time.js:export function mockedRequestAnimationFrame(callback) {
./addons/web/static/lib/hoot-dom/helpers/time.js:        mockedCancelAnimationFrame(handle);
./addons/web/static/lib/hoot-dom/helpers/time.js:export function mockedSetInterval(callback, ms, ...args) {
./addons/web/static/lib/hoot-dom/helpers/time.js:            mockedClearInterval(intervalId);
./addons/web/static/lib/hoot-dom/helpers/time.js:export function mockedSetTimeout(callback, ms, ...args) {
./addons/web/static/lib/hoot-dom/helpers/time.js:        mockedClearTimeout(timeoutId);
./addons/web/static/lib/fullcalendar/core/index.global.js:        // mock what happens in EventClicking
./addons/web/static/lib/hoot/ui/hoot_config_dropdown.js:import { generateSeed, internalRandom } from "../mock/math";
./addons/web/static/lib/hoot/ui/hoot_status_panel.js:import { getTitle, setTitle } from "../mock/window";
./addons/web/static/lib/hoot/ui/setup_hoot_ui.js:import { patchWindow } from "../mock/window";
./addons/web/static/lib/hoot/hoot_utils.js:export function createMock(target, descriptors) {
./addons/web/static/lib/hoot/hoot_utils.js:    const mock = $assign($create($getPrototypeOf(target)), target);
./addons/web/static/lib/hoot/hoot_utils.js:        $defineProperty(mock, property, {
./addons/web/static/lib/hoot/hoot_utils.js:        $defineProperty(mock, property, descriptor);
./addons/web/static/lib/hoot/hoot_utils.js:    return mock;
./addons/web/static/lib/hoot/mock/network.js:    mockedCancelAnimationFrame,
./addons/web/static/lib/hoot/mock/network.js:    mockedRequestAnimationFrame,
./addons/web/static/lib/hoot/mock/network.js:import { getSyncValue, MockBlob, setSyncValue } from "./sync_values";
./addons/web/static/lib/hoot/mock/network.js:        const scope = new MockDedicatedWorkerGlobalScope(worker);
./addons/web/static/lib/hoot/mock/network.js:        mockWorkerConnection(worker);
./addons/web/static/lib/hoot/mock/network.js:let mockFetchFn = null;
./addons/web/static/lib/hoot/mock/network.js:let mockWorkerConnection = null;
./addons/web/static/lib/hoot/mock/network.js:let mockWebSocketConnection = null;
./addons/web/static/lib/hoot/mock/network.js:    mockFetchFn = null;
./addons/web/static/lib/hoot/mock/network.js:    mockWebSocketConnection = null;
./addons/web/static/lib/hoot/mock/network.js:    mockWorkerConnection = null;
./addons/web/static/lib/hoot/mock/network.js:    mockCookie._clear();
./addons/web/static/lib/hoot/mock/network.js:    mockHistory._clear();
./addons/web/static/lib/hoot/mock/network.js:    mockLocation._clear();
./addons/web/static/lib/hoot/mock/network.js:    MockBroadcastChannel._clear();
./addons/web/static/lib/hoot/mock/network.js:export async function mockedFetch(input, init) {
./addons/web/static/lib/hoot/mock/network.js:    if (!mockFetchFn) {
./addons/web/static/lib/hoot/mock/network.js:        throw new Error("Can't make a request when fetch is not mocked");
./addons/web/static/lib/hoot/mock/network.js:        result = await mockFetchFn(input, init);
./addons/web/static/lib/hoot/mock/network.js:    if (result instanceof MockResponse) {
./addons/web/static/lib/hoot/mock/network.js:        // Mocked response
./addons/web/static/lib/hoot/mock/network.js:        return new MockResponse(strBody, { [HEADER.contentType]: contentType });
./addons/web/static/lib/hoot/mock/network.js:    return new MockResponse(result, { [HEADER.contentType]: contentType });
./addons/web/static/lib/hoot/mock/network.js: * Mocks the fetch function by replacing it with a given `fetchFn`.
./addons/web/static/lib/hoot/mock/network.js: * The return value of `fetchFn` is used as the response of the mocked fetch, or
./addons/web/static/lib/hoot/mock/network.js: * wrapped in a {@link MockResponse} object if it does not meet the required format.
./addons/web/static/lib/hoot/mock/network.js: * @param {typeof mockFetchFn} [fetchFn]
./addons/web/static/lib/hoot/mock/network.js: *  mockFetch((input, init) => {
./addons/web/static/lib/hoot/mock/network.js: *  mockFetch((input, init) => {
./addons/web/static/lib/hoot/mock/network.js:export function mockFetch(fetchFn) {
./addons/web/static/lib/hoot/mock/network.js:    mockFetchFn = fetchFn;
./addons/web/static/lib/hoot/mock/network.js: * Activates mock WebSocket classe:
./addons/web/static/lib/hoot/mock/network.js: *  - websocket connections will be handled by `window.fetch` (see {@link mockFetch});
./addons/web/static/lib/hoot/mock/network.js: * @param {typeof mockWebSocketConnection} [onWebSocketConnected]
./addons/web/static/lib/hoot/mock/network.js:export function mockWebSocket(onWebSocketConnected) {
./addons/web/static/lib/hoot/mock/network.js:    mockWebSocketConnection = onWebSocketConnected;
./addons/web/static/lib/hoot/mock/network.js: * Activates mock Worker and SharedWorker classes:
./addons/web/static/lib/hoot/mock/network.js: *  (see {@link mockFetch});
./addons/web/static/lib/hoot/mock/network.js: * @param {typeof mockWorkerConnection} [onWorkerConnected]
./addons/web/static/lib/hoot/mock/network.js: *  mockWorker((worker) => {
./addons/web/static/lib/hoot/mock/network.js:export function mockWorker(onWorkerConnected) {
./addons/web/static/lib/hoot/mock/network.js:    mockWorkerConnection = onWorkerConnected;
./addons/web/static/lib/hoot/mock/network.js:export class MockBroadcastChannel extends BroadcastChannel {
./addons/web/static/lib/hoot/mock/network.js:        MockBroadcastChannel._instances.push(this);
./addons/web/static/lib/hoot/mock/network.js:        while (MockBroadcastChannel._instances.length) {
./addons/web/static/lib/hoot/mock/network.js:            MockBroadcastChannel._instances.pop().close();
./addons/web/static/lib/hoot/mock/network.js:export class MockCookie {
./addons/web/static/lib/hoot/mock/network.js:export class MockDedicatedWorkerGlobalScope {
./addons/web/static/lib/hoot/mock/network.js:                cancelanimationframe: mockedCancelAnimationFrame,
./addons/web/static/lib/hoot/mock/network.js:                requestanimationframe: mockedRequestAnimationFrame,
./addons/web/static/lib/hoot/mock/network.js:export class MockHistory {
./addons/web/static/lib/hoot/mock/network.js:export class MockLocation extends EventTarget {
./addons/web/static/lib/hoot/mock/network.js:export class MockMessagePort extends EventTarget {
./addons/web/static/lib/hoot/mock/network.js:export class MockRequest extends Request {
./addons/web/static/lib/hoot/mock/network.js:        return new MockBlob([getSyncValue(this)]);
./addons/web/static/lib/hoot/mock/network.js:export class MockResponse extends Response {
./addons/web/static/lib/hoot/mock/network.js:        return new MockBlob([getSyncValue(this)]);
./addons/web/static/lib/hoot/mock/network.js:export class MockSharedWorker extends EventTarget {
./addons/web/static/lib/hoot/mock/network.js:        if (!mockWorkerConnection) {
./addons/web/static/lib/hoot/mock/network.js:        this.port = new MockMessagePort(this, execute);
./addons/web/static/lib/hoot/mock/network.js:export class MockURL extends URL {
./addons/web/static/lib/hoot/mock/network.js:        super(url, base || mockLocation);
./addons/web/static/lib/hoot/mock/network.js:export class MockWebSocket extends EventTarget {
./addons/web/static/lib/hoot/mock/network.js:        if (!mockWebSocketConnection) {
./addons/web/static/lib/hoot/mock/network.js:export class MockWorker extends EventTarget {
./addons/web/static/lib/hoot/mock/network.js:        if (!mockWorkerConnection) {
./addons/web/static/lib/hoot/mock/network.js:export class MockXMLHttpRequest extends EventTarget {
./addons/web/static/lib/hoot/mock/network.js:    upload = new MockXMLHttpRequestUpload();
./addons/web/static/lib/hoot/mock/network.js:export class MockXMLHttpRequestUpload extends EventTarget {
./addons/web/static/lib/hoot/mock/network.js:        mockWebSocketConnection(this);
./addons/web/static/lib/hoot/mock/network.js:export const mockCookie = new MockCookie();
./addons/web/static/lib/hoot/mock/network.js:export const mockLocation = new MockLocation();
./addons/web/static/lib/hoot/mock/network.js:export const mockHistory = new MockHistory(mockLocation);
./addons/web/static/lib/hoot/mock/window.js:import { getCurrentDimensions, mockedMatchMedia } from "@web/../lib/hoot-dom/helpers/dom";
./addons/web/static/lib/hoot/mock/window.js:    mockedCancelAnimationFrame,
./addons/web/static/lib/hoot/mock/window.js:    mockedClearInterval,
./addons/web/static/lib/hoot/mock/window.js:    mockedClearTimeout,
./addons/web/static/lib/hoot/mock/window.js:    mockedRequestAnimationFrame,
./addons/web/static/lib/hoot/mock/window.js:    mockedSetInterval,
./addons/web/static/lib/hoot/mock/window.js:    mockedSetTimeout,
./addons/web/static/lib/hoot/mock/window.js:import { MockConsole } from "./console";
./addons/web/static/lib/hoot/mock/window.js:import { MockDate } from "./date";
./addons/web/static/lib/hoot/mock/window.js:import { MockClipboardItem, mockNavigator } from "./navigator";
./addons/web/static/lib/hoot/mock/window.js:    MockBroadcastChannel,
./addons/web/static/lib/hoot/mock/window.js:    MockRequest,
./addons/web/static/lib/hoot/mock/window.js:    MockResponse,
./addons/web/static/lib/hoot/mock/window.js:    MockSharedWorker,
./addons/web/static/lib/hoot/mock/window.js:    MockURL,
./addons/web/static/lib/hoot/mock/window.js:    MockWebSocket,
./addons/web/static/lib/hoot/mock/window.js:    MockWorker,
./addons/web/static/lib/hoot/mock/window.js:    MockXMLHttpRequest,
./addons/web/static/lib/hoot/mock/window.js:    mockCookie,
./addons/web/static/lib/hoot/mock/window.js:    mockHistory,
./addons/web/static/lib/hoot/mock/window.js:    mockedFetch,
./addons/web/static/lib/hoot/mock/window.js:import { MockNotification } from "./notification";
./addons/web/static/lib/hoot/mock/window.js:import { MockStorage } from "./storage";
./addons/web/static/lib/hoot/mock/window.js:import { MockBlob } from "./sync_values";
./addons/web/static/lib/hoot/mock/window.js:function mockedElementFromPoint() {
./addons/web/static/lib/hoot/mock/window.js:    return mockedElementsFromPoint.call(this, ...arguments)[0];
./addons/web/static/lib/hoot/mock/window.js:function mockedElementsFromPoint() {
./addons/web/static/lib/hoot/mock/window.js:const mockConsole = new MockConsole();
./addons/web/static/lib/hoot/mock/window.js:const mockLocalStorage = new MockStorage();
./addons/web/static/lib/hoot/mock/window.js:const mockSessionStorage = new MockStorage();
./addons/web/static/lib/hoot/mock/window.js:let mockTitle = "";
./addons/web/static/lib/hoot/mock/window.js:// Mock descriptors
./addons/web/static/lib/hoot/mock/window.js:        get: () => mockCookie.get(),
./addons/web/static/lib/hoot/mock/window.js:        set: (value) => mockCookie.set(value),
./addons/web/static/lib/hoot/mock/window.js:    elementFromPoint: { value: mockedElementFromPoint },
./addons/web/static/lib/hoot/mock/window.js:    elementsFromPoint: { value: mockedElementsFromPoint },
./addons/web/static/lib/hoot/mock/window.js:        get: () => mockTitle,
./addons/web/static/lib/hoot/mock/window.js:        set: (value) => (mockTitle = value),
./addons/web/static/lib/hoot/mock/window.js:    Blob: { value: MockBlob },
./addons/web/static/lib/hoot/mock/window.js:    BroadcastChannel: { value: MockBroadcastChannel },
./addons/web/static/lib/hoot/mock/window.js:    cancelAnimationFrame: { value: mockedCancelAnimationFrame, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    clearInterval: { value: mockedClearInterval, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    clearTimeout: { value: mockedClearTimeout, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    console: { value: mockConsole, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    ClipboardItem: { value: MockClipboardItem },
./addons/web/static/lib/hoot/mock/window.js:    Date: { value: MockDate, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    fetch: { value: mockedFetch, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    history: { value: mockHistory },
./addons/web/static/lib/hoot/mock/window.js:    localStorage: { value: mockLocalStorage, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    matchMedia: { value: mockedMatchMedia },
./addons/web/static/lib/hoot/mock/window.js:    navigator: { value: mockNavigator },
./addons/web/static/lib/hoot/mock/window.js:    Notification: { value: MockNotification },
./addons/web/static/lib/hoot/mock/window.js:    Request: { value: MockRequest, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    requestAnimationFrame: { value: mockedRequestAnimationFrame, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    Response: { value: MockResponse, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    sessionStorage: { value: mockSessionStorage, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    setInterval: { value: mockedSetInterval, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    setTimeout: { value: mockedSetTimeout, writable: false },
./addons/web/static/lib/hoot/mock/window.js:    SharedWorker: { value: MockSharedWorker },
./addons/web/static/lib/hoot/mock/window.js:    URL: { value: MockURL },
./addons/web/static/lib/hoot/mock/window.js:    WebSocket: { value: MockWebSocket },
./addons/web/static/lib/hoot/mock/window.js:    Worker: { value: MockWorker },
./addons/web/static/lib/hoot/mock/window.js:    XMLHttpRequest: { value: MockXMLHttpRequest },
./addons/web/static/lib/hoot/mock/window.js:    mockLocalStorage.clear();
./addons/web/static/lib/hoot/mock/window.js:    mockSessionStorage.clear();
./addons/web/static/lib/hoot/mock/window.js:    mockTitle = "";
./addons/web/static/lib/hoot/mock/window.js:export function mockTouch(setTouch, { Document, HTMLElement, SVGElement } = globalThis) {
./addons/web/static/lib/hoot/mock/window.js:        proto.addEventListener = function mockedAddEventListener(...args) {
./addons/web/static/lib/hoot/mock/notification.js:/** @type {Set<MockNotification>} */
./addons/web/static/lib/hoot/mock/notification.js: * @returns {MockNotification[]}
./addons/web/static/lib/hoot/mock/notification.js:export class MockNotification extends EventTarget {
./addons/web/static/lib/hoot/mock/sync_values.js:export class MockBlob extends Blob {
./addons/web/static/lib/hoot/mock/storage.js:export class MockStorage {
./addons/web/static/lib/hoot/mock/console.js:export class MockConsole extends EventTarget {
./addons/web/static/lib/hoot/mock/date.js: * Mocks the current date and time, and also the time zone if any.
./addons/web/static/lib/hoot/mock/date.js: * Date can either be an object describing the date and time to mock, or a
./addons/web/static/lib/hoot/mock/date.js: * @see {@link mockTimeZone} for the time zone params.
./addons/web/static/lib/hoot/mock/date.js: *  mockDate("2023-12-25T20:45:00"); // 2023-12-25 20:45:00 UTC
./addons/web/static/lib/hoot/mock/date.js: *  mockDate({ year: 2023, month: 12, day: 25, hour: 20, minute: 45 }); // same as above
./addons/web/static/lib/hoot/mock/date.js: *  mockDate("2019-02-11 09:30:00.001", +2);
./addons/web/static/lib/hoot/mock/date.js:export function mockDate(date, tz) {
./addons/web/static/lib/hoot/mock/date.js:        mockTimeZone(tz);
./addons/web/static/lib/hoot/mock/date.js: * Mocks the current time zone.
./addons/web/static/lib/hoot/mock/date.js: *  mockTimeZone(+1); // UTC + 1
./addons/web/static/lib/hoot/mock/date.js: *  mockTimeZone("Europe/Brussels"); // UTC + 1 (or UTC + 2 in summer)
./addons/web/static/lib/hoot/mock/date.js: *  mockTimeZone("ja-JP"); // UTC + 9
./addons/web/static/lib/hoot/mock/date.js:export function mockTimeZone(tz) {
./addons/web/static/lib/hoot/mock/date.js:    mockTimeZone.onCall?.(tz);
./addons/web/static/lib/hoot/mock/date.js:export class MockDate extends Date {
./addons/web/static/lib/hoot/mock/date.js:        return new MockDate().getTime();
./addons/web/static/lib/hoot/mock/navigator.js:import { createMock, HootError, makePublicListeners, MIME_TYPE } from "../hoot_utils";
./addons/web/static/lib/hoot/mock/navigator.js:const getMockValues = () => ({
./addons/web/static/lib/hoot/mock/navigator.js:        throw new HootError(`Unmocked navigator method: ${fnName}`);
./addons/web/static/lib/hoot/mock/navigator.js:/** @type {Set<MockPermissionStatus>} */
./addons/web/static/lib/hoot/mock/navigator.js:const mockValues = getMockValues();
./addons/web/static/lib/hoot/mock/navigator.js:export class MockClipboard {
./addons/web/static/lib/hoot/mock/navigator.js:export class MockClipboardItem extends ClipboardItem {
./addons/web/static/lib/hoot/mock/navigator.js:export class MockPermissions {
./addons/web/static/lib/hoot/mock/navigator.js:        return new MockPermissionStatus(name);
./addons/web/static/lib/hoot/mock/navigator.js:export class MockPermissionStatus extends EventTarget {
./addons/web/static/lib/hoot/mock/navigator.js:export const mockClipboard = new MockClipboard();
./addons/web/static/lib/hoot/mock/navigator.js:export const mockPermissions = new MockPermissions();
./addons/web/static/lib/hoot/mock/navigator.js:export const mockNavigator = createMock(navigator, {
./addons/web/static/lib/hoot/mock/navigator.js:    clipboard: { value: mockClipboard },
./addons/web/static/lib/hoot/mock/navigator.js:    permissions: { value: mockPermissions },
./addons/web/static/lib/hoot/mock/navigator.js:    sendBeacon: { get: () => mockValues.sendBeacon },
./addons/web/static/lib/hoot/mock/navigator.js:    userAgent: { get: () => mockValues.userAgent },
./addons/web/static/lib/hoot/mock/navigator.js:    vibrate: { get: () => mockValues.vibrate },
./addons/web/static/lib/hoot/mock/navigator.js:    $assign(mockValues, getMockValues());
./addons/web/static/lib/hoot/mock/navigator.js:export function mockPermission(name, value) {
./addons/web/static/lib/hoot/mock/navigator.js:export function mockSendBeacon(callback) {
./addons/web/static/lib/hoot/mock/navigator.js:    mockValues.sendBeacon = callback;
./addons/web/static/lib/hoot/mock/navigator.js:export function mockUserAgent(platform = "linux") {
./addons/web/static/lib/hoot/mock/navigator.js:    mockValues.userAgent = makeUserAgent(platform);
./addons/web/static/lib/hoot/mock/navigator.js:export function mockVibrate(callback) {
./addons/web/static/lib/hoot/mock/navigator.js:    mockValues.vibrate = callback;
./addons/web/static/lib/hoot/tests/ui/hoot_technical_value.test.js:import { animationFrame, Deferred } from "@odoo/hoot-mock";
./addons/web/static/lib/hoot/tests/mock/navigator.test.js:import { mockSendBeacon, mockTouch, mockVibrate } from "@odoo/hoot-mock";
./addons/web/static/lib/hoot/tests/mock/navigator.test.js:        mockTouch(false);
./addons/web/static/lib/hoot/tests/mock/navigator.test.js:        mockTouch(true);
./addons/web/static/lib/hoot/tests/mock/navigator.test.js:        mockSendBeacon(expect.step);
./addons/web/static/lib/hoot/tests/mock/navigator.test.js:        mockVibrate(expect.step);
./addons/web/static/lib/hoot/tests/mock/network.test.js:import { mockFetch } from "@odoo/hoot-mock";
./addons/web/static/lib/hoot/tests/mock/network.test.js:    test("fetch should not mock internal URLs", async () => {
./addons/web/static/lib/hoot/tests/mock/network.test.js:        mockFetch(expect.step);
./addons/web/static/lib/hoot/tests/mock/window.test.js:import { watchListeners } from "@odoo/hoot-mock";
./addons/web/static/lib/hoot/tests/mock/window.test.js:    test("elementFromPoint and elementsFromPoint should be mocked", async () => {
./addons/web/static/lib/hoot/tests/hoot-dom/time.test.js:import { Deferred, advanceTime, runAllTimers, tick } from "@odoo/hoot-mock";
./addons/web/static/lib/hoot/tests/hoot-dom/time.test.js:// timeout of 1 second to ensure all timeouts are actually mocked
./addons/web/static/lib/hoot/tests/hoot-dom/dom.test.js:import { animationFrame, mockTouch } from "@odoo/hoot-mock";
./addons/web/static/lib/hoot/tests/hoot-dom/dom.test.js:        mockTouch(true);
./addons/web/static/lib/hoot/tests/hoot-dom/events.test.js:import { advanceTime, animationFrame, mockFetch, mockTouch, mockUserAgent } from "@odoo/hoot-mock";
./addons/web/static/lib/hoot/tests/hoot-dom/events.test.js:        mockTouch(false);
./addons/web/static/lib/hoot/tests/hoot-dom/events.test.js:        mockTouch(false);
./addons/web/static/lib/hoot/tests/hoot-dom/events.test.js:        mockTouch(true);
./addons/web/static/lib/hoot/tests/hoot-dom/events.test.js:    test("form submissions are redirected to mocked fetch", async () => {
./addons/web/static/lib/hoot/tests/hoot-dom/events.test.js:        mockFetch((url, { body, method }) => {
./addons/web/static/lib/hoot/tests/hoot-dom/events.test.js:        mockUserAgent("windows");
./addons/web/static/lib/hoot/tests/hoot-dom/events.test.js:        mockUserAgent("mac");
./addons/web/static/lib/hoot/tests/index.html:                    "@odoo/hoot-mock": "/web/static/lib/hoot/hoot-mock.js",
./addons/web/static/lib/hoot/tests/index.html:                    "/web/static/lib/hoot/hoot-mock": "/web/static/lib/hoot/hoot-mock.js",
./addons/web/static/lib/hoot/tests/index.html:                    "/web/static/lib/hoot/mock/console": "/web/static/lib/hoot/mock/console.js",
./addons/web/static/lib/hoot/tests/index.html:                    "/web/static/lib/hoot/mock/date": "/web/static/lib/hoot/mock/date.js",
./addons/web/static/lib/hoot/tests/index.html:                    "/web/static/lib/hoot/mock/math": "/web/static/lib/hoot/mock/math.js",
./addons/web/static/lib/hoot/tests/index.html:                    "/web/static/lib/hoot/mock/navigator": "/web/static/lib/hoot/mock/navigator.js",
./addons/web/static/lib/hoot/tests/index.html:                    "/web/static/lib/hoot/mock/network": "/web/static/lib/hoot/mock/network.js",
./addons/web/static/lib/hoot/tests/index.html:                    "/web/static/lib/hoot/mock/notification": "/web/static/lib/hoot/mock/notification.js",
./addons/web/static/lib/hoot/tests/index.html:                    "/web/static/lib/hoot/mock/storage": "/web/static/lib/hoot/mock/storage.js",
./addons/web/static/lib/hoot/tests/index.html:                    "/web/static/lib/hoot/mock/sync_values": "/web/static/lib/hoot/mock/sync_values.js",
./addons/web/static/lib/hoot/tests/index.html:                    "/web/static/lib/hoot/mock/window": "/web/static/lib/hoot/mock/window.js",
./addons/web/static/lib/hoot/tests/index.js:import "./mock/navigator.test.js";
./addons/web/static/lib/hoot/tests/index.js:import "./mock/network.test.js";
./addons/web/static/lib/hoot/tests/index.js:import "./mock/window.test.js";
./addons/web/static/lib/hoot/hoot-mock.js:/** @odoo-module alias=@odoo/hoot-mock default=false */
./addons/web/static/lib/hoot/hoot-mock.js: * @typedef {import("./mock/network").ServerWebSocket} ServerWebSocket
./addons/web/static/lib/hoot/hoot-mock.js:export { mockDate, mockTimeZone } from "./mock/date";
./addons/web/static/lib/hoot/hoot-mock.js:export { makeSeededRandom } from "./mock/math";
./addons/web/static/lib/hoot/hoot-mock.js:export { mockPermission, mockSendBeacon, mockUserAgent, mockVibrate } from "./mock/navigator";
./addons/web/static/lib/hoot/hoot-mock.js:export { mockFetch, mockLocation, mockWebSocket, mockWorker } from "./mock/network";
./addons/web/static/lib/hoot/hoot-mock.js:export { flushNotifications } from "./mock/notification";
./addons/web/static/lib/hoot/hoot-mock.js:export { mockTouch, watchKeys, watchListeners } from "./mock/window";
./addons/web/static/lib/hoot/core/runner.js:import { cleanupDate } from "../mock/date";
./addons/web/static/lib/hoot/core/runner.js:import { internalRandom } from "../mock/math";
./addons/web/static/lib/hoot/core/runner.js:import { cleanupNavigator, mockUserAgent } from "../mock/navigator";
./addons/web/static/lib/hoot/core/runner.js:import { cleanupNetwork } from "../mock/network";
./addons/web/static/lib/hoot/core/runner.js:import { cleanupWindow, getViewPortHeight, getViewPortWidth, mockTouch } from "../mock/window";
./addons/web/static/lib/hoot/core/runner.js: *  platform?: import("../mock/navigator").Platform;
./addons/web/static/lib/hoot/core/runner.js:                mockUserAgent(preset.platform);
./addons/web/static/lib/hoot/core/runner.js:                mockTouch(preset.touch);
./addons/web/static/lib/hoot/core/config.js:import { generateSeed } from "../mock/math";
./addons/web/static/lib/hoot/core/config.js:     * Amount of frames rendered per second, used when mocking animation frames.
./addons/web/static/src/model/sample_server.js:        // it to the first "mockRPC" call. These flags allow us to know if
./addons/web/static/src/model/sample_server.js:     * This is the main entry point of the SampleServer. Mocks a request to
./addons/web/static/src/model/sample_server.js:    mockRpc(params) {
./addons/web/static/src/model/sample_server.js:                return this._mockWebSearchReadUnity(params);
./addons/web/static/src/model/sample_server.js:                return this._mockWebReadGroup(params);
./addons/web/static/src/model/sample_server.js:                return this._mockFormattedReadGroup(params);
./addons/web/static/src/model/sample_server.js:                return this._mockReadProgressBar(params);
./addons/web/static/src/model/sample_server.js:                return this._mockRead(params);
./addons/web/static/src/model/sample_server.js:        // this rpc can't be mocked by the SampleServer itself, so check if there is an handler
./addons/web/static/src/model/sample_server.js:        // This allows to register mock version of methods or routes,
./addons/web/static/src/model/sample_server.js:        const mockFunction =
./addons/web/static/src/model/sample_server.js:        if (mockFunction) {
./addons/web/static/src/model/sample_server.js:            return mockFunction.call(this, params);
./addons/web/static/src/model/sample_server.js:     * Mocks calls to the read method.
./addons/web/static/src/model/sample_server.js:    _mockRead(params) {
./addons/web/static/src/model/sample_server.js:     * Mocks calls to the base method of formatted_read_group method.
./addons/web/static/src/model/sample_server.js:    _mockFormattedReadGroup(params) {
./addons/web/static/src/model/sample_server.js:     * Mocks calls to the read_progress_bar method.
./addons/web/static/src/model/sample_server.js:    _mockReadProgressBar(params) {
./addons/web/static/src/model/sample_server.js:        const groups = this._mockFormattedReadGroup({
./addons/web/static/src/model/sample_server.js:    _mockWebSearchReadUnity(params) {
./addons/web/static/src/model/sample_server.js:                records: this._mockRead({
./addons/web/static/src/model/sample_server.js:            const records = this._mockRead({
./addons/web/static/src/model/sample_server.js:                    const _relRecords = this._mockRead({
./addons/web/static/src/model/sample_server.js:     * Mocks calls to the web_read_group method to return groups populated
./addons/web/static/src/model/sample_server.js:    _mockWebReadGroup(params) {
./addons/web/static/src/model/sample_server.js:            groups = this._mockFormattedReadGroup(params);
./addons/web/static/src/model/sample_server.js:        return sampleServer.mockRpc({ method, model, args, ...kwargs, groupBy });
./addons/web/static/src/@types/hoot.d.ts:declare module "@odoo/hoot-mock" {
./addons/web/static/src/@types/hoot.d.ts:    export * from "@web/../lib/hoot/hoot-mock";
./addons/web/static/src/core/utils/hooks.js:    mocked() {
./addons/web/static/src/core/errors/error_utils.js:    // Error: Mock: Can't write value
./addons/web/static/src/core/file_upload/file_upload_service.js:     * Overridden during tests to return a mocked XHR.
./addons/web/tests/test_reports.py:from unittest.mock import Mock, patch
./addons/web/tests/test_reports.py:from odoo.addons.website.tools import MockRequest
./addons/web/tests/test_reports.py:        with MockRequest(report.env) as mock_request:
./addons/web/tests/test_reports.py:            mock_request.session = self.authenticate(admin.login, admin.login)
./addons/web/tests/test_reports.py:        with MockRequest(self.env) as mock_request:
./addons/web/tests/test_reports.py:            mock_request.session = self.authenticate(None, None)
./addons/web/tests/test_reports.py:        with (MockRequest(report.env) as mock_request,
./addons/web/tests/test_reports.py:            patch('subprocess.Popen') as mock_popen,
./addons/web/tests/test_reports.py:            patch.object(root.session_store, 'delete') as mock_delete,
./addons/web/tests/test_reports.py:            patch.object(os, 'unlink') as mock_unlink):
./addons/web/tests/test_reports.py:            mock_request.session = self.authenticate(admin.login, admin.login)
./addons/web/tests/test_reports.py:            mock_process = Mock()
./addons/web/tests/test_reports.py:            mock_process.returncode = -1
./addons/web/tests/test_reports.py:            mock_process.communicate.return_value = ("output", "")
./addons/web/tests/test_reports.py:            mock_popen.return_value = mock_process
./addons/web/tests/test_reports.py:            self.assertEqual(mock_delete.call_count, 1)
./addons/web/tests/test_reports.py:            self.assertNotEqual(mock_delete.call_args.args[0].sid, mock_request.session.sid)
./addons/web/tests/test_reports.py:            deleted_files = ''.join([call.args[0] for call in mock_unlink.call_args_list])
./addons/web/tests/test_assets.py:from unittest.mock import patch
./addons/web/tests/test_web_search_read.py:from unittest.mock import patch
./addons/web/tests/test_profiler.py:from unittest.mock import patch
./addons/web/tests/test_db_manager.py:from unittest.mock import patch
./addons/web/tests/test_click_everywhere.py:        # mock odoofin requests
./addons/web/tests/test_health.py:from unittest.mock import patch
./addons/web/__manifest__.py:            # Odoo mocks
./addons/web/__manifest__.py:            'web/static/tests/_framework/mock_module_loader.js',
./addons/web/__manifest__.py:            ('remove', 'web/static/tests/_framework/mock_module_loader.js'),
./addons/web/__manifest__.py:            'web/static/tests/legacy/mock_server_tests.js',
./addons/test_html_field_history/tests/test_model.py:                "versioned_field_1": "mock content",
./addons/test_html_field_history/tests/test_model.py:                "versioned_field_1": "mock content 2",
./addons/test_html_field_history/tests/test_model.py:                "versioned_field_1": "mock content 3",
./addons/test_html_field_history/tests/test_model.py:                "versioned_field_2": "mock content",
./addons/test_html_field_history/tests/test_model.py:                    "versioned_field_2": "mock content 2",
./addons/test_html_field_history/tests/test_model.py:                "versioned_field_1": "mock content",
./addons/payment_asiapay/tests/test_payment_transaction.py:from unittest.mock import patch
./addons/payment_asiapay/tests/test_processing_flows.py:from unittest.mock import patch
./addons/payment_asiapay/tests/test_processing_flows.py:        ) as handle_notification_data_mock:
./addons/payment_asiapay/tests/test_processing_flows.py:        self.assertEqual(handle_notification_data_mock.call_count, 1)
./addons/payment_asiapay/tests/test_processing_flows.py:        ) as signature_check_mock, patch(
./addons/payment_asiapay/tests/test_processing_flows.py:            self.assertEqual(signature_check_mock.call_count, 1)
./addons/web_tour/static/tests/tour_recorder.test.js:import { animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/web_tour/static/tests/tour_automatic.test.js:import { advanceTime, runAllTimers } from "@odoo/hoot-mock";
./addons/web_tour/static/tests/tour_automatic.test.js:    makeMockEnv,
./addons/web_tour/static/tests/tour_automatic.test.js:    await makeMockEnv({});
./addons/web_tour/static/tests/tour_automatic.test.js:    await makeMockEnv();
./addons/web_tour/static/tests/tour_automatic.test.js:    await makeMockEnv();
./addons/web_tour/static/tests/tour_automatic.test.js:    await makeMockEnv();
./addons/web_tour/static/tests/tour_interactive.test.js:import { advanceTime, animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/google_calendar/static/tests/google_calendar_mock_server.js:import { MockServer } from "@web/../tests/helpers/mock_server";
./addons/google_calendar/static/tests/google_calendar_mock_server.js:patch(MockServer.prototype, {
./addons/google_calendar/static/tests/google_calendar_tests.js:import { patchUserWithCleanup } from "@web/../tests/helpers/mock_services";
./addons/google_calendar/static/tests/google_calendar_tests.js:            mockRPC: async function (route, args) {
./addons/google_calendar/static/tests/google_calendar_tests.js:            async mockRPC(route, args) {
./addons/google_calendar/tests/test_sync_odoo2google_mail.py:from unittest.mock import patch
./addons/google_calendar/tests/test_sync_odoo2google_mail.py:                with self.mock_mail_gateway(), self.mock_google_sync(user_id=responsible):
./addons/google_calendar/tests/test_sync_common.py:from unittest.mock import patch
./addons/google_calendar/tests/test_sync_common.py:        with self.mock_google_sync():
./addons/google_calendar/tests/test_sync_common.py:    def mock_datetime_and_now(self, mock_dt):
./addons/google_calendar/tests/test_sync_common.py:        in addition to standard datetime mocks. Used mainly to detect sync
./addons/google_calendar/tests/test_sync_common.py:        with freeze_time(mock_dt), \
./addons/google_calendar/tests/test_sync_common.py:                patch.object(self.env.cr, 'now', lambda: mock_dt):
./addons/google_calendar/tests/test_sync_common.py:    def mock_google_sync(self, user_id=None):
./addons/google_calendar/tests/test_sync_common.py:        def _mock_delete(model, service, google_id, **kwargs):
./addons/google_calendar/tests/test_sync_common.py:        def _mock_insert(model, service, values, **kwargs):
./addons/google_calendar/tests/test_sync_common.py:        def _mock_patch(model, service, google_id, values, **kwargs):
./addons/google_calendar/tests/test_sync_common.py:             patch.object(GoogleCalendarSync, '_google_insert', autospec=True, wraps=GoogleCalendarSync, side_effect=_mock_insert), \
./addons/google_calendar/tests/test_sync_common.py:             patch.object(GoogleCalendarSync, '_google_delete', autospec=True, wraps=GoogleCalendarSync, side_effect=_mock_delete), \
./addons/google_calendar/tests/test_sync_common.py:             patch.object(GoogleCalendarSync, '_google_patch', autospec=True, wraps=GoogleCalendarSync, side_effect=_mock_patch):
./addons/google_calendar/tests/test_sync_common.py:    def mock_google_service(self):
./addons/google_calendar/tests/test_sync_common.py:        def _mock_do_request(model, uri, *args, **kwargs):
./addons/google_calendar/tests/test_sync_common.py:        with patch.object(GoogleService, '_do_request', autospec=True, wraps=GoogleService, side_effect=_mock_do_request):
./addons/google_calendar/tests/test_sync_google2odoo.py:from unittest.mock import patch
./addons/google_calendar/tests/test_sync_google2odoo.py:    def generate_recurring_event(self, mock_dt, **values):
./addons/google_calendar/tests/test_sync_google2odoo.py:        """ Function Used to return a recurrence created at fake time of 'mock_dt'. """
./addons/google_calendar/tests/test_sync_google2odoo.py:        with self.mock_datetime_and_now(mock_dt):
./addons/google_calendar/tests/test_sync_google2odoo.py:        with self.mock_datetime_and_now("2024-06-07"):
./addons/google_calendar/tests/test_sync_google2odoo.py:        with self.mock_datetime_and_now("2024-06-10"):
./addons/google_calendar/tests/test_sync_google2odoo.py:    def test_accepting_recurrent_event_with_this_event_option_synced_by_attendee(self, mock_get_events):
./addons/google_calendar/tests/test_sync_google2odoo.py:            mock_dt="2024-04-20",
./addons/google_calendar/tests/test_sync_google2odoo.py:        mock_get_events.return_value = (
./addons/google_calendar/tests/test_sync_google2odoo.py:        with self.mock_datetime_and_now("2024-04-22"):
./addons/google_calendar/tests/test_sync_google2odoo.py:    def test_accepting_recurrent_event_with_this_event_option_synced_by_organizer(self, mock_get_events):
./addons/google_calendar/tests/test_sync_google2odoo.py:            mock_dt="2024-04-20",
./addons/google_calendar/tests/test_sync_google2odoo.py:        mock_get_events.return_value = (
./addons/google_calendar/tests/test_sync_google2odoo.py:        with self.mock_datetime_and_now("2024-04-22"):
./addons/google_calendar/tests/test_sync_google2odoo.py:    def test_accepting_recurrent_event_with_all_events_option_synced_by_attendee(self, mock_get_events):
./addons/google_calendar/tests/test_sync_google2odoo.py:            mock_dt="2024-04-20",
./addons/google_calendar/tests/test_sync_google2odoo.py:        mock_get_events.return_value = (
./addons/google_calendar/tests/test_sync_google2odoo.py:        with self.mock_datetime_and_now("2024-04-22"):
./addons/google_calendar/tests/test_sync_google2odoo.py:    def test_accepting_recurrent_event_with_all_events_option_synced_by_organizer(self, mock_get_events):
./addons/google_calendar/tests/test_sync_google2odoo.py:            mock_dt="2024-04-20",
./addons/google_calendar/tests/test_sync_google2odoo.py:        mock_get_events.return_value = (
./addons/google_calendar/tests/test_sync_google2odoo.py:        with self.mock_datetime_and_now("2024-04-22"):
./addons/google_calendar/tests/test_sync_google2odoo.py:    def test_accepting_recurrent_event_with_following_events_option_synced_by_attendee(self, mock_get_events):
./addons/google_calendar/tests/test_sync_google2odoo.py:            mock_dt="2024-04-20",
./addons/google_calendar/tests/test_sync_google2odoo.py:        mock_get_events.return_value = (
./addons/google_calendar/tests/test_sync_google2odoo.py:        with self.mock_datetime_and_now("2024-04-22"):
./addons/google_calendar/tests/test_sync_google2odoo.py:    def test_accepting_recurrent_event_with_all_following_option_synced_by_organizer(self, mock_get_events):
./addons/google_calendar/tests/test_sync_google2odoo.py:            mock_dt="2024-04-20",
./addons/google_calendar/tests/test_sync_google2odoo.py:        mock_get_events.return_value = (
./addons/google_calendar/tests/test_sync_google2odoo.py:        with self.mock_datetime_and_now("2024-04-22"):
./addons/google_calendar/tests/test_sync_google2odoo.py:            mock_dt="2024-04-10",
./addons/google_calendar/tests/test_sync_odoo2google.py:from unittest.mock import patch
./addons/google_calendar/tests/test_sync_odoo2google.py:        with self.mock_google_service():
./addons/google_calendar/tests/test_sync_odoo2google.py:        with self.mock_google_service():
./addons/google_calendar/tests/test_sync_odoo2google.py:    def test_event_sync_after_pause_period(self, mock_sync_request):
./addons/google_calendar/tests/test_sync_odoo2google.py:        # Define mock return values for the '_sync_request' method.
./addons/google_calendar/tests/test_sync_odoo2google.py:        mock_sync_request.return_value = {
./addons/gamification/tests/test_karma_tracking.py:from unittest.mock import patch
./addons/gamification/models/gamification_challenge.py:                for ranking, mock_goal in enumerate([{'id': False,
./addons/gamification/models/gamification_challenge.py:                    mock_goal['rank'] = ranking
./addons/gamification/models/gamification_challenge.py:                    line_data['goals'].append(mock_goal)
./addons/iot_box_image/configuration/packages.txt:python3-mock
./addons/base_import_module/tests/test_import_module.py:from unittest.mock import patch
./addons/test_website/static/tests/tours/image_upload_progress.js:        content: "click on unsplash result", // note that unsplash is mocked
./addons/test_website/static/tests/tours/image_upload_progress.js:        content: "unsplash image (mocked to logo) should have been used",
./addons/test_website/static/tests/tours/snippet_background_video.js:                // TODO we should investigate to rather mock the external calls,
./addons/test_website/tests/test_redirect.py:from unittest.mock import patch
./addons/test_website/tests/test_fuzzy.py:from odoo.addons.website.tools import MockRequest
./addons/test_website/tests/test_fuzzy.py:        with MockRequest(self.env, website=self.website):
./addons/test_website/tests/test_fuzzy.py:        with MockRequest(self.env, website=self.env['website'].browse(1)):
./addons/test_website/tests/test_views_during_module_operation.py:from odoo.addons.website.tools import MockRequest
./addons/test_website/tests/test_views_during_module_operation.py:    with MockRequest(env, website=website_1):
./addons/test_website/tests/test_controller_args.py:from unittest.mock import patch
./addons/test_website/tests/test_session.py:from unittest.mock import patch
./addons/mail_group/tests/test_mail_group_mailing.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/mail_group/tests/test_mail_group_moderation.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_moderation.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_moderation.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_moderation.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_moderation.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_moderation.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_moderation.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_moderation.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_moderation.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_moderation.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_moderation.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_moderation.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_message.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_message.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_message.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_message.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_message.py:        with self.mock_mail_gateway():
./addons/mail_group/tests/test_mail_group_message.py:        with self.mock_mail_gateway():
./addons/product_margin/tests/test_product_margin.py:from unittest.mock import patch
./addons/payment_demo/tests/test_payment_transaction.py:from unittest.mock import patch
./addons/payment_demo/tests/test_payment_transaction.py:        ) as tokenize_mock:
./addons/payment_demo/tests/test_payment_transaction.py:        self.assertEqual(tokenize_mock.call_count, 1)
./addons/payment_demo/tests/test_processing_flows.py:from unittest.mock import patch
./addons/payment_demo/tests/test_processing_flows.py:        ) as handle_notification_data_mock:
./addons/payment_demo/tests/test_processing_flows.py:        self.assertEqual(handle_notification_data_mock.call_count, 1)
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:from unittest.mock import patch
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:def mocked_action_post_sign_invoices(self):
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:def mocked_l10n_eg_edi_post_invoice_web_service(self, invoice):
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_action_post_sign_invoices,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_l10n_eg_edi_post_invoice_web_service,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_action_post_sign_invoices,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_l10n_eg_edi_post_invoice_web_service,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_action_post_sign_invoices,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_l10n_eg_edi_post_invoice_web_service,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_action_post_sign_invoices,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_l10n_eg_edi_post_invoice_web_service,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_action_post_sign_invoices,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_l10n_eg_edi_post_invoice_web_service,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_action_post_sign_invoices,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_l10n_eg_edi_post_invoice_web_service,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_action_post_sign_invoices,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_l10n_eg_edi_post_invoice_web_service,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_action_post_sign_invoices,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_l10n_eg_edi_post_invoice_web_service,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_action_post_sign_invoices,
./addons/l10n_eg_edi_eta/tests/test_edi_json.py:            new=mocked_l10n_eg_edi_post_invoice_web_service,
./addons/partner_autocomplete/static/tests/partner_autocomplete_tests.js:        async mockRPC(route, args) {
./addons/partner_autocomplete/tests/test_res_company.py:from odoo.addons.partner_autocomplete.tests.common import MockIAPPartnerAutocomplete
./addons/partner_autocomplete/tests/test_res_company.py:class TestResCompany(common.TransactionCase, MockIAPPartnerAutocomplete):
./addons/partner_autocomplete/tests/test_res_company.py:        cls._init_mock_partner_autocomplete()
./addons/partner_autocomplete/tests/test_res_company.py:        with self.mockPartnerAutocomplete():
./addons/partner_autocomplete/tests/test_res_company.py:        with self.mockPartnerAutocomplete():
./addons/partner_autocomplete/tests/test_res_company.py:            # asserts are synchronized with default mock values
./addons/partner_autocomplete/tests/common.py:from unittest.mock import patch
./addons/partner_autocomplete/tests/common.py:class MockIAPPartnerAutocomplete(common.BaseCase):
./addons/partner_autocomplete/tests/common.py:    """ Mock PartnerAutocomplete IAP calls for testing purpose.
./addons/partner_autocomplete/tests/common.py:    def _init_mock_partner_autocomplete(cls):
./addons/partner_autocomplete/tests/common.py:    def mockPartnerAutocomplete(self, default_data=None, sim_error=None):
./addons/partner_autocomplete/tests/common.py:            # mock enrich only currently, to update further
./addons/stock/static/tests/inventory_report_list_tests.js:function mockRPC(route, { args }) {
./addons/stock/static/tests/inventory_report_list_tests.js:            mockRPC: mockRPC,
./addons/stock/static/tests/inventory_report_list_tests.js:            mockRPC: mockRPC,
./addons/stock/static/tests/inventory_report_list_tests.js:            mockRPC: mockRPC,
./addons/stock/static/tests/stock_traceability_report_backend_tests.js:            mockRPC: async function (route) {
./addons/stock/tests/test_quant.py:from unittest.mock import patch
./addons/resource/static/tests/resource_test_helpers.js:import { ResourceTask } from "./mock_server/mock_models/resource_task";
./addons/resource/static/tests/resource_test_helpers.js:import { ResourceResource } from "./mock_server/mock_models/resource_resource";
./addons/hr_skills/static/tests/hr_skills_test_helpers.js:import { HrEmployeeSkill } from "./mock_server/mock_models/hr_employee_skill";
./addons/hr_skills/static/tests/hr_skills_test_helpers.js:import { HrSkill } from "./mock_server/mock_models/hr_skill";
./addons/hr_skills/static/tests/hr_skills_test_helpers.js:import { M2oAvatarEmployee } from "./mock_server/mock_models/m2o_avatar_employee";
./addons/bus/static/tests/mock_server/bus_mock_server.js:registry.category("mock_rpc").add("/bus/get_autovacuum_info", () => ({
./addons/bus/static/tests/mock_server/mock_models/ir_websocket.js:        /** @type {import("mock_models").ResPartner} */
./addons/bus/static/tests/mock_server/mock_models/@types/mock_models.d.ts:declare module "mock_models" {
./addons/bus/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { BusBus as BusBus2 } from "@bus/../tests/mock_server/mock_models/bus_bus";
./addons/bus/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { IrWebSocket as IrWebSocket2 } from "@bus/../tests/mock_server/mock_models/ir_websocket";
./addons/bus/static/tests/mock_server/mock_models/bus_bus.js:import { MockServer, models } from "@web/../tests/web_test_helpers";
./addons/bus/static/tests/mock_server/mock_models/bus_bus.js:import { patchWebsocketWorkerWithCleanup } from "../../mock_websocket";
./addons/bus/static/tests/mock_server/mock_models/bus_bus.js:        if (MockServer.current) {
./addons/bus/static/tests/mock_server/mock_models/bus_bus.js:        for (const fn of registry.category("mock_server_websocket_callbacks").get(event_name, [])) {
./addons/bus/static/tests/mock_server/mock_models/bus_bus.js:        /** @type {import("mock_models").IrWebSocket} */
./addons/bus/static/tests/mock_websocket.js:class WebSocketMock extends EventTarget {
./addons/bus/static/tests/mock_websocket.js:class SharedWorkerMock extends EventTarget {
./addons/bus/static/tests/mock_websocket.js:class WorkerMock extends SharedWorkerMock {
./addons/bus/static/tests/mock_websocket.js:        WebSocket: WebSocketMock,
./addons/bus/static/tests/mock_websocket.js:            const sharedWorker = new SharedWorkerMock(websocketWorker);
./addons/bus/static/tests/mock_websocket.js:            const worker = new WorkerMock(websocketWorker);
./addons/bus/static/tests/simple_notification.test.js:    makeMockEnv,
./addons/bus/static/tests/simple_notification.test.js:    MockServer,
./addons/bus/static/tests/simple_notification.test.js:    MockServer.current.env["bus.bus"]._sendone(serverState.partnerId, "simple_notification", {
./addons/bus/static/tests/simple_notification.test.js:    MockServer.current.env["bus.bus"]._sendone(serverState.partnerId, "simple_notification", {
./addons/bus/static/tests/simple_notification.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/simple_notification.test.js:    MockServer.current.env["bus.bus"]._sendone(serverState.partnerId, "simple_notification", {
./addons/bus/static/tests/bus_test_helpers.js:import { Deferred } from "@odoo/hoot-mock";
./addons/bus/static/tests/bus_test_helpers.js:    MockServer,
./addons/bus/static/tests/bus_test_helpers.js:import { BusBus } from "./mock_server/mock_models/bus_bus";
./addons/bus/static/tests/bus_test_helpers.js:import { IrWebSocket } from "./mock_server/mock_models/ir_websocket";
./addons/bus/static/tests/bus_test_helpers.js:import { patchWebsocketWorkerWithCleanup } from "./mock_websocket";
./addons/bus/static/tests/bus_test_helpers.js:        .category("mock_server_websocket_callbacks")
./addons/bus/static/tests/bus_test_helpers.js:    registry.category("mock_server_websocket_callbacks").add(eventName, callbacks, { force: true });
./addons/bus/static/tests/bus_test_helpers.js:    registry.category("mock_server_websocket_callbacks").get(eventName, new Set()).delete(cb);
./addons/bus/static/tests/bus_test_helpers.js:    const { env } = MockServer;
./addons/bus/static/tests/multi_tab_service.test.js:    makeMockEnv,
./addons/bus/static/tests/multi_tab_service.test.js:    const firstTabEnv = await makeMockEnv();
./addons/bus/static/tests/multi_tab_service.test.js:    const secondTabEnv = await makeMockEnv(null, { makeNew: true });
./addons/bus/static/tests/multi_tab_service.test.js:    const firstTabEnv = await makeMockEnv();
./addons/bus/static/tests/multi_tab_service.test.js:    const secondTabEnv = await makeMockEnv(null, { makeNew: true });
./addons/bus/static/tests/multi_tab_service.test.js:    const firstTabEnv = await makeMockEnv();
./addons/bus/static/tests/multi_tab_service.test.js:    const secondTabEnv = await makeMockEnv(null, { makeNew: true });
./addons/bus/static/tests/bus_monitoring_service.test.js:    makeMockEnv,
./addons/bus/static/tests/bus_monitoring_service.test.js:    MockServer,
./addons/bus/static/tests/bus_monitoring_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_monitoring_service.test.js:    MockServer.env["bus.bus"]._simulateDisconnection(WEBSOCKET_CLOSE_CODES.ABNORMAL_CLOSURE);
./addons/bus/static/tests/bus_monitoring_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_monitoring_service.test.js:    MockServer.env["bus.bus"]._simulateDisconnection(WEBSOCKET_CLOSE_CODES.SESSION_EXPIRED);
./addons/bus/static/tests/bus_monitoring_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/assets_watchdog.test.js:    MockServer,
./addons/bus/static/tests/assets_watchdog.test.js:    MockServer.current.env["bus.bus"]._sendone("broadcast", "bundle_changed", {
./addons/bus/static/tests/bus_service.test.js:    makeMockEnv,
./addons/bus/static/tests/bus_service.test.js:    makeMockServer,
./addons/bus/static/tests/bus_service.test.js:    MockServer,
./addons/bus/static/tests/bus_service.test.js:import { patchWebsocketWorkerWithCleanup } from "./mock_websocket";
./addons/bus/static/tests/bus_service.test.js:    const firstTabEnv = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const secondTabEnv = await makeMockEnv(null, { makeNew: true });
./addons/bus/static/tests/bus_service.test.js:    const pyEnv = MockServer.current.env;
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const pyEnv = MockServer.current.env;
./addons/bus/static/tests/bus_service.test.js:    const firstTabEnv = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const secondTabEnv = await makeMockEnv(null, { makeNew: true });
./addons/bus/static/tests/bus_service.test.js:    MockServer.current.env["bus.bus"]._sendone("lambda", "notifType", "beta");
./addons/bus/static/tests/bus_service.test.js:    const mainEnv = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const secondEnv = await makeMockEnv(null, { makeNew: true });
./addons/bus/static/tests/bus_service.test.js:    const pyEnv = MockServer.current.env;
./addons/bus/static/tests/bus_service.test.js:    const firstTabEnv = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const secondTabEnv = await makeMockEnv(null, { makeNew: true });
./addons/bus/static/tests/bus_service.test.js:    MockServer.current.env["bus.bus"]._sendmany([
./addons/bus/static/tests/bus_service.test.js:    const firstTabEnv = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const secondTabEnv = await makeMockEnv(null, { makeNew: true });
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    MockServer.current.env["bus.bus"]._simulateDisconnection(
./addons/bus/static/tests/bus_service.test.js:    const firstEnv = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    MockServer.current.env["bus.bus"]._sendone("lambda", "notifType", "beta");
./addons/bus/static/tests/bus_service.test.js:    const secondEnv = await makeMockEnv(null, { makeNew: true });
./addons/bus/static/tests/bus_service.test.js:    const firstTabEnv = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const env2 = await makeMockEnv(null, { makeNew: true });
./addons/bus/static/tests/bus_service.test.js:    const firstTabEnv = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const secondTabEnv = await makeMockEnv(null, { makeNew: true });
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    MockServer.current.env["bus.bus"]._simulateDisconnection(
./addons/bus/static/tests/bus_service.test.js:    await makeMockServer();
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    MockServer.current.env["bus.bus"]._sendone("my_channel", "message_type", {
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const pyEnv = MockServer.current.env;
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    const pyEnv = MockServer.current.env;
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    MockServer.current.env["bus.bus"]._simulateDisconnection(
./addons/bus/static/tests/bus_service.test.js:    MockServer.current.env["bus.bus"]._simulateDisconnection(
./addons/bus/static/tests/bus_service.test.js:    await makeMockServer();
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    MockServer.current.env["bus.bus"]._simulateDisconnection(WEBSOCKET_CLOSE_CODES.CLEAN);
./addons/bus/static/tests/bus_service.test.js:    const env = await makeMockEnv();
./addons/bus/static/tests/bus_service.test.js:    MockServer.current.env["bus.bus"]._simulateDisconnection(WEBSOCKET_CLOSE_CODES.CLEAN);
./addons/bus/static/tests/outdated_page_watcher.test.js:    MockServer,
./addons/bus/static/tests/outdated_page_watcher.test.js:    MockServer.current.env["bus.bus"]._simulateDisconnection(
./addons/bus/static/tests/websocket_worker.test.js:import { patchWebsocketWorkerWithCleanup } from "@bus/../tests/mock_websocket";
./addons/bus/tests/common.py:from unittest.mock import patch
./addons/bus/tests/common.py:        def _mocked_serve_forever(*args):
./addons/bus/tests/common.py:            wraps=_mocked_serve_forever
./addons/bus/tests/common.py:        def _mocked_dispatch_bus_notifications(self, *args):
./addons/bus/tests/common.py:        with patch.object(Websocket, '_dispatch_bus_notifications', _mocked_dispatch_bus_notifications):
./addons/bus/tests/test_close_websocket_after_tour.py:from unittest.mock import patch
./addons/bus/tests/test_close_websocket_after_tour.py:    def test_ensure_websocket_closed_after_tour(self, mocked_brower_class):
./addons/bus/tests/test_close_websocket_after_tour.py:        mocked_brower_class.return_value.navigate_to.side_effect = navigate_to_side_effect
./addons/bus/tests/test_websocket_caryall.py:from unittest.mock import patch
./addons/bus/tests/test_websocket_caryall.py:        with patch.object(Websocket, 'subscribe', side_effect=Websocket.subscribe, autospec=True) as mock:
./addons/bus/tests/test_websocket_caryall.py:            self.assertEqual(mock.call_args[0][2], 0)
./addons/bus/tests/test_websocket_caryall.py:        with patch.object(Websocket, 'subscribe', side_effect=Websocket.subscribe, autospec=True) as mock:
./addons/bus/tests/test_websocket_caryall.py:            self.assertEqual(mock.call_args[0][2], client_last_notification_id)
./addons/bus/tests/test_websocket_caryall.py:            with patch('odoo.addons.bus.websocket.acquire_cursor') as mock:
./addons/bus/tests/test_websocket_caryall.py:                self.assertFalse(mock.called)
./addons/bus/tests/test_websocket_caryall.py:        ) as mock, mute_logger('odoo.addons.bus.websocket'):
./addons/bus/tests/test_websocket_caryall.py:            self.assertTrue(mock.called)
./addons/bus/tests/test_websocket_caryall.py:        with patch('odoo.addons.bus.models.ir_websocket.IrWebsocket._on_websocket_closed') as mock:
./addons/bus/tests/test_websocket_caryall.py:            self.assertTrue(mock.called)
./addons/test_base_automation/tests/test_flow.py:from unittest.mock import patch
./addons/test_base_automation/tests/test_flow.py:        with patch.object(automation.__class__, '_process', side_effect=automation._process) as mock:
./addons/test_base_automation/tests/test_flow.py:                self.assertEqual(mock.call_count, 10)
./addons/test_base_automation/tests/test_flow.py:                self.assertEqual(mock.call_count, 22)
./addons/test_base_automation/tests/test_flow.py:                self.assertEqual(mock.call_count, 38)
./addons/base_automation/static/tests/kanban_header_patch.test.js:    mockService,
./addons/base_automation/static/tests/kanban_header_patch.test.js:    mockService("action", {
./addons/base_automation/static/tests/base_automation_error_dialog.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/base_automation/tests/test_mail_composer.py:        with self.mock_mail_app():
./addons/web_unsplash/static/tests/unsplash.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/web_unsplash/static/tests/unsplash.test.js:import { contains, makeMockEnv, onRpc } from "@web/../tests/web_test_helpers";
./addons/web_unsplash/static/tests/unsplash.test.js:import { Deferred } from "@web/../lib/hoot/hoot-mock";
./addons/web_unsplash/static/tests/unsplash.test.js:    const env = await makeMockEnv();
./addons/web_unsplash/static/tests/unsplash.test.js:    const env = await makeMockEnv();
./addons/web_unsplash/static/tests/unsplash.test.js:    const env = await makeMockEnv();
./addons/test_discuss_full/tests/test_performance.py:from unittest.mock import patch, PropertyMock
./addons/test_discuss_full/tests/test_performance.py:            new_callable=PropertyMock(return_value=self.env.ref("base.be").code),
./addons/sales_team/static/tests/crm_team_test_helpers.js:import { CrmTeam } from "./mock_server/mock_models/crm_team";
./addons/website_event/tests/common.py:        # Mock dates to have reproducible computed fields based on time
./addons/website_event/tests/test_event_internals.py:from odoo.addons.website.tests.test_website_visitor import MockVisitor
./addons/website_event/tests/test_event_internals.py:from odoo.addons.website.tools import MockRequest
./addons/website_event/tests/test_event_internals.py:class TestEventData(EventCase, MockVisitor):
./addons/website_event/tests/test_event_internals.py:        with MockRequest(self.env):
./addons/website_event/tests/test_event_internals.py:        with MockRequest(self.env):
./addons/website_event/tests/test_event_internals.py:        with self.mock_visitor_from_request(force_visitor=website_visitor):
./addons/website_crm_iap_reveal/tests/common.py:from unittest.mock import patch
./addons/website_crm_iap_reveal/tests/common.py:from odoo.addons.iap.tests.common import MockIAPEnrich
./addons/website_crm_iap_reveal/tests/common.py:class MockIAPReveal(MockIAPEnrich):
./addons/website_crm_iap_reveal/tests/common.py:        super(MockIAPReveal, cls).setUpClass()
./addons/website_crm_iap_reveal/tests/common.py:    def mock_IAP_reveal(self, ip_to_rules, name_list=None, default_data=None, sim_error=None):
./addons/website_crm_iap_reveal/tests/common.py:        company_data = super(MockIAPReveal, self)._get_iap_company_data(base_name, service=service, add_values=add_values)
./addons/website_crm_iap_reveal/tests/test_lead_reveal.py:from odoo.addons.website_crm_iap_reveal.tests.common import MockIAPReveal
./addons/website_crm_iap_reveal/tests/test_lead_reveal.py:class TestLeadMine(TestCrmCommon, MockIAPReveal):
./addons/website_crm_iap_reveal/tests/test_lead_reveal.py:        with self.mock_IAP_reveal(self.ip_to_rules, sim_error='credit'):
./addons/website_crm_iap_reveal/tests/test_lead_reveal.py:            with self.mock_IAP_reveal(self.ip_to_rules, sim_error='jsonrpc_exception'):
./addons/website_crm_iap_reveal/tests/test_lead_reveal.py:        with self.mock_IAP_reveal(self.ip_to_rules, sim_error='no_result'):
./addons/website_crm_iap_reveal/tests/test_lead_reveal.py:        with self.mock_IAP_reveal(self.ip_to_rules, name_list=['Heinrich', 'Rivil', 'LidGen']):
./addons/rating/static/tests/mock_server/models/mail_message.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/rating/static/tests/mock_server/models/mail_message.js:        /** @type {import("mock_models").MailMessage} */
./addons/rating/static/tests/rating_test_helpers.js:import { MailMessage } from "@rating/../tests/mock_server/models/mail_message";
./addons/rating/static/tests/rating_test_helpers.js:import { RatingRating } from "@rating/../tests/mock_server/models/rating_rating";
./addons/l10n_id_pos/tests/test_qris_pos.py:from unittest.mock import patch
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_bill_bizkaia.py:from unittest.mock import patch
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_bill_bizkaia.py:            return_value=self.mock_response_post_bill_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_bill_bizkaia.py:            return_value=self.mock_response_cancel_bill_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_bill_bizkaia.py:                return_value=self.mock_response_post_bill_failure,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_bill_bizkaia.py:            return_value=self.mock_response_post_bill_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_bill_bizkaia.py:                return_value=self.mock_response_cancel_bill_failure,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_bill_bizkaia.py:                side_effect=self.mock_request_error,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_user_errors.py:from unittest.mock import patch
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_user_errors.py:                side_effect=self.mock_request_error,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_user_errors.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_user_errors.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_user_errors.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_user_errors.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/common.py:from unittest.mock import Mock
./addons/l10n_es_edi_tbai/tests/common.py:def create_mock_response(content, headers=None):
./addons/l10n_es_edi_tbai/tests/common.py:    mock_response = Mock(spec=requests.Response)
./addons/l10n_es_edi_tbai/tests/common.py:    mock_response.content = content
./addons/l10n_es_edi_tbai/tests/common.py:    mock_response.headers = headers or {}
./addons/l10n_es_edi_tbai/tests/common.py:    return mock_response
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_response_post_invoice_success = create_mock_response(cls._get_response_xml('post_invoice_success_gi.xml'))
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_response_cancel_invoice_success = create_mock_response(cls._get_response_xml('cancel_invoice_success_gi.xml'))
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_response_failure = create_mock_response(cls._get_response_xml('post_or_cancel_invoice_failure_gi.xml'))
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_request_error = requests.exceptions.RequestException("A request exception")
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_response_post_invoice_success = create_mock_response(
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_response_cancel_invoice_success = create_mock_response(
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_response_post_invoice_failure = create_mock_response(
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_response_cancel_invoice_failure = create_mock_response(
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_response_post_bill_success = create_mock_response(
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_response_cancel_bill_success = create_mock_response(
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_response_post_bill_failure = create_mock_response(
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_response_cancel_bill_failure = create_mock_response(
./addons/l10n_es_edi_tbai/tests/common.py:        cls.mock_request_error = requests.exceptions.RequestException("A request exception")
./addons/l10n_es_edi_tbai/tests/test_move_reversal.py:from unittest.mock import patch
./addons/l10n_es_edi_tbai/tests/test_move_reversal.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_move_reversal.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_move_reversal.py:            return_value=self.mock_response_cancel_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:from unittest.mock import patch
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:            return_value=self.mock_response_cancel_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:                return_value=self.mock_response_failure,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:                return_value=self.mock_response_failure,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:            return_value=self.mock_response_cancel_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:                side_effect=self.mock_request_error,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:                side_effect=self.mock_request_error,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice.py:            return_value=self.mock_response_cancel_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice_bizkaia.py:from unittest.mock import patch
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice_bizkaia.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice_bizkaia.py:            return_value=self.mock_response_cancel_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice_bizkaia.py:                return_value=self.mock_response_post_invoice_failure,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice_bizkaia.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice_bizkaia.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice_bizkaia.py:                return_value=self.mock_response_cancel_invoice_failure,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice_bizkaia.py:                side_effect=self.mock_request_error,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice_bizkaia.py:            return_value=self.mock_response_post_invoice_success,
./addons/l10n_es_edi_tbai/tests/test_edi_tbai_send_invoice_bizkaia.py:                side_effect=self.mock_request_error,
./addons/mass_mailing_sms/tests/common.py:from odoo.addons.link_tracker.tests.common import MockLinkTracker
./addons/mass_mailing_sms/tests/common.py:class MassSMSCase(SMSCase, MockLinkTracker):
./addons/mass_mailing_sms/tests/test_mailing_retry.py:from unittest.mock import patch
./addons/payment_worldline/tests/test_worldline.py:from unittest.mock import patch
./addons/payment_worldline/tests/test_worldline.py:        ) as signature_check_mock, patch(
./addons/payment_worldline/tests/test_worldline.py:            self.assertEqual(signature_check_mock.call_count, 1)
./addons/hoot_training/static/tests/02_components.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/hoot_training/static/tests/03_dom.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/hoot_training/static/tests/04_interactions.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/hoot_training/static/tests/05_server.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/hoot_training/static/tests/05_server.test.js:    makeMockEnv,
./addons/hoot_training/static/tests/05_server.test.js:function mockAdd(...values) {
./addons/hoot_training/static/tests/05_server.test.js:function mockMultiply(...values) {
./addons/hoot_training/static/tests/05_server.test.js:    await makeMockEnv();
./addons/hoot_training/static/tests/05_server.test.js:    onRpc("multiply", ({ args }) => mockMultiply(...args));   //onRpc("multiply", callback) intercepts any RPC request for the method "multiply".
./addons/hoot_training/static/tests/05_server.test.js:        return mockAdd(...args);
./addons/hoot_training/static/tests/05_server.test.js:        return mockMultiply(...args);
./addons/hoot_training/static/tests/06_views.test.js: * @hint give `Duck` to `defineModels()` ("@web/../tests/web_test_helpers") to load it in the mock server
./addons/mail/static/tests/web/debug_menu.test.js:import { MailMessage } from "../mock_server/mock_models/mail_message";
./addons/mail/static/tests/web/fields/onchange_on_keydown.test.js:import { DiscussChannel } from "@mail/../tests/mock_server/mock_models/discuss_channel";
./addons/mail/static/tests/web/fields/avatar.test.js:import { serverState } from "@web/../tests/_framework/mock_server_state.hoot";
./addons/mail/static/tests/web/fields/many2many_tags_email.test.js:import { ResPartner } from "../../mock_server/mock_models/res_partner";
./addons/mail/static/tests/web/fields/scheduled_date_field.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/mail/static/tests/web/fields/scheduled_date_field.test.js:beforeEach(() => mockDate("2024-10-20 10:00:00", +1));
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailThread} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailFollowers} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").IrAttachment} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailNotification} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailThread} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailFollowers} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailMessageSubtype} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailFollowers} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailNotification} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailThread} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").ResFake} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").Base} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailThread} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailThread} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailThread} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").IrAttachment} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailActivity} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailFollowers} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailThread} */
./addons/mail/static/tests/mock_server/mock_models/mail_thread.js:        /** @type {import("mock_models").MailScheduledMessage} */
./addons/mail/static/tests/mock_server/mock_models/ir_websocket.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/ir_websocket.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/ir_websocket.js:        /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mock_models/ir_websocket.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/base.js:        /** @type {import("mock_models").MailTrackingValue} */
./addons/mail/static/tests/mock_server/mock_models/mail_canned_response.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:declare module "mock_models" {
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { Base as Base2 } from "@mail/../tests/mock_server/mock_models/base";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { DiscussChannel as DiscussChannel2 } from "@mail/../tests/mock_server/mock_models/discuss_channel";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { DiscussChannelMember as DiscussChannelMember2 } from "@mail/../tests/mock_server/mock_models/discuss_channel_member";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { DiscussChannelRtcSession as DiscussChannelRtcSession2 } from "@mail/../tests/mock_server/mock_models/discuss_channel_rtc_session";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { DiscussVoiceMetadata as DiscussVoiceMetadata2 } from "@mail/../tests/mock_server/mock_models/discuss_voice_metadata";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { IrAttachment as IrAttachment2 } from "@mail/../tests/mock_server/mock_models/ir_attachment";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailActivity as MailActivity2 } from "@mail/../tests/mock_server/mock_models/mail_activity";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailActivityType as MailActivityType2 } from "@mail/../tests/mock_server/mock_models/mail_activity_type";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailFollowers as MailFollowers2 } from "@mail/../tests/mock_server/mock_models/mail_followers";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailGuest as MailGuest2 } from "@mail/../tests/mock_server/mock_models/mail_guest";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailLinkPreview as MailLinkPreview2 } from "@mail/../tests/mock_server/mock_models/mail_link_preview";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailMessage as MailMessage2 } from "@mail/../tests/mock_server/mock_models/mail_message";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailMessageReaction as MailMessageReaction2 } from "@mail/../tests/mock_server/mock_models/mail_message_reaction";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailMessageSubtype as MailMessageSubtype2 } from "@mail/../tests/mock_server/mock_models/mail_message_subtype";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailNotification as MailNotification2 } from "@mail/../tests/mock_server/mock_models/mail_notification";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailScheduledMessage as MailScheduledMessage2 } from "@mail/.../tests/mock_server/mock_models/mail_scheduled_message";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailShortcode as MailShortcode2 } from "@mail/../tests/mock_server/mock_models/mail_shortcode";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailTemplate as MailTemplate2 } from "@mail/../tests/mock_server/mock_models/mail_template";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailThread as MailThread2 } from "@mail/../tests/mock_server/mock_models/mail_thread";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { MailTrackingValue as MailTrackingValue2 } from "@mail/../tests/mock_server/mock_models/mail_tracking_value";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { ResFake as ResFake2 } from "@mail/../tests/mock_server/mock_models/res_fake";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { ResPartner as ResPartner2 } from "@mail/../tests/mock_server/mock_models/res_partner";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { ResUsers as ResUsers2 } from "@mail/../tests/mock_server/mock_models/res_users";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { ResUsersSettings as ResUsersSettings2 } from "@mail/../tests/mock_server/mock_models/res_users_settings";
./addons/mail/static/tests/mock_server/mock_models/@types/mock_models.d.ts:    import { ResUsersSettingsVolumes as ResUsersSettingsVolumes2 } from "@mail/../tests/mock_server/mock_models/res_users_settings_volumes";
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        // limitation of mock server, partner already unsubscribed from channel
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResGroups} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:                "avatar_cache_key", // mock server simplification
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelRtcSession} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").MailNotification} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import {"mock_model"}.ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").MailThread} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:     * @returns {import("mock_models").DiscussChannelMember}
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mock_models/res_users.js:import { DISCUSS_ACTION_ID, mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/res_users.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/res_users.js:        /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mock_models/res_users.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/res_users.js:        /** @type {import("mock_models").ResUsersSettings} */
./addons/mail/static/tests/mock_server/mock_models/res_users.js:        /** @type {import("mock_models").MailActivity} */
./addons/mail/static/tests/mock_server/mock_models/res_users.js:     * @param {import("@mail/../tests/mock_server/mail_mock_server").mailDataHelpers.Store} store
./addons/mail/static/tests/mock_server/mock_models/res_users.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/res_users.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/res_users.js:        /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mock_models/res_users.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/res_users.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/res_users.js:        /** @type {import("mock_models").MailActivity} */
./addons/mail/static/tests/mock_server/mock_models/mail_scheduled_message.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/mail_scheduled_message.js:        /** @type {import("mock_models").IrAttachment} */
./addons/mail/static/tests/mock_server/mock_models/mail_scheduled_message.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_message_reaction.js:import { mailDataHelpers } from "../mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/mail_message_reaction.js:        /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mock_models/mail_message_reaction.js:        /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mock_models/mail_message_reaction.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").ResCountry} */
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:                    data.isAdmin = true; // mock server simplification
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:        // simulates domain with relational parts (not supported by mock server)
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").MailNotification} */
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/res_users_settings.js:        /** @type {import("mock_models").ResUsersSettingsVolumes} */
./addons/mail/static/tests/mock_server/mock_models/res_users_settings.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/res_users_settings.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/res_users_settings.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailNotification} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").IrAttachment} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailFollowers} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailLinkPreview} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailMessageReaction} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailMessageSubtype} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailNotification} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailThread} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailTrackingValue} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").ResFake} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailNotification} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:     * @param {import("@mail/../tests/mock_server/mail_mock_server").mailDataHelpers.Store} store
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailMessageReaction} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailMessageReaction} */
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:     * @param {import("@mail/../tests/mock_server/mail_mock_server").mailDataHelpers.Store} store
./addons/mail/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailNotification} */
./addons/mail/static/tests/mock_server/mock_models/mail_followers.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/mail_followers.js:        /** @type {import("mock_models").MailFollowers} */
./addons/mail/static/tests/mock_server/mock_models/mail_followers.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_tracking_value.js:        /** @type {import("mock_models").MailThread} */
./addons/mail/static/tests/mock_server/mock_models/mail_tracking_value.js:        /** @type {import("mock_models").IrModelFields} */
./addons/mail/static/tests/mock_server/mock_models/mail_tracking_value.js:        /** @type {import("mock_models").IrModelFields} */
./addons/mail/static/tests/mock_server/mock_models/mail_tracking_value.js:        /** @type {import("mock_models").IrModelFields} */
./addons/mail/static/tests/mock_server/mock_models/res_users_settings_volumes.js:        /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mock_models/res_users_settings_volumes.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_rtc_session.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_rtc_session.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_rtc_session.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_rtc_session.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_rtc_session.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_rtc_session.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_rtc_session.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_rtc_session.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_rtc_session.js:        /** @type {import("mock_models").DiscussChannelRtcSession} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_member.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_member.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_member.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_member.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_member.js:        /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_member.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_member.js:        /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_member.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_member.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_member.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/discuss_channel_member.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mock_models/res_fake.js:        /** @type {import("mock_models").MailThread} */
./addons/mail/static/tests/mock_server/mock_models/res_fake.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_notification.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/mail_notification.js:        /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mock_models/mail_notification.js:        /** @type {import("mock_models").MailMessageSubtype} */
./addons/mail/static/tests/mock_server/mock_models/mail_notification.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_notification.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/ir_attachment.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/ir_attachment.js:            return true; // dummy value for mock server
./addons/mail/static/tests/mock_server/mock_models/ir_attachment.js:            return true; // dummy value for mock server
./addons/mail/static/tests/mock_server/mock_models/ir_attachment.js:        return true; // dummy value for mock server
./addons/mail/static/tests/mock_server/mock_models/ir_attachment.js:        /** @type {import("mock_models").DiscussVoiceMetadata} */
./addons/mail/static/tests/mock_server/mock_models/mail_activity.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/mock_server/mock_models/mail_activity.js:        /** @type {import("mock_models").MailActivityType} */
./addons/mail/static/tests/mock_server/mock_models/mail_activity.js:        /** @type {import("mock_models").MailActivityType} */
./addons/mail/static/tests/mock_server/mock_models/mail_activity.js:        /** @type {import("mock_models").MailTemplate} */
./addons/mail/static/tests/mock_server/mock_models/mail_activity.js:        /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mock_models/mail_activity.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mock_models/mail_activity.js:        /** @type {import("mock_models").IrAttachment} */
./addons/mail/static/tests/mock_server/mock_models/mail_activity.js:        /** @type {import("mock_models").MailActivityType} */
./addons/mail/static/tests/mock_server/mock_models/mail_activity.js:        /** @type {import("mock_models").MailTemplate} */
./addons/mail/static/tests/mock_server/mock_models/mail_activity.js:        // Remove domain term used to filter record having "done" activities (not understood by the _filter mock)
./addons/mail/static/tests/mock_server/mail_mock_server.js:    MockServer,
./addons/mail/static/tests/mock_server/mail_mock_server.js:    MockServerError,
./addons/mail/static/tests/mock_server/mail_mock_server.js:/** @param {import("./mock_model").MailGuest} guest */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    const { env } = MockServer;
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:        throw new MockServerError("Unauthorized");
./addons/mail/static/tests/mock_server/mail_mock_server.js:    const { env } = MockServer;
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    registry.category("mock_rpc").add(route, beforeCallableHandler);
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussVoiceMetadata} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").IrAttachment} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").IrAttachment} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").IrAttachment} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannelRtcSession} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannelRtcSession} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").ResUsersSettings} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailNotification} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailLinkPreview} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailLinkPreview} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailThread} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").BusBus} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").IrAttachment} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailFollowers} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessageSubtype} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannelRtcSession} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").DiscussChannelMember} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailGuest} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailMessage} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").MailNotification} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").ResPartner} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:            // limitation of mock server: cannot browse non-existing record
./addons/mail/static/tests/mock_server/mail_mock_server.js:    /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mock_server/mail_mock_server.js:                    MockServer.env["mail.thread"]._thread_to_store.call(
./addons/mail/static/tests/mock_server/mail_mock_server.js:                        MockServer.env[data._name],
./addons/mail/static/tests/mock_server/mail_mock_server.js:                    MockServer.env[data._name]._to_store(ids, this, makeKwArgs(kwargs));
./addons/mail/static/tests/messaging_menu/notification.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/mail/static/tests/messaging_menu/notification.test.js:    mockService,
./addons/mail/static/tests/messaging_menu/notification.test.js:    mockService("action", {
./addons/mail/static/tests/messaging_menu/notification.test.js:    mockDate("2023-01-03 12:00:00"); // so that it's after last interest (mock server is in 2019 by default!)
./addons/mail/static/tests/messaging_menu/notification.test.js:    mockDate("2023-01-03 12:00:00"); // so that it's after last interest (mock server is in 2019 by default!)
./addons/mail/static/tests/messaging_menu/messaging_menu.test.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/messaging_menu/messaging_menu.test.js:import { Deferred, mockUserAgent } from "@odoo/hoot-mock";
./addons/mail/static/tests/messaging_menu/messaging_menu.test.js:    mockService,
./addons/mail/static/tests/messaging_menu/messaging_menu.test.js:    mockUserAgent("Chrome/0.0.0 Android (OdooMobile; Linux; Android 13; Odoo TestSuite)");
./addons/mail/static/tests/messaging_menu/messaging_menu.test.js:    mockService("pwa", {
./addons/mail/static/tests/messaging_menu/messaging_menu.test.js:    mockService("pwa", {
./addons/mail/static/tests/messaging_menu/messaging_menu.test.js:    mockService("action", {
./addons/mail/static/tests/messaging_menu/messaging_menu.test.js:    mockService("action", {
./addons/mail/static/tests/scheduled_message/scheduled_message.test.js:import { mockService, onRpc } from "@web/../tests/web_test_helpers";
./addons/mail/static/tests/scheduled_message/scheduled_message.test.js:import { advanceTime, mockDate } from "@odoo/hoot-mock";
./addons/mail/static/tests/scheduled_message/scheduled_message.test.js:beforeEach(() => mockDate("2024-10-20 10:00:00"));
./addons/mail/static/tests/scheduled_message/scheduled_message.test.js:    mockService("action", {
./addons/mail/static/tests/scheduled_message/scheduled_message.test.js:    mockService("action", {
./addons/mail/static/tests/inline/html_mail_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/mail/static/tests/chat_window/chat_window.test.js:import { mockDate, tick } from "@odoo/hoot-mock";
./addons/mail/static/tests/chat_window/chat_window.test.js:    mockDate("2023-01-03 12:00:00"); // so that it's after last interest (mock server is in 2019 by default!)
./addons/mail/static/tests/chat_window/chat_window.test.js:    mockDate("2023-01-03 12:00:00"); // so that it's after last interest (mock server is in 2019 by default!)
./addons/mail/static/tests/mail_test_helpers_contains.js:import { Deferred, animationFrame, tick } from "@odoo/hoot-mock";
./addons/mail/static/tests/suggestion/suggestion.test.js:import { Deferred, tick } from "@odoo/hoot-mock";
./addons/mail/static/tests/composer/composer.test.js:import { Deferred, animationFrame, tick } from "@odoo/hoot-mock";
./addons/mail/static/tests/composer/suggested_recipients.test.js:import { Deferred, tick } from "@odoo/hoot-mock";
./addons/mail/static/tests/composer/suggested_recipients.test.js:import { asyncStep, mockService, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/mail/static/tests/composer/suggested_recipients.test.js:    mockService("action", {
./addons/mail/static/tests/composer/suggested_recipients.test.js:    mockService("action", {
./addons/mail/static/tests/composer/html_composer_message_field.test.js:import { Deferred, animationFrame } from "@odoo/hoot-mock";
./addons/mail/static/tests/composer/html_composer_message_field.test.js:    makeMockServer,
./addons/mail/static/tests/composer/html_composer_message_field.test.js:    mockService,
./addons/mail/static/tests/composer/html_composer_message_field.test.js:    mockService("upload", uploadService);
./addons/mail/static/tests/composer/html_composer_message_field.test.js:    const { env } = await makeMockServer();
./addons/mail/static/tests/composer/html_composer_message_field.test.js:    // redefine 'files' so we can put mock data in through js
./addons/mail/static/tests/views/statusbar_duration_field.test.js:import { ResPartner } from "@mail/../tests/mock_server/mock_models/res_partner";
./addons/mail/static/tests/chat_bubble/chat_bubble.test.js:import { withUser } from "@web/../tests/_framework/mock_server/mock_server";
./addons/mail/static/tests/mobile/mobile.test.js:import { Deferred } from "@odoo/hoot-mock";
./addons/mail/static/tests/message/message.test.js:import { Deferred, mockDate, tick } from "@odoo/hoot-mock";
./addons/mail/static/tests/message/message.test.js:    mockService,
./addons/mail/static/tests/message/message.test.js:    // FIXME: mock timezone not working
./addons/mail/static/tests/message/message.test.js:    mockDate("2024-03-26 10:00:00", 0);
./addons/mail/static/tests/message/message.test.js:    mockDate("2024-03-26 10:00:00", 0);
./addons/mail/static/tests/message/message.test.js:    mockService("action", {
./addons/mail/static/tests/message/message.test.js:    mockService("action", {
./addons/mail/static/tests/chatter/web/chatter_topbar.test.js:import { Deferred, advanceTime } from "@odoo/hoot-mock";
./addons/mail/static/tests/chatter/web/follower.test.js:import { Deferred } from "@odoo/hoot-mock";
./addons/mail/static/tests/chatter/web/follower.test.js:import { asyncStep, mockService, onRpc, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/mail/static/tests/chatter/web/follower.test.js:    mockService("action", {
./addons/mail/static/tests/chatter/web/chatter.test.js:import { Deferred, advanceTime } from "@odoo/hoot-mock";
./addons/mail/static/tests/chatter/web/chatter.test.js:    mockService,
./addons/mail/static/tests/chatter/web/chatter.test.js:    mockService("action", {
./addons/mail/static/tests/chatter/web/follower_list_menu.test.js:import { asyncStep, mockService, serverState, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/mail/static/tests/chatter/web/follower_list_menu.test.js:    mockService("action", {
./addons/mail/static/tests/thread/file_upload.test.js:import { Deferred } from "@odoo/hoot-mock";
./addons/mail/static/tests/thread/unread_messages_banner.test.js:import { tick } from "@odoo/hoot-mock";
./addons/mail/static/tests/thread/thread.test.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/thread/thread.test.js:import { Deferred, mockDate, tick } from "@odoo/hoot-mock";
./addons/mail/static/tests/thread/thread.test.js:    mockDate("2023-01-03 12:00:00");
./addons/mail/static/tests/activity/activity_mark_done_popover.test.js:import { Deferred } from "@odoo/hoot-mock";
./addons/mail/static/tests/activity/activity_mark_done_popover.test.js:import { asyncStep, mockService, onRpc, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/mail/static/tests/activity/activity_mark_done_popover.test.js:        // random value returned in order for the mock server to know that this route is implemented.
./addons/mail/static/tests/activity/activity_mark_done_popover.test.js:        // random value returned in order for the mock server to know that this route is implemented.
./addons/mail/static/tests/activity/activity_mark_done_popover.test.js:    mockService("action", {
./addons/mail/static/tests/activity/activity_mark_done_popover.test.js:    mockService("action", {
./addons/mail/static/tests/activity/activity.test.js:import { advanceTime, mockDate } from "@odoo/hoot-mock";
./addons/mail/static/tests/activity/activity.test.js:    mockService,
./addons/mail/static/tests/activity/activity.test.js:    mockDate("2023-01-11 12:00:00");
./addons/mail/static/tests/activity/activity.test.js:    mockDate("2023-01-11 12:00:00");
./addons/mail/static/tests/activity/activity.test.js:    mockDate("2023-01-11 12:00:00");
./addons/mail/static/tests/activity/activity.test.js:    mockDate("2023-01-11 12:00:00");
./addons/mail/static/tests/activity/activity.test.js:    mockDate("2023-01-11 12:00:00");
./addons/mail/static/tests/activity/activity.test.js:    mockDate("2023-12-07 23:59:59", 0);
./addons/mail/static/tests/activity/activity.test.js:    mockDate("2023-12-08 00:00:01");
./addons/mail/static/tests/activity/activity.test.js:    mockDate("2023-01-11 12:00:00");
./addons/mail/static/tests/activity/activity.test.js:    mockService("action", {
./addons/mail/static/tests/activity/activity.test.js:        // random value returned in order for the mock server to know that this route is implemented.
./addons/mail/static/tests/activity/activity.test.js:    mockService("action", {
./addons/mail/static/tests/activity/activity.test.js:    mockService("action", {
./addons/mail/static/tests/activity/activity.test.js:    mockDate("2023-01-11 12:00:00");
./addons/mail/static/tests/activity/activity.test.js:    mockService("action", {
./addons/mail/static/tests/mail_test_helpers.js:import { Deferred } from "@odoo/hoot-mock";
./addons/mail/static/tests/mail_test_helpers.js:    MockServer,
./addons/mail/static/tests/mail_test_helpers.js:    getMockEnv,
./addons/mail/static/tests/mail_test_helpers.js:    makeMockEnv,
./addons/mail/static/tests/mail_test_helpers.js:    makeMockServer,
./addons/mail/static/tests/mail_test_helpers.js:} from "./mock_server/mail_mock_server";
./addons/mail/static/tests/mail_test_helpers.js:import { Base } from "./mock_server/mock_models/base";
./addons/mail/static/tests/mail_test_helpers.js:import { DEFAULT_MAIL_VIEW_ID } from "./mock_server/mock_models/constants";
./addons/mail/static/tests/mail_test_helpers.js:import { DiscussChannel } from "./mock_server/mock_models/discuss_channel";
./addons/mail/static/tests/mail_test_helpers.js:import { DiscussChannelMember } from "./mock_server/mock_models/discuss_channel_member";
./addons/mail/static/tests/mail_test_helpers.js:import { DiscussChannelRtcSession } from "./mock_server/mock_models/discuss_channel_rtc_session";
./addons/mail/static/tests/mail_test_helpers.js:import { DiscussGifFavorite } from "./mock_server/mock_models/discuss_gif_favorite";
./addons/mail/static/tests/mail_test_helpers.js:import { DiscussVoiceMetadata } from "./mock_server/mock_models/discuss_voice_metadata";
./addons/mail/static/tests/mail_test_helpers.js:import { IrAttachment } from "./mock_server/mock_models/ir_attachment";
./addons/mail/static/tests/mail_test_helpers.js:import { IrWebSocket } from "./mock_server/mock_models/ir_websocket";
./addons/mail/static/tests/mail_test_helpers.js:import { M2xAvatarUser } from "./mock_server/mock_models/m2x_avatar_user";
./addons/mail/static/tests/mail_test_helpers.js:import { MailActivity } from "./mock_server/mock_models/mail_activity";
./addons/mail/static/tests/mail_test_helpers.js:import { MailActivitySchedule } from "./mock_server/mock_models/mail_activity_schedule";
./addons/mail/static/tests/mail_test_helpers.js:import { MailActivityType } from "./mock_server/mock_models/mail_activity_type";
./addons/mail/static/tests/mail_test_helpers.js:import { MailCannedResponse } from "./mock_server/mock_models/mail_canned_response";
./addons/mail/static/tests/mail_test_helpers.js:import { MailComposeMessage } from "./mock_server/mock_models/mail_composer_message";
./addons/mail/static/tests/mail_test_helpers.js:import { MailFollowers } from "./mock_server/mock_models/mail_followers";
./addons/mail/static/tests/mail_test_helpers.js:import { MailGuest } from "./mock_server/mock_models/mail_guest";
./addons/mail/static/tests/mail_test_helpers.js:import { MailLinkPreview } from "./mock_server/mock_models/mail_link_preview";
./addons/mail/static/tests/mail_test_helpers.js:import { MailMessage } from "./mock_server/mock_models/mail_message";
./addons/mail/static/tests/mail_test_helpers.js:import { MailMessageReaction } from "./mock_server/mock_models/mail_message_reaction";
./addons/mail/static/tests/mail_test_helpers.js:import { MailMessageSubtype } from "./mock_server/mock_models/mail_message_subtype";
./addons/mail/static/tests/mail_test_helpers.js:import { MailNotification } from "./mock_server/mock_models/mail_notification";
./addons/mail/static/tests/mail_test_helpers.js:import { MailPushDevice } from "./mock_server/mock_models/mail_push_device";
./addons/mail/static/tests/mail_test_helpers.js:import { MailScheduledMessage } from "./mock_server/mock_models/mail_scheduled_message";
./addons/mail/static/tests/mail_test_helpers.js:import { MailTemplate } from "./mock_server/mock_models/mail_template";
./addons/mail/static/tests/mail_test_helpers.js:import { MailThread } from "./mock_server/mock_models/mail_thread";
./addons/mail/static/tests/mail_test_helpers.js:import { MailTrackingValue } from "./mock_server/mock_models/mail_tracking_value";
./addons/mail/static/tests/mail_test_helpers.js:import { ResFake } from "./mock_server/mock_models/res_fake";
./addons/mail/static/tests/mail_test_helpers.js:import { ResPartner } from "./mock_server/mock_models/res_partner";
./addons/mail/static/tests/mail_test_helpers.js:import { ResUsers } from "./mock_server/mock_models/res_users";
./addons/mail/static/tests/mail_test_helpers.js:import { ResUsersSettings } from "./mock_server/mock_models/res_users_settings";
./addons/mail/static/tests/mail_test_helpers.js:import { ResUsersSettingsVolumes } from "./mock_server/mock_models/res_users_settings_volumes";
./addons/mail/static/tests/mail_test_helpers.js:registryNamesToCloneWithCleanup.push("mock_server_callbacks", "discuss.model");
./addons/mail/static/tests/mail_test_helpers.js:useServiceProtectMethodHandling.fn = useServiceProtectMethodHandling.mocked; // so that RPCs after tests do not throw error
./addons/mail/static/tests/mail_test_helpers.js:        const handler = registry.category("mock_rpc").get(route);
./addons/mail/static/tests/mail_test_helpers.js:    const handler = registry.category("mock_rpc").get(route);
./addons/mail/static/tests/mail_test_helpers.js:/** @type {import("@web/../tests/_framework/mock_server/mock_server").MockServerEnvironment} */
./addons/mail/static/tests/mail_test_helpers.js:    if (!MockServer.current) {
./addons/mail/static/tests/mail_test_helpers.js:    const pyEnv = MockServer.env;
./addons/mail/static/tests/mail_test_helpers.js:        /** @type {import("mock_models").ResUsers} */
./addons/mail/static/tests/mail_test_helpers.js:        env = await makeMockEnv({}, { makeNew: true });
./addons/mail/static/tests/mail_test_helpers.js:        env = getMockEnv() || (await makeMockEnv({}));
./addons/mail/static/tests/mail_test_helpers.js:    const { env } = await makeMockServer();
./addons/mail/static/tests/mail_test_helpers.js: * Mocks the browser's `navigator.mediaDevices.getUserMedia` and `navigator.mediaDevices.getDisplayMedia`
./addons/mail/static/tests/mail_test_helpers.js:export function mockGetMedia() {
./addons/mail/static/tests/mail_test_helpers.js:    class MockMediaStreamTrack extends EventTarget {
./addons/mail/static/tests/mail_test_helpers.js:            return Object.assign(new MockMediaStreamTrack(this.kind), { ...this });
./addons/mail/static/tests/mail_test_helpers.js:     * The audio streams are mocked as there is no way to create a MediaStream
./addons/mail/static/tests/mail_test_helpers.js:    class MockAudioMediaStream extends MediaStream {
./addons/mail/static/tests/mail_test_helpers.js:        mockTracks = [new MockMediaStreamTrack("audio")];
./addons/mail/static/tests/mail_test_helpers.js:            return this.mockTracks;
./addons/mail/static/tests/mail_test_helpers.js:            return this.mockTracks;
./addons/mail/static/tests/mail_test_helpers.js:                stream = new MockAudioMediaStream();
./addons/mail/static/tests/discuss_app/bus_connection_alert.test.js:import { asyncStep, MockServer, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/mail/static/tests/discuss_app/bus_connection_alert.test.js:    MockServer.env["bus.bus"]._simulateDisconnection(WEBSOCKET_CLOSE_CODES.ABNORMAL_CLOSURE);
./addons/mail/static/tests/discuss_app/discuss.test.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/discuss_app/discuss.test.js:import { animationFrame, Deferred, mockDate, tick } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService,
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("presence", { isOdooFocused: () => false });
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("title", {
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("presence", { isOdooFocused: () => false });
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("title", {
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("presence", { isOdooFocused: () => false });
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("title", {
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("presence", { isOdooFocused: () => false });
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("title", {
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("presence", { isOdooFocused: () => false });
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("title", {
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("presence", { isOdooFocused: () => false });
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("presence", { isOdooFocused: () => false });
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("presence", { isOdooFocused: () => false });
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockService("presence", { isOdooFocused: () => false });
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockDate("2023-01-03 12:00:00"); // so that it's after last interest (mock server is in 2019 by default!)
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockDate("2023-01-03 12:00:00"); // so that it's after last interest (mock server is in 2019 by default!)
./addons/mail/static/tests/discuss_app/discuss.test.js:    mockDate("2021-01-03 12:00:00"); // so that it's after last interest (mock server is in 2019 by default!)
./addons/mail/static/tests/discuss_app/sidebar.test.js:import { Deferred, mockDate } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss_app/sidebar.test.js:    mockService,
./addons/mail/static/tests/discuss_app/sidebar.test.js:    mockService("orm", {
./addons/mail/static/tests/discuss_app/sidebar.test.js:    mockService("orm", {
./addons/mail/static/tests/discuss_app/sidebar.test.js:    mockDate("2023-01-03 12:00:00");
./addons/mail/static/tests/discuss_app/sidebar.test.js:    mockService("orm", {
./addons/mail/static/tests/discuss_app/sidebar.test.js:    mockService("orm", {
./addons/mail/static/tests/discuss_app/sidebar.test.js:    mockDate("2023-01-03 12:00:00");
./addons/mail/static/tests/discuss_app/sidebar.test.js:    mockDate("2023-01-03 12:00:00");
./addons/mail/static/tests/discuss_app/inbox.test.js:import { Deferred } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss_app/inbox.test.js:    mockService,
./addons/mail/static/tests/discuss_app/inbox.test.js:    mockService("action", {
./addons/mail/static/tests/discuss/call/ptt_ad_banner.test.js:    mockGetMedia,
./addons/mail/static/tests/discuss/call/ptt_ad_banner.test.js:import { mockService } from "@web/../tests/web_test_helpers";
./addons/mail/static/tests/discuss/call/ptt_ad_banner.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/ptt_ad_banner.test.js:    mockService("discuss.ptt_extension", {
./addons/mail/static/tests/discuss/call/peer_to_peer.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss/call/peer_to_peer.test.js:import { defineMailModels, mockGetMedia } from "@mail/../tests/mail_test_helpers";
./addons/mail/static/tests/discuss/call/peer_to_peer.test.js:        this._notificationRoute = route || "/any/mock/notification";
./addons/mail/static/tests/discuss/call/peer_to_peer.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/web/call.test.js:    mockGetMedia,
./addons/mail/static/tests/discuss/call/web/call.test.js:import { mockUserAgent } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss/call/web/call.test.js:import { mockService } from "@web/../tests/web_test_helpers";
./addons/mail/static/tests/discuss/call/web/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/web/call.test.js:    mockUserAgent("android");
./addons/mail/static/tests/discuss/call/web/call.test.js:    mockService("discuss.ptt_extension", {
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia,
./addons/mail/static/tests/discuss/call/call.test.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/discuss/call/call.test.js:import { mockUserAgent } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss/call/call.test.js:    mockService,
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockUserAgent("Chrome/0.0.0 Android (OdooMobile; Linux; Android 13; Odoo TestSuite)");
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockService("mail.sound_effects", {
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/call/call_settings_menu.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss/call/call_settings_menu.test.js:                        deviceId: "mockAudioDeviceId",
./addons/mail/static/tests/discuss/call/call_settings_menu.test.js:                        label: "mockAudioDeviceLabel",
./addons/mail/static/tests/discuss/call/call_settings_menu.test.js:                        deviceId: "mockVideoDeviceId",
./addons/mail/static/tests/discuss/call/call_settings_menu.test.js:                        label: "mockVideoDeviceLabel",
./addons/mail/static/tests/discuss/call/call_settings_menu.test.js:    await contains("option[value=mockAudioDeviceId]");
./addons/mail/static/tests/discuss/call/call_settings_menu.test.js:    await contains("option[value=mockVideoDeviceId]", { count: 0 });
./addons/mail/static/tests/discuss/voice_message/voice_message.test.js:    mockGetMedia,
./addons/mail/static/tests/discuss/voice_message/voice_message.test.js:import { Deferred, mockDate } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss/voice_message/voice_message.test.js:    mockGetMedia();
./addons/mail/static/tests/discuss/voice_message/voice_message.test.js:    mockDate("2023-07-31 13:00:00");
./addons/mail/static/tests/discuss/voice_message/voice_message.test.js:    mockDate("2023-07-31 13:00:10.500");
./addons/mail/static/tests/discuss/im_status.test.js:import { asyncStep, mockService, serverState, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/mail/static/tests/discuss/im_status.test.js:    mockService("bus_service", { send: (type) => asyncStep(type) });
./addons/mail/static/tests/discuss/im_status.test.js:    mockService("bus_service", { send: (type) => asyncStep(type) });
./addons/mail/static/tests/discuss/im_status.test.js:    mockService("bus_service", { send: (type) => asyncStep(type) });
./addons/mail/static/tests/discuss/im_status.test.js:    mockService("bus_service", { send: (type) => asyncStep(type) });
./addons/mail/static/tests/discuss/im_status.test.js:    mockService("bus_service", {
./addons/mail/static/tests/discuss/im_status.test.js:    mockService("bus_service", {
./addons/mail/static/tests/discuss/typing/typing.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss/search_discuss.test.js:import { tick } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss/core/web/crosstab.test.js:import { asyncStep, mockService, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/mail/static/tests/discuss/core/web/crosstab.test.js:    mockService("bus_service", {
./addons/mail/static/tests/discuss/core/common/message_seen_indicator.test.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/mail/static/tests/discuss/core/common/message_seen_indicator.test.js:        await contains("li", { text: `User ${i}` }); // Not checking datetime because HOOT mocking of tz do not work
./addons/mail/static/tests/discuss/core/public_web/sub_channels.test.js:import { Deferred, animationFrame } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss/core/public_web/discuss.test.js:import { tick } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss/core/suggestion.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss/core/suggestion.test.js:    mockDate("2023-01-03 12:00:00"); // so that it's after last interest (mock server is in 2019 by default!)
./addons/mail/static/tests/discuss/core/discuss.test.js:import { patchWebsocketWorkerWithCleanup } from "@bus/../tests/mock_websocket";
./addons/mail/static/tests/discuss/core/discuss.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/mail/static/tests/discuss/core/discuss.test.js:    mockDate(
./addons/mail/static/tests/discuss/core/discuss.test.js:    mockDate(
./addons/mail/static/tests/core/record.test.js:import { asyncStep, mockService, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/mail/static/tests/core/record.test.js:    mockService("store", (env) => makeStore(env, { localRegistry }));
./addons/mail/static/tests/core/new_message_separator.test.js:import { mockDate, tick } from "@odoo/hoot-mock";
./addons/mail/static/tests/core/new_message_separator.test.js:    mockService,
./addons/mail/static/tests/core/new_message_separator.test.js:    mockService("presence", () => ({
./addons/mail/static/tests/core/new_message_separator.test.js:    mockDate("2023-01-03 12:00:00"); // so that it's after last interest (mock server is in 2019 by default!)
./addons/mail/static/tests/crosstab/crosstab.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/mail/static/tests/crosstab/crosstab.test.js:    mockService,
./addons/mail/static/tests/crosstab/crosstab.test.js:    mockDate(`${now.year}-${now.month}-${now.day} ${now.hour}:${now.minute}:${now.second}`);
./addons/mail/static/tests/crosstab/crosstab.test.js:    mockDate(
./addons/mail/static/tests/crosstab/crosstab.test.js:    mockService("bus_service", {
./addons/mail/static/lib/odoo_sfu/odoo_sfu.js:        this._isWebsocketEmitter = typeof websocket.on === "function"; // could use constructor name but can't use mocks during tests
./addons/mail/tests/test_res_partner.py:from unittest.mock import patch
./addons/mail/tests/test_res_partner.py:    def mockPartnerCalls(self):
./addons/mail/tests/test_res_partner.py:                          autospec=True, side_effect=_res_partner_create) as mock_partner_create, \
./addons/mail/tests/test_res_partner.py:                          autospec=True, side_effect=_original_search) as mock_partner_search:
./addons/mail/tests/test_res_partner.py:            self._mock_partner_create = mock_partner_create
./addons/mail/tests/test_res_partner.py:            self._mock_partner_search = mock_partner_search
./addons/mail/tests/test_res_partner.py:        with self.mockPartnerCalls():
./addons/mail/tests/test_res_partner.py:        with self.mockPartnerCalls():
./addons/mail/tests/test_res_partner.py:        with self.mockPartnerCalls():
./addons/mail/tests/test_res_partner.py:                with self.mockPartnerCalls():
./addons/mail/tests/test_res_partner.py:                self.assertEqual(self._mock_partner_create.call_count, 1)
./addons/mail/tests/test_res_partner.py:                self.assertEqual(self._mock_partner_search.call_count, 1)
./addons/mail/tests/test_res_partner.py:        with self.mockPartnerCalls():
./addons/mail/tests/test_res_partner.py:        self.assertEqual(self._mock_partner_create.call_count, 1)
./addons/mail/tests/test_res_partner.py:        self.assertEqual(self._mock_partner_search.call_count, 1,
./addons/mail/tests/test_res_partner.py:        with self.mockPartnerCalls():
./addons/mail/tests/test_res_partner.py:        self.assertEqual(self._mock_partner_create.call_count, 1)
./addons/mail/tests/test_res_partner.py:        self.assertEqual(self._mock_partner_search.call_count, 1)
./addons/mail/tests/test_ir_mail_server.py:from unittest.mock import patch
./addons/mail/tests/test_ir_mail_server.py:                with self.mock_smtplib_connection():
./addons/mail/tests/test_ir_mail_server.py:                    with self.mock_smtplib_connection():
./addons/mail/tests/test_ir_mail_server.py:                    self.connect_mocked.assert_called_once()
./addons/mail/tests/test_ir_mail_server.py:        with self.mock_smtplib_connection():
./addons/mail/tests/test_ir_mail_server.py:                    with self.mock_smtplib_connection():
./addons/mail/tests/test_ir_mail_server.py:                    self.connect_mocked.assert_called_once()
./addons/mail/tests/test_ir_mail_server.py:            with self.mock_smtplib_connection():
./addons/mail/tests/test_ir_mail_server.py:            self.connect_mocked.assert_called_once()
./addons/mail/tests/test_ir_mail_server.py:        with self.mock_smtplib_connection():
./addons/mail/tests/test_ir_mail_server.py:        self.connect_mocked.assert_called_once()
./addons/mail/tests/test_ir_ui_menu.py:from unittest.mock import Mock, patch
./addons/mail/tests/test_ir_ui_menu.py:        new_menu = Mock(side_effect=_new_menu)
./addons/mail/tests/common_tracking.py:from unittest.mock import patch
./addons/mail/tests/common_tracking.py:        cls.mock_start_time = datetime(2023, 2, 15, 12, 0, 0)
./addons/mail/tests/common_tracking.py:        with patch.object(cls.env.cr, 'now', return_value=cls.mock_start_time):
./addons/mail/tests/common_tracking.py:        Updates the mock duration_tracking field for multiple records based on the provided minutes.
./addons/mail/tests/common_tracking.py:        with patch.object(self.env.cr, 'now', return_value=self.mock_start_time) as now:
./addons/mail/tests/common_tracking.py:        with patch.object(self.env.cr, 'now', return_value=self.mock_start_time) as now:
./addons/mail/tests/common.py:from unittest.mock import patch
./addons/mail/tests/common.py:from odoo.addons.base.tests.common import MockSmtplibCase
./addons/mail/tests/common.py:class MockEmail(common.BaseCase, MockSmtplibCase):
./addons/mail/tests/common.py:        super(MockEmail, cls).setUpClass()
./addons/mail/tests/common.py:    def mock_datetime_and_now(self, mock_dt):
./addons/mail/tests/common.py:        in addition to standard datetime mocks. Used mainly to detect sync
./addons/mail/tests/common.py:        with freeze_time(mock_dt), \
./addons/mail/tests/common.py:             patch.object(self.env.cr, 'now', lambda: mock_dt):
./addons/mail/tests/common.py:    def mock_mail_gateway(self, mail_unlink_sent=False):
./addons/mail/tests/common.py:        self._init_mail_mock()
./addons/mail/tests/common.py:        with self.mock_smtplib_connection(), \
./addons/mail/tests/common.py:             patch.object(IrMail_Server, 'build_email', autospec=True, wraps=IrMail_Server, side_effect=_ir_mail_server_build_email) as build_email_mocked, \
./addons/mail/tests/common.py:             patch.object(IrMail_Server, 'send_email', autospec=True, wraps=IrMail_Server, side_effect=send_email_origin) as send_email_mocked, \
./addons/mail/tests/common.py:             patch.object(MailMail, 'create', autospec=True, wraps=MailMail, side_effect=_mail_mail_create) as mail_mail_create_mocked, \
./addons/mail/tests/common.py:             patch.object(MailMail, '_send', autospec=True, wraps=MailMail, side_effect=mail_private_send_origin) as mail_mail_private_send_mocked, \
./addons/mail/tests/common.py:            self.build_email_mocked = build_email_mocked
./addons/mail/tests/common.py:            self.send_email_mocked = send_email_mocked
./addons/mail/tests/common.py:            self.mail_mail_create_mocked = mail_mail_create_mocked
./addons/mail/tests/common.py:            self.mail_mail_private_send_mocked = mail_mail_private_send_mocked
./addons/mail/tests/common.py:            self.push_to_end_point_mocked = patched_push
./addons/mail/tests/common.py:    def _init_mail_mock(self):
./addons/mail/tests/common.py:             self.mock_mail_gateway():
./addons/mail/tests/common.py:        email = self._mails[0]  # keep out of mock, otherwise _mails is rewritten
./addons/mail/tests/common.py:             self.mock_mail_gateway():
./addons/mail/tests/common.py:        :return sent_email: an outgoing email generated during the mock;
./addons/mail/tests/common.py:        """ Filter mail generated during mock, based on common parameters
./addons/mail/tests/common.py:        :return mail: a ``mail.mail`` record generated during the mock and matching
./addons/mail/tests/common.py:        :return mail: a ``mail.mail`` record generated during the mock and matching
./addons/mail/tests/common.py:        :return mail: a ``mail.mail`` record generated during the mock and matching
./addons/mail/tests/common.py:        :return mail: a ``mail.mail`` record generated during the mock;
./addons/mail/tests/common.py:        using mock (mail.mail and outgoing emails).
./addons/mail/tests/common.py:        using mock (mail.mail and outgoing emails). This method takes partners
./addons/mail/tests/common.py:        """ Check no mail.mail and email was generated during gateway mock. """
./addons/mail/tests/common.py:        """Check no email was generated during gateway mock.
./addons/mail/tests/common.py:        self.push_to_end_point_mocked.assert_not_called()
./addons/mail/tests/common.py:        self.push_to_end_point_mocked.assert_called_once()
./addons/mail/tests/common.py:            self.assertEqual(self.push_to_end_point_mocked.call_args.kwargs['device']['endpoint'], endpoint)
./addons/mail/tests/common.py:            self.assertIn(private, self.push_to_end_point_mocked.call_args.kwargs)
./addons/mail/tests/common.py:            self.assertIn(public, self.push_to_end_point_mocked.call_args.kwargs)
./addons/mail/tests/common.py:        payload_value = json.loads(self.push_to_end_point_mocked.call_args.kwargs['payload'])
./addons/mail/tests/common.py:class MailCase(MockEmail):
./addons/mail/tests/common.py:    gateway mock and helpers (see ´´MockEmail´´).
./addons/mail/tests/common.py:    def mock_bus(self):
./addons/mail/tests/common.py:        self._init_mock_bus()
./addons/mail/tests/common.py:        with patch.object(BusBus, 'create', autospec=True, wraps=BusBus, side_effect=_bus_bus_create) as _bus_bus_create_mock:
./addons/mail/tests/common.py:    def _init_mock_bus(self):
./addons/mail/tests/common.py:    def mock_mail_app(self):
./addons/mail/tests/common.py:        self._init_mock_mail()
./addons/mail/tests/common.py:        with patch.object(MailMessage, 'create', autospec=True, wraps=MailMessage, side_effect=_mail_message_create) as _mail_message_create_mock, \
./addons/mail/tests/common.py:                patch.object(MailNotification, 'create', autospec=True, wraps=MailNotification, side_effect=_mail_notification_create) as _mail_notification_create_mock:
./addons/mail/tests/common.py:    def _init_mock_mail(self):
./addons/mail/tests/common.py:        with self.mock_mail_gateway():
./addons/mail/tests/common.py:            with self.mock_mail_gateway(mail_unlink_sent=mail_unlink_sent), self.mock_bus(), self.mock_mail_app():
./addons/mail/tests/common.py:            with self.mock_bus():
./addons/mail/tests/common.py:            with self.mock_mail_gateway(mail_unlink_sent=mail_unlink_sent), self.mock_bus(), self.mock_mail_app():
./addons/mail/tests/common.py:            with self.mock_mail_gateway(mail_unlink_sent=False), self.mock_bus(), self.mock_mail_app():
./addons/mail/tests/common.py:          notably from the 'self._new_msgs' filled during the mock;
./addons/mail/tests/common.py:        :param mail_unlink_sent: mock parameter, tells if mails are unlinked
./addons/mail/tests/common.py:            with self.mock_bus():
./addons/mail/tests/common.py:    """ Almost-void class definition setting the savepoint case + mock of mail.
./addons/mail/tests/test_res_users.py:from unittest.mock import patch
./addons/mail/tests/test_res_users.py:        with self.mock_mail_gateway():
./addons/mail/tests/test_res_users.py:        with self.mock_mail_gateway():
./addons/mail/tests/test_res_users.py:        with self.mock_mail_gateway():
./addons/mail/tests/test_res_users.py:        with self.mock_mail_gateway(), \
./addons/mail/tests/test_link_preview.py:from unittest.mock import patch
./addons/mail/tests/test_mail_composer.py:        with self.mock_mail_gateway():
./addons/mail/tests/test_mail_composer.py:        with self.mock_mail_gateway():
./addons/mail/tests/test_mail_composer.py:        with self.mock_mail_gateway():
./addons/mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/mail/tests/test_mail_composer.py:        with self.mock_mail_app():
./addons/mail/tests/discuss/test_discuss_channel.py:from unittest.mock import patch
./addons/mail/tests/discuss/test_discuss_channel.py:        # Mocks the return value of field.Datetime.now(),
./addons/mail/tests/discuss/test_discuss_channel.py:        with self.mock_mail_gateway():
./addons/mail/tests/discuss/test_discuss_channel.py:        with self.mock_mail_gateway():
./addons/mail/tests/discuss/test_discuss_channel.py:        with self.mock_mail_gateway():
./addons/mail/tests/discuss/test_rtc.py:from unittest.mock import patch
./addons/mail/tests/discuss/test_rtc.py:        with self.mock_bus():
./addons/mail/tests/test_mail_template.py:from unittest.mock import patch
./addons/mail/tests/test_mail_message_translate.py:from unittest.mock import patch
./addons/mail/tests/test_mail_message_translate.py:def mock_response(fun):
./addons/mail/tests/test_mail_message_translate.py:            content = {"error": {"message": "Mocked Error"}}
./addons/mail/tests/test_mail_message_translate.py:    @mock_response
./addons/mail/tests/test_mail_message_translate.py:    def _mock_translation_request(self, data):
./addons/mail/tests/test_mail_message_translate.py:        result = self._mock_translation_request({"message_id": self.message.id})
./addons/mail/tests/test_mail_message_translate.py:            result = self._mock_translation_request({"message_id": self.message.id})
./addons/mail/tests/test_mail_message_translate.py:        result = self._mock_translation_request({"message_id": self.message.id})
./addons/mail/tests/test_mail_message_translate.py:        result = self._mock_translation_request({"message_id": self.message.id})
./addons/mail/tests/test_mail_message_translate.py:            self._mock_translation_request({"message_id": self.message.id})
./addons/mail/tests/test_mail_message_translate.py:            self._mock_translation_request({"message_id": self.message.id})
./addons/mail/tests/test_mail_activity.py:from unittest.mock import patch
./addons/mail/tests/test_mail_activity.py:    def _mock_activities(self):
./addons/mail/tests/test_mail_activity.py:             ) as activity_create_mocked:
./addons/mail/tests/test_mail_activity.py:            self.activity_create_mocked = activity_create_mocked
./addons/mail/tests/test_mail_render.py:from unittest.mock import patch
./addons/mail/tests/test_mail_render.py:        def _mock_get_base_url(recordset):
./addons/mail/tests/test_mail_render.py:        with patch('odoo.models.Model.get_base_url', new=_mock_get_base_url), self.assertQueryCount(13):
./addons/mail/tests/test_mail_render.py:            # Can not use "MagicMock" in a Jinja sand-boxed environment
./addons/mail/__manifest__.py:            ('remove', 'mail/static/tests/legacy/helpers/mock_services.js'), # to remove when all legacy tests are ported
./addons/mail/__manifest__.py:            'mail/static/tests/legacy/helpers/mock_services.js',
./addons/sale_project/static/tests/project_task_list_sale_line.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/crm_livechat/static/tests/mock_server/mock_models/discuss_channel.js:import { DiscussChannel } from "@mail/../tests/mock_server/mock_models/discuss_channel";
./addons/website_forum/static/tests/interactions/website_forum_spam.test.js:import { Deferred } from "@odoo/hoot-mock";
./addons/website_forum/static/tests/interactions/website_forum_share.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website_forum/tests/test_sitemap.py:from unittest.mock import patch
./addons/website_forum/tests/test_forum_controller.py:from odoo.addons.website.tools import MockRequest
./addons/website_forum/tests/test_forum_controller.py:            with self.with_user(user.login), MockRequest(self.env, website=self.base_website):
./addons/website_forum/tests/test_forum_controller.py:            with self.with_user(user.login), MockRequest(self.env, website=self.website_2):
./addons/sale_async_emails/tests/test_sale_order.py:from unittest.mock import patch
./addons/sale_async_emails/tests/test_sale_order.py:        ) as sync_email_send_mock:
./addons/sale_async_emails/tests/test_sale_order.py:                sync_email_send_mock.call_count,
./addons/sale_async_emails/tests/test_sale_order.py:        ) as sync_email_send_mock:
./addons/sale_async_emails/tests/test_sale_order.py:                sync_email_send_mock.call_count,
./addons/sale_async_emails/tests/test_sale_order.py:        ) as sync_email_send_mock:
./addons/sale_async_emails/tests/test_sale_order.py:                sync_email_send_mock.call_count,
./addons/l10n_es_edi_tbai_pos/tests/test_tbai_pos.py:from unittest.mock import patch
./addons/l10n_es_edi_tbai_pos/tests/test_tbai_pos.py:            return_value=cls.mock_response_post_invoice_success,
./addons/sale_timesheet/static/tests/sale_timesheet_test_helpers.js:import { AccountAnalyticLine } from "@analytic/../tests/mock_server/mock_models/account_analytic_line";
./addons/sale_timesheet/static/tests/sale_timesheet_test_helpers.js:import { ProjectTask } from "@project/../tests/mock_server/mock_models/project_task";
./addons/sale_timesheet/static/tests/sale_timesheet_test_helpers.js:import { SaleOrderLine } from "@sale/../tests/mock_server/mock_models/sale_order_line";
./addons/payment_stripe/tests/test_stripe.py:from unittest.mock import patch
./addons/payment_stripe/tests/test_stripe.py:        def mock_stripe_stripe_create_intent(self):
./addons/payment_stripe/tests/test_stripe.py:            mock_stripe_stripe_create_intent,
./addons/payment_stripe/tests/test_stripe.py:        ) as tokenize_check_mock:
./addons/payment_stripe/tests/test_stripe.py:        self.assertEqual(tokenize_check_mock.call_count, 1)
./addons/payment_stripe/tests/test_stripe.py:        ) as signature_check_mock, patch(
./addons/payment_stripe/tests/test_stripe.py:            self.assertEqual(signature_check_mock.call_count, 1)
./addons/payment_stripe/tests/test_stripe.py:        with patch.object(type(self.env['payment.provider']), '_stripe_make_request') as mock:
./addons/payment_stripe/tests/test_stripe.py:            self.assertEqual(mock.call_count, 1)
./addons/payment_stripe/tests/test_stripe.py:        with patch.object(type(self.env['payment.provider']), '_stripe_make_request') as mock:
./addons/payment_stripe/tests/test_stripe.py:            self.assertEqual(mock.call_count, 0)
./addons/payment_stripe/tests/test_stripe.py:        ) as mock:
./addons/payment_stripe/tests/test_stripe.py:            mock.assert_called_once()
./addons/payment_stripe/tests/test_stripe.py:            call_args = mock.call_args.kwargs['payload'].keys()
./addons/payment_stripe/tests/test_refund_flows.py:from unittest.mock import patch
./addons/payment_stripe/tests/test_refund_flows.py:        ) as handle_notification_data_mock:
./addons/payment_stripe/tests/test_refund_flows.py:        self.assertEqual(handle_notification_data_mock.call_count, 1)
./addons/test_mass_mailing/tests/test_mailing_server.py:        with self.mock_smtplib_connection():
./addons/test_mass_mailing/tests/test_mailing_server.py:        with self.mock_smtplib_connection():
./addons/test_mass_mailing/tests/test_mailing_server.py:        with self.mock_smtplib_connection():
./addons/test_mass_mailing/tests/test_mailing_server.py:        self.assertEqual(self.find_mail_server_mocked.call_count, 3, 'Must be called only once per mail from except when forced')
./addons/test_mass_mailing/tests/test_blacklist_behavior.py:from unittest.mock import patch
./addons/test_mass_mailing/tests/test_blacklist_behavior.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_blacklist_behavior.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_mailing.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_mailing.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_mailing.py:                with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_mailing.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mass_mailing/tests/test_mailing.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mass_mailing/tests/test_mailing.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_mailing.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_mailing.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_mailing.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_mailing.py:        with self.mock_mail_gateway():
./addons/test_mass_mailing/tests/test_mailing.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_mailing.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_sms_controller.py:        with self.mockSMSGateway(moderated=moderated):
./addons/test_mass_mailing/tests/test_mailing_test.py:        with self.mock_mail_gateway():
./addons/test_mass_mailing/tests/test_mailing_test.py:        with self.mock_mail_gateway(), self.assertRaises(Exception):
./addons/test_mass_mailing/tests/test_mailing_test.py:        with self.mock_mail_gateway(), self.assertRaises(Exception):
./addons/test_mass_mailing/tests/test_mailing_test.py:        with self.mock_mail_gateway(), self.assertRaises(Exception):
./addons/test_mass_mailing/tests/test_mailing_test.py:        with self.mock_mail_gateway():
./addons/test_mass_mailing/tests/test_mailing_test.py:        with self.mock_mail_gateway():
./addons/test_mass_mailing/tests/test_mailing_test.py:        with self.mock_mail_gateway(), self.enter_registry_test_mode():
./addons/test_mass_mailing/tests/test_mailing_statistics_sms.py:        with self.mockSMSGateway():
./addons/test_mass_mailing/tests/test_mailing_statistics_sms.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mass_mailing/tests/test_mailing_statistics_sms.py:        with self.mockSMSGateway(force_delivered=True):
./addons/test_mass_mailing/tests/test_mailing_sms.py:            with self.mockSMSGateway():
./addons/test_mass_mailing/tests/test_mailing_sms.py:            with self.mockSMSGateway():
./addons/test_mass_mailing/tests/test_mailing_sms.py:            with self.mockSMSGateway():
./addons/test_mass_mailing/tests/test_mailing_sms.py:            with self.mockSMSGateway():
./addons/test_mass_mailing/tests/test_mailing_sms.py:            with self.mockSMSGateway(moderated=True):
./addons/test_mass_mailing/tests/test_mailing_sms.py:            with self.mockSMSGateway(sim_error='server_error'):
./addons/test_mass_mailing/tests/test_mailing_sms.py:            with self.mockSMSGateway():
./addons/test_mass_mailing/tests/test_mailing_sms.py:            with self.mock_mail_gateway(), self.assertRaises(Exception):
./addons/test_mass_mailing/tests/test_mailing_sms.py:        with self.mockSMSGateway():
./addons/test_mass_mailing/tests/test_mailing_sms.py:        with self.mockSMSGateway():
./addons/test_mass_mailing/tests/test_mailing_sms.py:        with self.mockSMSGateway():
./addons/test_mass_mailing/tests/test_mailing_sms.py:        with self.assertRaises(exceptions.UserError), self.mockSMSGateway():
./addons/test_mass_mailing/tests/test_mailing_sms.py:        with self.mockSMSGateway():
./addons/test_mass_mailing/tests/test_mailing_statistics.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_mailing_statistics.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mass_mailing/tests/test_mailing_statistics.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mass_mailing/tests/test_mailing_statistics.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/payment_paypal/tests/test_paypal.py:from unittest.mock import patch
./addons/payment_paypal/tests/test_paypal.py:        ) as origin_check_mock, patch(
./addons/payment_paypal/tests/test_paypal.py:            self.assertEqual(origin_check_mock.call_count, 1)
./addons/barcodes/static/tests/legacy/basic/barcode_tests.js:    mockTimeout,
./addons/barcodes/static/tests/legacy/basic/barcode_tests.js:            mockRPC: function (route, args) {
./addons/barcodes/static/tests/legacy/basic/barcode_tests.js:        const mock = mockTimeout();
./addons/barcodes/static/tests/legacy/basic/barcode_tests.js:        await mock.advanceTime(50);
./addons/barcodes/static/tests/legacy/basic/barcode_tests.js:        await mock.advanceTime(50);
./addons/barcodes/static/tests/legacy/basic/barcode_tests.js:        await mock.advanceTime(50);
./addons/barcodes/static/tests/legacy/basic/barcode_tests.js:        await mock.advanceTime(50);
./addons/barcodes/static/tests/legacy/basic/float_scannable_field_test.js:            mockRPC(_route, args) {
./addons/barcodes/static/src/barcode_service.js:    // this is done here to make it easily mockable in mobile tests
./addons/website_sale/static/tests/interactions/snippets/dynamic_snippet_products.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website_sale/tests/test_website_sale_snippets.py:from odoo.addons.website.tools import MockRequest
./addons/website_sale/tests/test_website_sale_snippets.py:            with MockRequest(user.with_user(user).env, website=self.env['website'].get_current_website()):
./addons/website_sale/tests/test_express_checkout_flows.py:from unittest.mock import Mock, patch
./addons/website_sale/tests/test_express_checkout_flows.py:        delivery_carrier_mock = Mock()
./addons/website_sale/tests/test_express_checkout_flows.py:        delivery_carrier_mock.rate_shipment = Mock(
./addons/website_sale/tests/test_express_checkout_flows.py:            # Since we didn't mock the product ids for the mocked carrier, return an unsuccessful
./addons/website_sale/tests/test_express_checkout_flows.py:            delivery_carrier_mock, self.sale_order, is_express_checkout_flow=True
./addons/website_sale/tests/test_express_checkout_flows.py:        sale_order = delivery_carrier_mock.rate_shipment.call_args[0][0]
./addons/website_sale/tests/test_address.py:from unittest.mock import patch
./addons/website_sale/tests/test_address.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale/tests/test_address.py:        with MockRequest(self.env, website=self.website, sale_order_id=so.id) as req:
./addons/website_sale/tests/test_address.py:        with MockRequest(website.env, website=website, sale_order_id=so.id) as req:
./addons/website_sale/tests/test_address.py:        with MockRequest(website.env, website=website, sale_order_id=so.id) as req:
./addons/website_sale/tests/test_address.py:            MockRequest(website.env, website=website, sale_order_id=self.cart.id),
./addons/website_sale/tests/test_address.py:            ) as rate_shipment_mock
./addons/website_sale/tests/test_address.py:                rate_shipment_mock.call_count,
./addons/website_sale/tests/test_address.py:        with MockRequest(self.env, website=self.website, sale_order_id=so.id):
./addons/website_sale/tests/test_address.py:        with MockRequest(
./addons/website_sale/tests/test_address.py:        with MockRequest(website.env, website=website, sale_order_id=so.id) as req:
./addons/website_sale/tests/test_address.py:        with MockRequest(website.env, website=website, sale_order_id=so.id) as req:
./addons/website_sale/tests/test_address.py:        with MockRequest(website.env, website=website, sale_order_id=so.id) as req:
./addons/website_sale/tests/test_address.py:        with MockRequest(website.env, website=website, sale_order_id=so.id):
./addons/website_sale/tests/test_address.py:        with MockRequest(website.env, website=website) as req:
./addons/website_sale/tests/test_website_sale_product_attribute_value_config.py:from odoo.addons.website_sale.tests.common import MockRequest
./addons/website_sale/tests/test_website_sale_product_attribute_value_config.py:        with MockRequest(product_template.env, website=website, website_sale_current_pl=pricelist.id):
./addons/website_sale/tests/test_website_sale_product_attribute_value_config.py:        with MockRequest(product.env, website=website):
./addons/website_sale/tests/test_website_sale_product_attribute_value_config.py:        with MockRequest(product.env, website=website):
./addons/website_sale/tests/test_website_sale_product_attribute_value_config.py:        with MockRequest(product.env, website=website):
./addons/website_sale/tests/test_website_sale_product_attribute_value_config.py:        with MockRequest(product.env, website=website):
./addons/website_sale/tests/test_website_sale_product_attribute_value_config.py:        with MockRequest(product.env, website=website):
./addons/website_sale/tests/test_website_sale_mail.py:from unittest.mock import patch
./addons/website_sale/tests/common.py:from odoo.addons.website.tools import MockRequest as websiteMockRequest
./addons/website_sale/tests/common.py:def MockRequest(
./addons/website_sale/tests/common.py:    with websiteMockRequest(*args, **kwargs) as request:
./addons/website_sale/tests/test_website_sale_pricelist.py:from unittest.mock import patch
./addons/website_sale/tests/test_website_sale_pricelist.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale/tests/test_website_sale_pricelist.py:    # Mock nedded because request.session doesn't exist during test
./addons/website_sale/tests/test_website_sale_pricelist.py:            # mock patch method could not pass env context
./addons/website_sale/tests/test_website_sale_pricelist.py:        with MockRequest(
./addons/website_sale/tests/test_website_sale_pricelist.py:        with MockRequest(
./addons/website_sale/tests/test_website_sale_pricelist.py:    # Mock this method will be enough to simulate frontend context in most methods
./addons/website_sale/tests/test_website_sale_pricelist.py:            MockRequest(self.env, website=self.website, website_sale_current_pl=current_pl.id),
./addons/website_sale/tests/test_website_sale_product_configurator.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale/tests/test_website_sale_product_configurator.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_product_configurator.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_product_configurator.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_product_configurator.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_product_configurator.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_product_configurator.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_product_configurator.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_product_configurator.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_product_configurator.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_visitor.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale/tests/test_website_sale_visitor.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_visitor.py:        with MockRequest(self.env, website=self.website, cookies=cookies):
./addons/website_sale/tests/test_website_sale_visitor.py:        with MockRequest(self.env, website=self.website, cookies=cookies):
./addons/website_sale/tests/test_website_sale_visitor.py:        with MockRequest(website.env, website=website):
./addons/website_sale/tests/test_website_sale_visitor.py:        with MockRequest(website.env, website=website):
./addons/website_sale/tests/test_website_sale_visitor.py:        with MockRequest(self.website.env, website=self.website):
./addons/website_sale/tests/test_website_sale_visitor.py:        with MockRequest(self.website.env, website=self.website, cookies=cookies):
./addons/website_sale/tests/test_website_sale_visitor.py:        with MockRequest(self.website.env, website=self.website, cookies=cookies):
./addons/website_sale/tests/test_website_sequence.py:from odoo.addons.website.tools import MockRequest
./addons/website_sale/tests/test_website_sequence.py:        with MockRequest(env, website=self.website.with_env(env)) as req:
./addons/website_sale/tests/test_website_sale_cart_abandoned.py:from unittest.mock import patch
./addons/website_sale/tests/test_delivery_controller.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale/tests/test_delivery_controller.py:        with MockRequest(website.env, website=website, sale_order_id=self.empty_cart.id) as request, self.assertRaises(UserError):
./addons/website_sale/tests/test_delivery_controller.py:        with MockRequest(website.env, website=website, sale_order_id=self.empty_cart.id):
./addons/website_sale/tests/test_website_sale_cart.py:from unittest.mock import patch
./addons/website_sale/tests/test_website_sale_cart.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale/tests/test_website_sale_cart.py:        with self.assertRaises(UserError), MockRequest(website.env, website=website):
./addons/website_sale/tests/test_website_sale_cart.py:        with self.assertRaises(UserError), MockRequest(website.env, website=website):
./addons/website_sale/tests/test_website_sale_cart.py:        with self.assertRaises(UserError), MockRequest(website.env, website=website):
./addons/website_sale/tests/test_website_sale_cart.py:        with self.assertRaises(UserError), MockRequest(website.env, website=website):
./addons/website_sale/tests/test_website_sale_cart.py:        by mocking that function to return the "service" product type.
./addons/website_sale/tests/test_website_sale_cart.py:            MockRequest(self.env, website=website_prevent_zero_price)
./addons/website_sale/tests/test_website_sale_cart.py:            MockRequest(self.env, website=website_prevent_zero_price),
./addons/website_sale/tests/test_website_sale_cart.py:            with MockRequest(self.env, website=website_prevent_zero_price):
./addons/website_sale/tests/test_website_sale_cart.py:        with MockRequest(website.env, website=website) as request:
./addons/website_sale/tests/test_website_sale_cart.py:        with MockRequest(website.env, website=website):
./addons/website_sale/tests/test_website_sale_cart.py:        with MockRequest(website.env, website=website) as request:
./addons/website_sale/tests/test_website_sale_cart.py:        with MockRequest(website.env, website=website, country_code='BE') as request:
./addons/website_sale/tests/test_website_sale_cart.py:        with MockRequest(self.env(user=user), website=website) as request:
./addons/website_sale/tests/test_website_sale_cart.py:        with MockRequest(self.env(user=user), website=website) as request:
./addons/website_sale/tests/test_website_sale_cart.py:            MockRequest(website.env, website=website) as request,
./addons/website_sale/tests/test_website_sale_cart.py:        with MockRequest(
./addons/website_sale/tests/test_website_sale_cart_payment.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale/tests/test_website_sale_cart_payment.py:            with MockRequest(self.env, website=self.website, sale_order_id=self.cart.id) as request:
./addons/website_sale/tests/test_website_sale_cart_payment.py:            with MockRequest(self.env, website=self.website, sale_order_id=self.cart.id) as request:
./addons/website_sale/tests/test_website_sale_product_template.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale/tests/test_website_sale_product_template.py:        with MockRequest(env, website=self.website.with_env(env)):
./addons/website_sale/tests/test_website_sale_product_template.py:        with MockRequest(website.env, website=website):
./addons/website_sale/tests/test_website_sale_product_template.py:        with MockRequest(website.env, website=website):
./addons/website_sale/tests/test_website_sale_product_filters.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale/tests/test_website_sale_product_filters.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_product_filters.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_product_filters.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_product_filters.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_sale_product_filters.py:        with MockRequest(self.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:from odoo.addons.website.tools import MockRequest
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(self.product.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(self.product.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(product_template.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(self.product.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(self.product.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(self.product.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(self.product.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(self.product.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(self.product.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(self.product.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(self.product.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(self.product.env, website=self.website):
./addons/website_sale/tests/test_website_editor.py:        with MockRequest(self.product.env, website=self.website):
./addons/project/static/tests/project_task_subtask.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project/static/tests/project_task_subtask.test.js:import { Command, mountView, MockServer, onRpc } from "@web/../tests/web_test_helpers";
./addons/project/static/tests/project_task_subtask.test.js:            const newSubtaskId = MockServer.env["project.task"].create({
./addons/project/static/tests/project_task_subtask.test.js:            MockServer.env["project.task"].write(parent_id, {
./addons/project/static/tests/project_task_priority_switch.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project/static/tests/project_task_burndown_chart.test.js:    mockService,
./addons/project/static/tests/project_task_burndown_chart.test.js:mockService("notification", () => ({
./addons/project/static/tests/project_is_favorite_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project/static/tests/project_task_analysis.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project/static/tests/project_task_analysis.test.js:    mockService,
./addons/project/static/tests/project_task_analysis.test.js:    mockService("action", {
./addons/project/static/tests/project_task_analysis.test.js:    mockService("action", {
./addons/project/static/tests/project_task_state_selection.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project/static/tests/project_task_calendar.test.js:import { mockDate, animationFrame, runAllTimers } from "@odoo/hoot-mock";
./addons/project/static/tests/project_task_calendar.test.js:    mockDate("2024-01-03 12:00:00", +0);
./addons/project/static/tests/project_project.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project/static/tests/project_task_list_view.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project/static/tests/project_notebook_task_list.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project/tests/test_project_flow.py:        with self.mock_mail_gateway():
./addons/project/tests/test_project_mail_features.py:        with self.mock_mail_gateway():
./addons/project/tests/test_project_mail_features.py:                with self.mock_mail_gateway():
./addons/project/tests/test_project_mail_features.py:                with self.mock_mail_gateway():
./addons/project/tests/test_project_mail_features.py:        with self.mock_mail_gateway():
./addons/project/tests/test_project_mail_features.py:        with self.mock_mail_gateway():
./addons/project/tests/test_project_mail_features.py:        with self.mock_mail_gateway():
./addons/project/tests/test_project_mail_features.py:        with self.mock_mail_gateway():
./addons/project/tests/test_project_mail_features.py:        with self.mock_mail_gateway():
./addons/project/__manifest__.py:            'project/static/tests/mock_server/**/*',
./addons/test_crm_full/tests/common.py:from odoo.addons.crm_iap_mine.tests.common import MockIAPReveal  # MockIAPEnrich
./addons/test_crm_full/tests/common.py:from odoo.addons.website.tests.test_website_visitor import MockVisitor
./addons/test_crm_full/tests/common.py:class TestCrmFullCommon(TestCrmCommon, MockIAPReveal, MockVisitor):
./addons/test_crm_full/tests/common.py:        # Mock dates to have reproducible computed fields based on time
./addons/survey/static/tests/components/question_page_one2many_field_tests.js:import { makeServerError } from "@web/../tests/helpers/mock_server";
./addons/survey/static/tests/components/question_page_one2many_field_tests.js:            mockRPC(route, args) {
./addons/survey/static/tests/components/question_page_one2many_field_tests.js:            mockRPC(route, args) {
./addons/survey/static/tests/components/update_flag_field_tests.js:            mockRPC(route, args) {
./addons/survey/static/tests/fields/radio_selection_field_with_filter.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/survey/tests/test_survey_invite.py:        with self.mock_mail_gateway():
./addons/survey/tests/test_survey_invite.py:        with self.mock_mail_gateway():
./addons/survey/tests/test_survey_results.py:from odoo.addons.website.tools import MockRequest
./addons/survey/tests/test_survey_results.py:        with MockRequest(self.env):
./addons/survey/tests/test_survey_results.py:        with MockRequest(self.env):
./addons/survey/tests/test_survey_results.py:        with MockRequest(self.env):
./addons/survey/tests/test_survey_results.py:        with MockRequest(self.env):
./addons/survey/tests/test_survey_results.py:        with MockRequest(self.env):
./addons/survey/tests/test_survey_results.py:        with MockRequest(self.env), self.assertQueryCount(expected_query_count):
./addons/survey/tests/test_survey_ui_session.py:from unittest.mock import patch
./addons/survey/tests/test_survey_ui_session.py:        def action_open_session_manager_mock(self):
./addons/survey/tests/test_survey_ui_session.py:            """ Mock original method to ensure we are not using another tab
./addons/survey/tests/test_survey_ui_session.py:        with patch('odoo.addons.survey.models.survey_survey.SurveySurvey.action_open_session_manager', action_open_session_manager_mock):
./addons/survey/tests/test_survey_ui_session.py:        with patch('odoo.addons.survey.models.survey_survey.SurveySurvey.action_open_session_manager', action_open_session_manager_mock):
./addons/survey/tests/test_certification_flow.py:from unittest.mock import patch
./addons/survey/tests/test_certification_flow.py:from odoo.addons.mail.tests.common import MockEmail
./addons/survey/tests/test_certification_flow.py:class TestCertificationFlow(common.TestSurveyCommon, MockEmail, HttpCase):
./addons/survey/tests/test_certification_flow.py:        with self.mock_mail_gateway():
./addons/survey/tests/test_survey.py:        with self.mock_mail_app():
./addons/marketing_card/tests/test_campaign.py:from unittest.mock import patch
./addons/marketing_card/tests/test_campaign.py:from .common import MarketingCardCommon, mock_image_render, VALID_JPEG
./addons/marketing_card/tests/test_campaign.py:        with self.mock_image_renderer():
./addons/marketing_card/tests/test_campaign.py:        with self.mock_image_renderer():
./addons/marketing_card/tests/test_campaign.py:        with self.mock_image_renderer():
./addons/marketing_card/tests/test_campaign.py:        with self.mock_mail_gateway(), self.assertQueryCount(61):
./addons/marketing_card/tests/test_campaign.py:        with self.mock_image_renderer():
./addons/marketing_card/tests/test_campaign.py:        with self.mock_image_renderer():
./addons/marketing_card/tests/test_campaign.py:        with self.mock_image_renderer():
./addons/marketing_card/tests/test_campaign.py:    @mock_image_render
./addons/marketing_card/tests/test_campaign.py:        with self.assertRaises(exceptions.UserError), self.mock_image_renderer():
./addons/marketing_card/tests/test_campaign.py:        with self.mock_image_renderer():
./addons/marketing_card/tests/common.py:from unittest.mock import patch
./addons/marketing_card/tests/common.py:def mock_image_render(func):
./addons/marketing_card/tests/common.py:        with self.mock_image_renderer(collect_params=False):
./addons/marketing_card/tests/common.py:class MockImageRender(BaseCase):
./addons/marketing_card/tests/common.py:    def mock_image_renderer(self, collect_params=True):
./addons/marketing_card/tests/common.py:class MarketingCardCommon(TransactionCase, MockImageRender):
./addons/website_sale_collect/tests/test_delivery_carrier.py:from unittest.mock import patch
./addons/website_sale_collect/tests/test_delivery_carrier.py:from odoo.addons.website_sale.tests.common import MockRequest
./addons/website_sale_collect/tests/test_delivery_carrier.py:        ), MockRequest(self.env, website=self.website, sale_order_id=so.id):
./addons/website_sale_collect/tests/test_in_store_delivery.py:from unittest.mock import patch
./addons/spreadsheet_dashboard/static/tests/mobile/mobile_dashboard_action.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet_dashboard/static/tests/clickable_cells/clickable_cells.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet_dashboard/static/tests/helpers/dashboard_action.js:import { makeSpreadsheetMockEnv } from "@spreadsheet/../tests/helpers/model";
./addons/spreadsheet_dashboard/static/tests/helpers/dashboard_action.js: * @param {function} [params.mockRPC]
./addons/spreadsheet_dashboard/static/tests/helpers/dashboard_action.js:    await makeSpreadsheetMockEnv(params);
./addons/spreadsheet_dashboard/static/tests/helpers/data.js:function mockDashboardDataController(request) {
./addons/spreadsheet_dashboard/static/tests/helpers/data.js:onRpc("/spreadsheet/dashboard/data/*", mockDashboardDataController, { pure: true });
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_loader.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_loader.test.js:import { makeSpreadsheetMockEnv } from "@spreadsheet/../tests/helpers/model";
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_loader.test.js: * @param {function} [params.mockRPC]
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_loader.test.js:    const env = await makeSpreadsheetMockEnv({
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_loader.test.js:        mockRPC: params.mockRPC,
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_loader.test.js:        mockRPC: function (route, args) {
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_loader.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_loader.test.js:        mockRPC: function (route, args) {
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_loader.test.js:        mockRPC: function (route, args) {
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_action.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_action.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_action.test.js:        mockRPC: function (route, { model, method, args }) {
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_action.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_dashboard/static/tests/dashboard/dashboard_action.test.js:        mockRPC: async function (route, args) {
./addons/account_edi_ubl_cii/tests/test_partner_peppol_fields.py:from unittest.mock import patch
./addons/account_edi_ubl_cii/tests/test_partner_peppol_fields.py:        """ Mock _build_error_peppol_endpoint"""
./addons/calendar_sms/tests/test_calendar_sms.py:        with self.mockSMSGateway():
./addons/website_event_sale/tests/test_website_event_sale_pricelist.py:from odoo.addons.website_sale.tests.common import MockRequest
./addons/website_event_sale/tests/test_website_event_sale_pricelist.py:        with MockRequest(self.env, website=self.website, sale_order_id=self.empty_cart.id) as req:
./addons/spreadsheet_account/static/tests/ui/accounting_drilldown.test.js:import { mockService } from "@web/../tests/web_test_helpers";
./addons/spreadsheet_account/static/tests/ui/accounting_drilldown.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet_account/static/tests/ui/accounting_drilldown.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/ui/accounting_drilldown.test.js:    mockService("action", { doAction: () => {} });
./addons/spreadsheet_account/static/tests/ui/accounting_drilldown.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/ui/accounting_drilldown.test.js:    mockService("action", { doAction: () => {} });
./addons/spreadsheet_account/static/tests/ui/accounting_drilldown.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/mock_server.js:    .category("mock_server")
./addons/spreadsheet_account/static/tests/mock_server.js:            const records = this.mockSearchRead(
./addons/spreadsheet_account/static/tests/model/residual_amount.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/residual_amount.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/accounting.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/accounting.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/accounting.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/accounting.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/accounting.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/accounting.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/accounting.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/accounting.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/accounting.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/accounting.test.js:        mockRPC: async function (route, { method, args }) {
./addons/spreadsheet_account/static/tests/model/fiscal_year.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/fiscal_year.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/fiscal_year.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/fiscal_year.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/partner_balance.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet_account/static/tests/model/partner_balance.test.js:        mockRPC: async function (route, args) {
./addons/hr_timesheet/static/tests/hr_timesheet_models.js:import { mockDate } from "@odoo/hoot-mock";
./addons/hr_timesheet/static/tests/hr_timesheet_models.js:    mockDate("2017-01-25 00:00:00");
./addons/hr_timesheet/static/tests/task_with_hours.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/account_edi/tests/common.py:from unittest.mock import patch
./addons/account_edi/tests/common.py:def _generate_mocked_needs_web_services(needs_web_services):
./addons/account_edi/tests/common.py:def _mocked_get_move_applicability(edi_format, move):
./addons/account_edi/tests/common.py:def _mocked_check_move_configuration_success(edi_format, move):
./addons/account_edi/tests/common.py:def _mocked_check_move_configuration_fail(edi_format, move):
./addons/account_edi/tests/common.py:    return ['Fake error (mocked)']
./addons/account_edi/tests/common.py:def _mocked_cancel_success(edi_format, invoices):
./addons/account_edi/tests/common.py:            with cls.mock_edi(cls, _needs_web_services_method=_generate_mocked_needs_web_services(True)):
./addons/account_edi/tests/common.py:    def mock_edi(self,
./addons/account_edi/tests/common.py:                 _get_move_applicability_method=_mocked_get_move_applicability,
./addons/account_edi/tests/common.py:                 _needs_web_services_method=_generate_mocked_needs_web_services(False),
./addons/account_edi/tests/common.py:                 _check_move_configuration_method=_mocked_check_move_configuration_success,
./addons/l10n_ro_edi_stock/tests/test_etransport_flows.py:from unittest.mock import patch
./addons/project_mail_plugin/tests/test_controller.py:from unittest.mock import patch
./addons/account_payment/tests/test_payment_provider.py:        with self.mocked_get_payment_method_information():
./addons/account_payment/tests/common.py:from unittest.mock import patch
./addons/account_payment/tests/common.py:        with cls.mocked_get_payment_method_information(cls):
./addons/account_payment/tests/common.py:    def mocked_get_payment_method_information(self):
./addons/account_payment/tests/test_account_payment.py:from unittest.mock import patch
./addons/account_payment/tests/test_account_payment.py:        with self.mocked_get_payment_method_information():
./addons/account_payment/tests/test_payment_flows.py:from unittest.mock import patch
./addons/account_payment/tests/test_payment_flows.py:        with patch.object(CustomerPortal, '_document_check_access') as mock:
./addons/account_payment/tests/test_payment_flows.py:                mock.call_count, 0, msg="No check should be made when invoice_id is not provided."
./addons/account_payment/tests/test_payment_flows.py:            mock.reset_mock()
./addons/account_payment/tests/test_payment_flows.py:                mock.call_count, 1, msg="The check should be made as invoice_id is provided."
./addons/account_payment/tests/test_payment_flows.py:        def _document_check_access_mock(*_args, **_kwargs):
./addons/account_payment/tests/test_payment_flows.py:            CustomerPortal, '_document_check_access', _document_check_access_mock
./addons/account_payment/tests/test_payment_flows.py:        ), patch('odoo.addons.payment.utils.check_access_token') as check_payment_access_token_mock:
./addons/account_payment/tests/test_payment_flows.py:                check_payment_access_token_mock.call_count,
./addons/pos_online_payment_self_order/tests/test_self_order_frontend.py:from unittest.mock import patch
./addons/event/tests/test_event_mail_schedule.py:from unittest.mock import patch
./addons/event/tests/test_event_mail_schedule.py:        with cls.mock_datetime_and_now(cls, cls.reference_now):
./addons/event/tests/test_event_mail_schedule.py:                stack.enter_context(self.mock_datetime_and_now(freeze_date))
./addons/event/tests/test_event_mail_schedule.py:            stack.enter_context(self.mock_mail_gateway())
./addons/event/tests/test_event_mail_schedule.py:            stack.enter_context(self.mock_mail_app())
./addons/event/tests/test_event_mail_schedule.py:             ) as mock_exec, \
./addons/event/tests/test_event_mail_schedule.py:             self.mock_datetime_and_now(now), self.mock_mail_gateway(), \
./addons/event/tests/test_event_mail_schedule.py:            mock_exec.call_count, 5,
./addons/event/tests/test_event_mail_schedule.py:            ) as mock_exec:
./addons/event/tests/test_event_mail_schedule.py:            mock_exec.call_count, 3,
./addons/event/tests/test_event_mail_schedule.py:        with self.mock_datetime_and_now(now), self.mock_mail_gateway():
./addons/event/tests/test_event_mail_schedule.py:             ) as mock_exec:
./addons/event/tests/test_event_mail_schedule.py:            mock_exec.call_count, 1,
./addons/event/tests/test_event_mail_schedule.py:        with self.mock_datetime_and_now(now_start), self.mock_mail_gateway():
./addons/event/tests/test_event_mail_schedule.py:        with self.mock_datetime_and_now(now_start + relativedelta(hours=1)), self.mock_mail_gateway():
./addons/event/tests/test_event_mail_schedule.py:             self.mock_datetime_and_now(self.reference_now + relativedelta(days=3)), \
./addons/event/tests/test_event_mail_schedule.py:             self.mock_mail_gateway(), self.mock_mail_app():
./addons/event/tests/test_event_mail_schedule.py:        with self.assertQueryCount(36), self.mock_datetime_and_now(reference_now), \
./addons/event/tests/test_event_mail_schedule.py:             self.mock_mail_gateway():
./addons/event/tests/test_event_mail_schedule.py:        self.assertEqual(self.mail_mail_create_mocked.call_count, 0)
./addons/event/tests/test_event_mail_schedule.py:             self.mock_datetime_and_now(reference_now + relativedelta(minutes=10)), \
./addons/event/tests/test_event_mail_schedule.py:             self.mock_mail_gateway():
./addons/event/tests/test_event_mail_schedule.py:        self.assertEqual(self.mail_mail_create_mocked.call_count, 1,
./addons/event/tests/test_event_mail_schedule.py:             self.mock_datetime_and_now(reference_now + relativedelta(minutes=10)), \
./addons/event/tests/test_event_mail_schedule.py:             self.mock_mail_gateway():
./addons/event/tests/test_event_mail_schedule.py:        self.assertEqual(self.mail_mail_create_mocked.call_count, 0)
./addons/event/tests/test_event_mail_schedule.py:        with self.mock_datetime_and_now(self.reference_now):
./addons/event/tests/test_event_mail_schedule.py:        with self.mock_datetime_and_now(self.reference_now):
./addons/event/tests/test_event_mail_schedule.py:                ) as mock_exec, \
./addons/event/tests/test_event_mail_schedule.py:                     self.mock_datetime_and_now(test_now), \
./addons/event/tests/test_event_mail_schedule.py:                     self.mock_mail_gateway():
./addons/event/tests/test_event_mail_schedule.py:                self.assertEqual(mock_exec.called, should_call)
./addons/event/tests/test_event_mail_schedule.py:        with self.mock_datetime_and_now(now):
./addons/event/tests/test_event_mail_schedule.py:        with self.mock_datetime_and_now(now), self.mock_mail_gateway():
./addons/event/tests/test_mailing.py:from odoo.addons.mail.tests.common import MockEmail
./addons/event/tests/test_mailing.py:class TestMailing(EventCase, MockEmail):
./addons/event/tests/test_mailing.py:        with cls.mock_datetime_and_now(cls, cls.reference_now):
./addons/event/tests/test_mailing.py:                with self.mock_mail_gateway(), self.mock_datetime_and_now(self.event_date_begin):
./addons/event/tests/test_event_internals.py:        # Mock dates to have reproducible computed fields based on time
./addons/event/tests/test_event_internals.py:        # Checks case when mocked today changes date before event, when event.date_tz considered
./addons/event/tests/test_event_internals.py:        # Checks case when event changes date before mocked today, when event.date_tz considered
./addons/hr_calendar/static/tests/helpers/mock_server/mock_server.js:import { MockServer } from "@web/../tests/helpers/mock_server";
./addons/hr_calendar/static/tests/helpers/mock_server/mock_server.js:patch(MockServer.prototype, {
./addons/digest/tests/test_digest.py:from unittest.mock import patch
./addons/digest/tests/test_digest.py:    def mock_datetime_and_now(self, mock_dt):
./addons/digest/tests/test_digest.py:        in addition to standard datetime mocks. Used mainly to detect sync
./addons/digest/tests/test_digest.py:        with freeze_time(mock_dt), \
./addons/digest/tests/test_digest.py:             patch.object(self.env.cr, 'now', lambda: mock_dt):
./addons/digest/tests/test_digest.py:        with cls.mock_datetime_and_now(cls, cls.reference_datetime):
./addons/digest/tests/test_digest.py:        with cls.mock_datetime_and_now(cls, log_dt):
./addons/digest/tests/test_digest.py:        with self.mock_mail_gateway():
./addons/digest/tests/test_digest.py:        with self.mock_mail_gateway():
./addons/digest/tests/test_digest.py:        with self.mock_datetime_and_now(current_dt), \
./addons/digest/tests/test_digest.py:             self.mock_mail_gateway():
./addons/digest/tests/test_digest.py:        with self.mock_datetime_and_now(current_dt), \
./addons/digest/tests/test_digest.py:             self.mock_mail_gateway():
./addons/digest/tests/test_digest.py:        with self.mock_datetime_and_now(current_dt), \
./addons/digest/tests/test_digest.py:             self.mock_mail_gateway():
./addons/digest/tests/test_digest.py:                with self.mock_datetime_and_now(self.reference_datetime), \
./addons/digest/tests/test_digest.py:                     self.mock_mail_gateway():
./addons/digest/tests/test_digest.py:        with self.mock_mail_gateway():
./addons/base_vat/tests/test_validate_ruc.py:from unittest.mock import patch
./addons/crm_iap_enrich/tests/test_lead_enrich.py:from odoo.addons.iap.tests.common import MockIAPEnrich
./addons/crm_iap_enrich/tests/test_lead_enrich.py:class TestLeadEnrich(TestCrmCommon, MockIAPEnrich):
./addons/crm_iap_enrich/tests/test_lead_enrich.py:        with self.mockIAPEnrichGateway(email_data={'test1': {'country_code': 'AU', 'state_code': 'NSW'}}):
./addons/crm_iap_enrich/tests/test_lead_enrich.py:    #     with self.mockIAPEnrichGateway(sim_error='credit'):
./addons/crm_iap_enrich/tests/test_lead_enrich.py:        with self.mockIAPEnrichGateway(sim_error='jsonrpc_exception'):
./addons/pos_adyen/static/tests/tours/adyen_tour.js:                    // request for payment has been sent to the adyen server ( in this case the mocked server )
./addons/pos_adyen/static/tests/tours/adyen_tour.js:                    // The simplest way to mock this notification is to send it ourselves here.
./addons/pos_adyen/tests/test_basic.py:from unittest.mock import patch
./addons/website_slides/static/tests/mock_server/models/slide_channel.js:import { DEFAULT_MAIL_VIEW_ID } from "@mail/../tests/mock_server/mock_models/constants";
./addons/website_slides/static/tests/mock_server/models/mail_activity.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/website_slides/static/tests/website_slides_test_helpers.js:import { SlideChannel } from "@website_slides/../tests/mock_server/models/slide_channel";
./addons/website_slides/static/tests/website_slides_test_helpers.js:import { MailActivity } from "@website_slides/../tests/mock_server/models/mail_activity";
./addons/website_slides/tests/test_slide_channel.py:from unittest.mock import patch
./addons/website_slides/tests/test_slide_channel.py:        with self.mock_mail_gateway():
./addons/website_slides/tests/test_slide_channel.py:        with self.mock_mail_gateway():
./addons/website_slides/tests/test_slide_channel.py:        with self.mock_mail_gateway():
./addons/website_slides/tests/test_slide_channel.py:        with self.mock_mail_gateway():
./addons/website_slides/tests/test_slide_channel.py:        with self.mock_mail_gateway():
./addons/payment_mercado_pago/tests/test_payment_transaction.py:from unittest.mock import patch
./addons/payment_mercado_pago/tests/test_processing_flows.py:from unittest.mock import patch
./addons/payment_mercado_pago/tests/test_processing_flows.py:        ) as handle_notification_data_mock:
./addons/payment_mercado_pago/tests/test_processing_flows.py:        self.assertEqual(handle_notification_data_mock.call_count, 1)
./addons/payment_mercado_pago/tests/test_processing_flows.py:        ) as handle_notification_data_mock:
./addons/payment_mercado_pago/tests/test_processing_flows.py:        self.assertEqual(handle_notification_data_mock.call_count, 1)
./addons/l10n_id/tests/test_qris_transaction.py:from unittest.mock import patch
./addons/l10n_id/tests/test_qris.py:from unittest.mock import patch
./addons/payment_razorpay/tests/test_payment_transaction.py:from unittest.mock import patch
./addons/payment_razorpay/tests/test_payment_transaction.py:        ) as tokenize_mock:
./addons/payment_razorpay/tests/test_payment_transaction.py:                tokenize_mock.call_count,
./addons/payment_razorpay/tests/test_payment_transaction.py:        ) as tokenize_mock:
./addons/payment_razorpay/tests/test_payment_transaction.py:            self.assertEqual(tokenize_mock.call_count, 1)
./addons/payment_razorpay/tests/test_processing_flows.py:from unittest.mock import patch
./addons/payment_razorpay/tests/test_processing_flows.py:        ) as handle_notification_data_mock:
./addons/payment_razorpay/tests/test_processing_flows.py:        self.assertEqual(handle_notification_data_mock.call_count, 1)
./addons/payment_razorpay/tests/test_processing_flows.py:        ) as signature_check_mock, patch(
./addons/payment_razorpay/tests/test_processing_flows.py:            self.assertEqual(signature_check_mock.call_count, 1)
./addons/test_mail/static/tests/attachment_view.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/test_mail/static/tests/tracking_value.test.js:import { mockDate, mockTimeZone } from "@odoo/hoot-mock";
./addons/test_mail/static/tests/tracking_value.test.js:beforeEach(() => mockTimeZone(0));
./addons/test_mail/static/tests/tracking_value.test.js:    mockDate("2018-12-01");
./addons/test_mail/static/tests/tracking_value.test.js:    mockDate("2018-12-01");
./addons/test_mail/static/tests/tracking_value.test.js:    mockDate("2018-12-01", 3);
./addons/test_mail/static/tests/tracking_value.test.js:    mockTimeZone(3);
./addons/test_mail/static/tests/chatter.test.js:import { MockServer, onRpc } from "@web/../tests/web_test_helpers";
./addons/test_mail/static/tests/chatter.test.js:import { mail_data } from "@mail/../tests/mock_server/mail_mock_server";
./addons/test_mail/static/tests/chatter.test.js:            const res = await mail_data.bind(MockServer.current)(request);
./addons/test_mail/static/tests/systray_activity_menu.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/test_mail/static/tests/systray_activity_menu.test.js:import { asyncStep, mockService, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/test_mail/static/tests/systray_activity_menu.test.js:beforeEach(() => mockDate("2023-4-8 10:00:00", 0));
./addons/test_mail/static/tests/systray_activity_menu.test.js:    mockService("action", {
./addons/test_mail/static/tests/test_mail_test_helpers.js:import { MailTestActivity } from "@test_mail/../tests/mock_server/models/mail_test_activity";
./addons/test_mail/static/tests/test_mail_test_helpers.js:import { MailTestMultiCompany } from "@test_mail/../tests/mock_server/models/mail_test_multi_company";
./addons/test_mail/static/tests/test_mail_test_helpers.js:import { MailTestMultiCompanyRead } from "@test_mail/../tests/mock_server/models/mail_test_multi_company_read";
./addons/test_mail/static/tests/test_mail_test_helpers.js:import { MailTestProperties } from "@test_mail/../tests/mock_server/models/mail_test_properties";
./addons/test_mail/static/tests/test_mail_test_helpers.js:import { MailTestSimpleMainAttachment } from "./mock_server/models/mail_test_simple_main_attachment";
./addons/test_mail/static/tests/test_mail_test_helpers.js:import { MailTestSimple } from "@test_mail/../tests/mock_server/models/mail_test_simple";
./addons/test_mail/static/tests/test_mail_test_helpers.js:import { MailTestTrackAll } from "@test_mail/../tests/mock_server/models/mail_test_track_all";
./addons/test_mail/static/tests/activity.test.js:} from "@mail/../tests/mock_server/mock_models/constants";
./addons/test_mail/static/tests/activity.test.js:import { animationFrame, mockDate } from "@odoo/hoot-mock";
./addons/test_mail/static/tests/activity.test.js:import { MailTestActivity } from "@test_mail/../tests/mock_server/models/mail_test_activity";
./addons/test_mail/static/tests/activity.test.js:    mockService,
./addons/test_mail/static/tests/activity.test.js:import { MailActivitySchedule } from "@mail/../tests/mock_server/mock_models/mail_activity_schedule";
./addons/test_mail/static/tests/activity.test.js:        // Remove domain term used to filter record having "done" activities (not understood by the getRecords mock)
./addons/test_mail/static/tests/activity.test.js:    mockDate("2023-4-8 10:00:00", 0);
./addons/test_mail/static/tests/activity.test.js:    mockService("action", {
./addons/test_mail/static/tests/activity.test.js:    mockService("action", {
./addons/test_mail/static/tests/activity.test.js:    mockService("action", {
./addons/test_mail/static/tests/activity.test.js:    mockService("action", {
./addons/test_mail/static/tests/activity.test.js:    mockService("action", {
./addons/test_mail/static/tests/activity.test.js:    mockService("action", {
./addons/test_mail/static/tests/activity.test.js:    mockService("action", {
./addons/test_mail/tests/test_mail_activity_plan.py:                    with self._mock_activities():
./addons/test_mail/tests/test_mail_activity_plan.py:                    with self._mock_activities(), freeze_time(self.reference_now):
./addons/test_mail/tests/test_mail_activity_plan.py:                    with self._mock_activities():
./addons/test_mail/tests/test_mail_activity_plan.py:                    with self._mock_activities():
./addons/test_mail/tests/test_mail_activity_plan.py:                with self._mock_activities():
./addons/test_mail/tests/test_mail_activity_plan.py:                with self._mock_activities():
./addons/test_mail/tests/test_mail_message_security.py:from unittest.mock import patch
./addons/test_mail/tests/test_mail_message_security.py:            with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_thread_internals.py:from unittest.mock import patch
./addons/test_mail/tests/test_mail_thread_internals.py:from unittest.mock import DEFAULT
./addons/test_mail/tests/test_mail_thread_internals.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_thread_internals.py:            self.connect_mocked.side_effect = _connect
./addons/test_mail/tests/test_mail_thread_internals.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_thread_internals.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_thread_internals.py:        with self.mock_mail_gateway(mail_unlink_sent=False), self.mock_mail_app():
./addons/test_mail/tests/test_performance.py:from unittest.mock import patch
./addons/test_mail/tests/test_performance.py:        with self.assertQueryCount(admin=50, employee=50), self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_push.py:from unittest.mock import patch
./addons/test_mail/tests/test_mail_push.py:                push_to_end_point.reset_mock()
./addons/test_mail/tests/test_mail_push.py:        push_to_end_point.reset_mock()
./addons/test_mail/tests/test_mail_push.py:        push_to_end_point.reset_mock()
./addons/test_mail/tests/test_mail_push.py:        push_to_end_point.reset_mock()
./addons/test_mail/tests/test_mail_push.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_push.py:            with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_push.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_push.py:        push_to_end_point.reset_mock()
./addons/test_mail/tests/test_mail_push.py:        push_to_end_point.reset_mock()
./addons/test_mail/tests/test_mail_mail.py:from unittest.mock import call, patch, PropertyMock
./addons/test_mail/tests/test_mail_mail.py:        self._init_mail_mock()
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                # with self.mock_smtplib_connection():
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                 self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                 self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                self.assertEqual(self.mail_mail_private_send_mocked.call_count, exp_call_count)
./addons/test_mail/tests/test_mail_mail.py:            with self.mock_mail_gateway(), mute_logger('odoo.addons.mail.models.mail_mail'):
./addons/test_mail/tests/test_mail_mail.py:            with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:            with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:            _connect_current = self.connect_mocked.side_effect
./addons/test_mail/tests/test_mail_mail.py:                self.connect_mocked.side_effect = _connect
./addons/test_mail/tests/test_mail_mail.py:        self.connect_mocked.side_effect = _connect_current
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:            _send_current = self.send_email_mocked.side_effect
./addons/test_mail/tests/test_mail_mail.py:                self.send_email_mocked.side_effect = _send_email
./addons/test_mail/tests/test_mail_mail.py:                self.send_email_mocked.side_effect = _send_email
./addons/test_mail/tests/test_mail_mail.py:            self.send_email_mocked.side_effect = _send_current
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_smtplib_connection():
./addons/test_mail/tests/test_mail_mail.py:        self.assertEqual(self.find_mail_server_mocked.call_count, 4, 'Must be called only once per "mail from" when the mail server is not forced')
./addons/test_mail/tests/test_mail_mail.py:        self.assertEqual(self.connect_mocked.call_count, 4, 'Must be called once per batch which share the same mail server and the same smtp from')
./addons/test_mail/tests/test_mail_mail.py:        self.connect_mocked.assert_has_calls(
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_mail.py:    @patch('odoo.addons.base.models.ir_attachment.IrAttachment.file_size', new_callable=PropertyMock)
./addons/test_mail/tests/test_mail_mail.py:    def test_mail_mail_send_server_attachment_to_download_link(self, mock_attachment_file_size):
./addons/test_mail/tests/test_mail_mail.py:        mock_attachment_file_size.return_value = 1024 * 128
./addons/test_mail/tests/test_mail_mail.py:                'datas': 'IA==',  # a non-empty base64 content. We mock attachment file_size to simulate bigger size.
./addons/test_mail/tests/test_mail_mail.py:            with self.mock_smtplib_connection():
./addons/test_mail/tests/test_mail_multicompany.py:from unittest.mock import patch
./addons/test_mail/tests/test_mail_multicompany.py:                          autospec=True, side_effect=_original_car) as mock_msg_car:
./addons/test_mail/tests/test_mail_multicompany.py:            self.assertEqual(mock_msg_car.call_count, 2,
./addons/test_mail/tests/test_mail_multicompany.py:        def _mock_check_access(records, operation):
./addons/test_mail/tests/test_mail_multicompany.py:                                  side_effect=_mock_check_access):
./addons/test_mail/tests/test_mail_flow.py:        with self.mock_mail_gateway(), self.mock_mail_app():
./addons/test_mail/tests/test_mail_flow.py:        with self.mock_mail_gateway(), self.mock_mail_app():
./addons/test_mail/tests/test_mail_flow.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_flow.py:        with self.mock_mail_gateway(), self.mock_mail_app():
./addons/test_mail/tests/test_message_track.py:from unittest.mock import patch
./addons/test_mail/tests/test_message_track.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_track.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_track.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_track.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_track.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mail/tests/test_message_track.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_track.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_track.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_track.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mail/tests/test_ir_actions.py:        with self.mock_mail_app():
./addons/test_mail/tests/test_ir_actions.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail/tests/test_ir_actions.py:        with self.mock_mail_gateway(), self.mock_mail_app():
./addons/test_mail/tests/test_message_management.py:            self.connect_mocked.side_effect = _connect
./addons/test_mail/tests/test_message_management.py:        with self.mock_mail_gateway(), self.assertBus(expected_bus_notifications * 3):
./addons/test_mail/tests/test_message_management.py:        with self.mock_mail_gateway(), self.assertBus(expected_bus_notifications * 2):
./addons/test_mail/tests/test_message_management.py:        with self.mock_mail_gateway(), self.assertBus(expected_bus_notifications):
./addons/test_mail/tests/test_message_management.py:        with self.mock_mail_gateway(), self.assertBus([(self.cr.dbname, 'res.partner', self.partner_admin.id)] * 2):
./addons/test_mail/tests/test_message_management.py:        with self.mock_mail_gateway(), self.assertBus([(self.cr.dbname, 'res.partner', self.partner_admin.id)] * 2):
./addons/test_mail/tests/test_message_management.py:        with self.mock_mail_gateway(), self.assertBus(expected_bus_notifications):
./addons/test_mail/tests/test_invite.py:        with self.mock_mail_app(), self.mock_mail_gateway():
./addons/test_mail/tests/test_invite.py:        with self.mock_mail_app(), self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_followers.py:from unittest.mock import patch
./addons/test_mail/tests/test_mail_composer.py:from unittest.mock import patch
./addons/test_mail/tests/test_mail_composer.py:        with cls.mock_datetime_and_now(cls, cls.reference_now):
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_datetime_and_now(self.reference_now):
./addons/test_mail/tests/test_mail_composer.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_composer.py:                with self.mock_datetime_and_now(self.reference_now):
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail/tests/test_mail_composer.py:                    with self.mock_mail_gateway(mail_unlink_sent=False), \
./addons/test_mail/tests/test_mail_composer.py:                         self.mock_mail_app():
./addons/test_mail/tests/test_mail_composer.py:                with self.mock_mail_gateway(mail_unlink_sent=False), \
./addons/test_mail/tests/test_mail_composer.py:                     self.mock_mail_app(), \
./addons/test_mail/tests/test_mail_composer.py:                     self.mock_datetime_and_now(self.reference_now), \
./addons/test_mail/tests/test_mail_composer.py:                    with self.mock_mail_gateway(mail_unlink_sent=False), \
./addons/test_mail/tests/test_mail_composer.py:                         self.mock_mail_app(), \
./addons/test_mail/tests/test_mail_composer.py:                         self.mock_datetime_and_now(self.reference_now + timedelta(days=3)):
./addons/test_mail/tests/test_mail_composer.py:                with self.mock_mail_gateway(mail_unlink_sent=False), \
./addons/test_mail/tests/test_mail_composer.py:                     self.mock_mail_app():
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=False), self.mock_mail_app():
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=False), self.mock_mail_app():
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=True), self.mock_mail_app():
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=True), self.mock_mail_app():
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=True), self.mock_mail_app():
./addons/test_mail/tests/test_mail_composer.py:                with self.mock_mail_gateway(mail_unlink_sent=False), self.mock_mail_app():
./addons/test_mail/tests/test_mail_composer.py:                with self.mock_mail_gateway(mail_unlink_sent=False), self.mock_mail_app():
./addons/test_mail/tests/test_mail_composer.py:                with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail/tests/test_mail_composer.py:                self.assertEqual(self.mail_mail_create_mocked.call_count, exp_mail_create_count)
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail/tests/test_mail_composer.py:                with self.mock_mail_gateway(mail_unlink_sent=False), \
./addons/test_mail/tests/test_mail_composer.py:                     self.mock_datetime_and_now(self.reference_now):
./addons/test_mail/tests/test_mail_composer.py:                        with self.mock_datetime_and_now(self.reference_now + timedelta(days=2)):
./addons/test_mail/tests/test_mail_composer.py:                with self.mock_mail_gateway(mail_unlink_sent=False), \
./addons/test_mail/tests/test_mail_composer.py:                     self.mock_mail_app():
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail/tests/test_mail_composer.py:        self.assertEqual(self.build_email_mocked.call_count, 2, 'One build email per outgoing email')
./addons/test_mail/tests/test_mail_composer.py:        self.assertEqual(self.mail_mail_create_mocked.call_count, 1, 'Emails are created in batch')
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mail/tests/test_mail_composer.py:            with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail/tests/test_mail_composer.py:        self.assertEqual(self.build_email_mocked.call_count, 2)
./addons/test_mail/tests/test_mail_composer.py:        self.assertEqual(self.mail_mail_create_mocked.call_count, 2)
./addons/test_mail/tests/test_mail_composer.py:            with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail/tests/test_mail_composer.py:        self.assertEqual(self.build_email_mocked.call_count, 2)
./addons/test_mail/tests/test_mail_composer.py:        self.assertEqual(self.mail_mail_create_mocked.call_count, 2)
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=False), self.assertRaises(ValueError):
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=False), self.mock_mail_app():
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=False), self.mock_mail_app():
./addons/test_mail/tests/test_mail_composer.py:        with self.mock_mail_gateway(mail_unlink_sent=False), self.mock_mail_app():
./addons/test_mail/tests/test_mail_template.py:from unittest.mock import patch
./addons/test_mail/tests/test_mail_template.py:            """ safe_eval wraps 'datetime' and freeze_time does not mock it;
./addons/test_mail/tests/test_mail_template.py:                     self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_template.py:                self.assertEqual(self.mail_mail_create_mocked.call_count, exp_mail_create_count)
./addons/test_mail/tests/test_mail_activity.py:from unittest.mock import patch
./addons/test_mail/tests/test_mail_activity.py:from unittest.mock import DEFAULT
./addons/test_mail/tests/test_mail_activity.py:        class MockedDatetime(datetime):
./addons/test_mail/tests/test_mail_activity.py:        with patch('odoo.addons.mail.models.mail_activity.datetime', MockedDatetime):
./addons/test_mail/tests/test_mail_activity.py:        class MockedDatetime(datetime):
./addons/test_mail/tests/test_mail_activity.py:        with patch('odoo.addons.mail.models.mail_activity.datetime', MockedDatetime), \
./addons/test_mail/tests/test_mail_activity.py:            patch('odoo.addons.mail.models.mail_activity_mixin.datetime', MockedDatetime):
./addons/test_mail/tests/test_mail_activity.py:        class MockedDatetime(datetime):
./addons/test_mail/tests/test_mail_activity.py:        with patch('odoo.addons.mail.models.mail_activity.datetime', MockedDatetime):
./addons/test_mail/tests/test_message_post.py:from unittest.mock import patch
./addons/test_mail/tests/test_message_post.py:            with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway(), self.mock_mail_app():
./addons/test_mail/tests/test_message_post.py:                 self.mock_mail_gateway(), \
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:                          autospec=True, side_effect=_original_compute_subject) as mock_compute_subject, \
./addons/test_mail/tests/test_message_post.py:                          autospec=True, side_effect=_original_notify_headers) as mock_notify_headers, \
./addons/test_mail/tests/test_message_post.py:                          autospec=True, side_effect=_original_notify_mailvals) as mock_notify_mailvals, \
./addons/test_mail/tests/test_message_post.py:             self.mock_mail_gateway(), self.mock_mail_app():
./addons/test_mail/tests/test_message_post.py:        self.assertEqual(mock_compute_subject.call_count, 1,
./addons/test_mail/tests/test_message_post.py:        self.assertEqual(mock_notify_headers.call_count, 1,
./addons/test_mail/tests/test_message_post.py:        self.assertEqual(mock_notify_mailvals.call_count, 1,
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail/tests/test_message_post.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_datetime_and_now(now), \
./addons/test_mail/tests/test_message_post.py:        with self.mock_datetime_and_now(now):
./addons/test_mail/tests/test_message_post.py:        with self.mock_datetime_and_now(now + timedelta(days=5)), self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail/tests/test_message_post.py:        with self.mock_datetime_and_now(now + timedelta(days=5)), self.assertNoNotifications():
./addons/test_mail/tests/test_message_post.py:        with self.mock_datetime_and_now(now), \
./addons/test_mail/tests/test_message_post.py:             self.mock_mail_gateway(mail_unlink_sent=False), \
./addons/test_mail/tests/test_message_post.py:        with freeze_time(now), self.mock_mail_gateway(mail_unlink_sent=False):
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:            with self.subTest(source_ref=source_ref), self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_message_post.py:                with self.mock_mail_gateway(mail_unlink_sent=False), \
./addons/test_mail/tests/test_message_post.py:                        self.mock_mail_app():
./addons/test_mail/tests/test_message_post.py:                    with self.mock_mail_gateway(mail_unlink_sent=False), \
./addons/test_mail/tests/test_message_post.py:                         self.mock_mail_app():
./addons/test_mail/tests/test_mail_gateway.py:from unittest.mock import DEFAULT
./addons/test_mail/tests/test_mail_gateway.py:from unittest.mock import patch
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway(), self.mock_mail_app():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:                with self.mock_mail_gateway(), self.mock_mail_app():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:            with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway(), patch('odoo.addons.mail.models.mail_alias.MailAlias._alias_bounce_incoming_email',
./addons/test_mail/tests/test_mail_gateway.py:                                             autospec=True) as _alias_bounce_incoming_email_mock:
./addons/test_mail/tests/test_mail_gateway.py:        _alias_bounce_incoming_email_mock.assert_not_called()
./addons/test_mail/tests/test_mail_gateway.py:                                                 autospec=True) as _alias_bounce_incoming_email_mock:
./addons/test_mail/tests/test_mail_gateway.py:        _alias_bounce_incoming_email_mock.assert_called_once()
./addons/test_mail/tests/test_mail_gateway.py:        alias, message, message_dict = _alias_bounce_incoming_email_mock.call_args.args
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        self._init_mail_mock()
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway(), \
./addons/test_mail/tests/test_mail_gateway.py:            with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway(), \
./addons/test_mail/tests/test_mail_gateway.py:             patch.object(MailTestTicket, 'search_count', autospec=True, side_effect=_original_ticket_sc) as mock_ticket_sc, \
./addons/test_mail/tests/test_mail_gateway.py:             patch.object(MailTestGatewayGroups, 'search_count', autospec=True, side_effect=_original_groups_sc) as mock_groups_sc, \
./addons/test_mail/tests/test_mail_gateway.py:             patch.object(MailMessage, '_read_group', autospec=True, side_effect=_original_rgr) as mock_msg_rgr:
./addons/test_mail/tests/test_mail_gateway.py:        self.assertEqual(mock_ticket_sc.call_count, 1, 'Two alias creating tickets but one check anyway')
./addons/test_mail/tests/test_mail_gateway.py:        self.assertEqual(mock_groups_sc.call_count, 1, 'One alias creating groups')
./addons/test_mail/tests/test_mail_gateway.py:        self.assertEqual(mock_msg_rgr.call_count, 1, 'Only one model updating records, one call even if two aliases')
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:            with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:        with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:                with self.mock_mail_gateway():
./addons/test_mail/tests/test_mail_gateway.py:                with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/test_mail/tests/test_mail_scheduled_message.py:from unittest.mock import patch
./addons/test_mail/tests/test_mail_scheduled_message.py:        with cls.mock_datetime_and_now(cls, cls.reference_now):
./addons/test_mail/tests/test_mail_scheduled_message.py:        with self.mock_datetime_and_now(self.reference_now):
./addons/test_mail/tests/test_mail_scheduled_message.py:        with self.mock_mail_gateway(), \
./addons/test_mail/tests/test_mail_scheduled_message.py:            self.mock_mail_app(), \
./addons/test_mail/tests/test_mail_scheduled_message.py:            with self.mock_datetime_and_now('2022-12-24 14:00:00'),\
./addons/test_mail/models/mail_test_access.py:    _mail_post_access = 'write'  # default value but ease mock
./addons/test_mail/models/mail_test_access.py:    _mail_post_access = 'write'  # default value but ease mock
./addons/test_mail/models/test_mail_models.py:        """ To ease mocks """
./addons/test_mail/models/test_mail_models.py:        """ To ease mocks """
./addons/project_todo/static/tests/todo_conversion_form_view.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project_todo/static/tests/todo_conversion_form_view.test.js:import { ProjectTask } from "./mock_server/mock_models/project_task";
./addons/project_todo/static/tests/todo_calendar_view.test.js:import { mockDate, animationFrame } from "@odoo/hoot-mock";
./addons/project_todo/static/tests/todo_calendar_view.test.js:import { ProjectTask } from "./mock_server/mock_models/project_task";
./addons/project_todo/static/tests/todo_calendar_view.test.js:    mockDate("2022-01-03 12:00:00", +0);
./addons/project_todo/static/tests/todo_done_checkmark.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project_todo/static/tests/todo_done_checkmark.test.js:import { ProjectTask } from "./mock_server/mock_models/project_task";
./addons/project_todo/static/tests/todo_list_view.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project_todo/static/tests/todo_activity_wizard_view.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project_todo/static/tests/todo_activity_wizard_view.test.js:import { MailActivityTodoCreate } from "./mock_server/mock_models/mail_activity_todo_create";
./addons/project_todo/static/tests/todo_test_helpers.js:import { ProjectTask } from "./mock_server/mock_models/project_task";
./addons/project_todo/static/tests/todo_test_helpers.js:import { ProjectTags } from "./mock_server/mock_models/project_tags";
./addons/project_todo/static/tests/todo_test_helpers.js:import { MailActivityTodoCreate } from "./mock_server/mock_models/mail_activity_todo_create";
./addons/project_todo/static/tests/todo_form_view.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/project_todo/static/tests/todo_form_view.test.js:import { ProjectTask } from "./mock_server/mock_models/project_task";
./addons/base_iban/static/src/tests/base_iban_test_helpers.js:import { ResPartnerBank } from "./mock_server/mock_models/res_partner_bank";
./addons/base_iban/static/src/tests/iban_widget.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/payment_xendit/tests/test_payment_transaction.py:from unittest.mock import patch
./addons/payment_xendit/tests/test_payment_transaction.py:        ) as mock:
./addons/payment_xendit/tests/test_payment_transaction.py:            self.assertEqual(mock.call_count, 0)
./addons/payment_xendit/tests/test_payment_transaction.py:        ) as mock_req:
./addons/payment_xendit/tests/test_payment_transaction.py:            payload = mock_req.call_args.kwargs.get('payload')
./addons/payment_xendit/tests/test_payment_transaction.py:        ) as tokenize_mock:
./addons/payment_xendit/tests/test_payment_transaction.py:            self.assertEqual(tokenize_mock.call_count, 1)
./addons/payment_xendit/tests/test_payment_transaction.py:        ) as tokenize_check_mock:
./addons/payment_xendit/tests/test_payment_transaction.py:            self.assertEqual(tokenize_check_mock.call_count, 0)
./addons/payment_xendit/tests/test_processing_flows.py:from unittest.mock import patch
./addons/payment_xendit/tests/test_processing_flows.py:        ) as handle_notification_data_mock:
./addons/payment_xendit/tests/test_processing_flows.py:        self.assertEqual(handle_notification_data_mock.call_count, 1)
./addons/payment_xendit/tests/test_processing_flows.py:        ) as signature_check_mock:
./addons/payment_xendit/tests/test_processing_flows.py:            self.assertEqual(signature_check_mock.call_count, 1)
./addons/portal/tests/test_portal_wizard.py:        with self.mock_mail_gateway():
./addons/portal/tests/test_portal_wizard.py:        with self.mock_mail_gateway():
./addons/portal/tests/test_portal_wizard.py:        with self.mock_mail_gateway():
./addons/portal/tests/test_portal_wizard.py:        with self.assertRaises(UserError, msg='Should not be able to manage internal user'), self.mock_mail_gateway():
./addons/cloud_storage_azure/tests/test_cloud_storage_azure.py:from unittest.mock import patch
./addons/cloud_storage_azure/tests/test_cloud_storage_azure_attachment_controller.py:from unittest.mock import patch
./addons/hr_homeworking_calendar/static/tests/hr_org_chart_tests.js:const mockRegistry = registry.category("mock_server");
./addons/hr_homeworking_calendar/static/tests/hr_org_chart_tests.js:mockRegistry.add("get_worklocation", function(route, args) {
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:const mockRegistry = registry.category("mock_server");
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:async function createHomeWorkingView(serverData, workLocationMock) {
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:    mockRegistry.add("get_worklocation", () => {
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:        return workLocationMock;
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:        mockRPC(route, args) {
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:        const previousMock = mockRegistry.get("get_worklocation");
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:        mockRegistry.add("get_worklocation", previousMock, { force: true });
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:        const previousMock = mockRegistry.get("get_worklocation");
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:        mockRegistry.add("get_worklocation", previousMock, { force: true });
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:        const previousMock = mockRegistry.get("get_worklocation");
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:        mockRegistry.add("get_worklocation", previousMock, { force: true });
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:        const previousMock = mockRegistry.get("get_worklocation");
./addons/hr_homeworking_calendar/static/tests/calendar_homeworking_tests.js:        mockRegistry.add("get_worklocation", previousMock, { force: true });
./addons/l10n_my_edi/tests/test_submissions.py:from unittest.mock import patch
./addons/l10n_my_edi/tests/test_submissions.py:        with patch(CONTACT_PROXY_METHOD, new=self._test_01_mock):
./addons/l10n_my_edi/tests/test_submissions.py:        with patch(CONTACT_PROXY_METHOD, new=self._test_02_mock):
./addons/l10n_my_edi/tests/test_submissions.py:        with patch(CONTACT_PROXY_METHOD, new=self._test_03_mock):
./addons/l10n_my_edi/tests/test_submissions.py:        with patch(CONTACT_PROXY_METHOD, new=self._test_04_mock):
./addons/l10n_my_edi/tests/test_submissions.py:        with patch(CONTACT_PROXY_METHOD, new=self._test_05_mock):
./addons/l10n_my_edi/tests/test_submissions.py:        with patch(CONTACT_PROXY_METHOD, new=self._test_06_mock):
./addons/l10n_my_edi/tests/test_submissions.py:        self.get_submission_status_count = 0  # Needed for the mock; we get it twice. Once during submission and once from the cron.
./addons/l10n_my_edi/tests/test_submissions.py:        with patch(CONTACT_PROXY_METHOD, new=self._test_07_mock):
./addons/l10n_my_edi/tests/test_submissions.py:        with patch(CONTACT_PROXY_METHOD, new=self._test_08_mock), \
./addons/l10n_my_edi/tests/test_submissions.py:        with patch(CONTACT_PROXY_METHOD, new=self._test_09_mock):
./addons/l10n_my_edi/tests/test_submissions.py:        with patch(CONTACT_PROXY_METHOD, new=self._test_10_mock):
./addons/l10n_my_edi/tests/test_submissions.py:        with patch(CONTACT_PROXY_METHOD, new=self._test_11_mock):
./addons/l10n_my_edi/tests/test_submissions.py:    def _test_01_mock(self, endpoint, params):
./addons/l10n_my_edi/tests/test_submissions.py:        """ Basic mocked method that simulate what the proxy would return depending on the endpoint. """
./addons/l10n_my_edi/tests/test_submissions.py:    def _test_02_mock(self, endpoint, params):
./addons/l10n_my_edi/tests/test_submissions.py:        """ Basic mocked method that simulate what the proxy would return depending on the endpoint. """
./addons/l10n_my_edi/tests/test_submissions.py:    def _test_03_mock(self, endpoint, params):
./addons/l10n_my_edi/tests/test_submissions.py:        """ Basic mocked method that simulate what the proxy would return depending on the endpoint. """
./addons/l10n_my_edi/tests/test_submissions.py:    def _test_04_mock(self, endpoint, params):
./addons/l10n_my_edi/tests/test_submissions.py:        """ Basic mocked method that simulate what the proxy would return depending on the endpoint. """
./addons/l10n_my_edi/tests/test_submissions.py:    def _test_05_mock(self, endpoint, params):
./addons/l10n_my_edi/tests/test_submissions.py:        """ Basic mocked method that simulate what the proxy would return depending on the endpoint. """
./addons/l10n_my_edi/tests/test_submissions.py:    def _test_06_mock(self, endpoint, params):
./addons/l10n_my_edi/tests/test_submissions.py:        """ Basic mocked method that simulate what the proxy would return depending on the endpoint. """
./addons/l10n_my_edi/tests/test_submissions.py:    def _test_07_mock(self, endpoint, params):
./addons/l10n_my_edi/tests/test_submissions.py:        """ Basic mocked method that simulate what the proxy would return depending on the endpoint. """
./addons/l10n_my_edi/tests/test_submissions.py:    def _test_08_mock(self, endpoint, params):
./addons/l10n_my_edi/tests/test_submissions.py:        """ Basic mocked method that simulate what the proxy would return depending on the endpoint. """
./addons/l10n_my_edi/tests/test_submissions.py:    def _test_09_mock(self, endpoint, params):
./addons/l10n_my_edi/tests/test_submissions.py:        """ Basic mocked method that simulate what the proxy would return depending on the endpoint. """
./addons/l10n_my_edi/tests/test_submissions.py:    def _test_10_mock(self, endpoint, params):
./addons/l10n_my_edi/tests/test_submissions.py:        """ Basic mocked method that simulate what the proxy would return depending on the endpoint. """
./addons/l10n_my_edi/tests/test_submissions.py:    def _test_11_mock(self, endpoint, params):
./addons/l10n_my_edi/tests/test_submissions.py:        """ Basic mocked method that simulate what the proxy would return depending on the endpoint. """
./addons/payment_buckaroo/tests/test_buckaroo.py:from unittest.mock import patch
./addons/payment_buckaroo/tests/test_buckaroo.py:        ) as signature_check_mock, patch(
./addons/payment_buckaroo/tests/test_buckaroo.py:            self.assertEqual(signature_check_mock.call_count, 1)
./addons/crm_iap_mine/tests/test_lead_mine.py:from odoo.addons.crm_iap_mine.tests.common import MockIAPReveal
./addons/crm_iap_mine/tests/test_lead_mine.py:class TestLeadMine(TestCrmCommon, MockIAPReveal):
./addons/crm_iap_mine/tests/test_lead_mine.py:        with self.mock_IAP_mine(mine_request, sim_error='credit'):
./addons/crm_iap_mine/tests/test_lead_mine.py:            with self.mock_IAP_mine(mine_request, sim_error='jsonrpc_exception'):
./addons/crm_iap_mine/tests/test_lead_mine.py:        with self.mock_IAP_mine(mine_request, sim_error='no_result'):
./addons/crm_iap_mine/tests/test_lead_mine.py:        with self.mock_IAP_mine(mine_request, name_list=['Heinrich', 'Rivil', 'LidGen']):
./addons/crm_iap_mine/tests/test_lead_mine.py:        with self.mock_IAP_mine(mine_request, name_list=['Heinrich', 'Rivil', 'LidGen']):
./addons/crm_iap_mine/tests/common.py:from unittest.mock import patch
./addons/crm_iap_mine/tests/common.py:from odoo.addons.iap.tests.common import MockIAPEnrich
./addons/crm_iap_mine/tests/common.py:class MockIAPReveal(MockIAPEnrich):
./addons/crm_iap_mine/tests/common.py:        super(MockIAPReveal, cls).setUpClass()
./addons/crm_iap_mine/tests/common.py:    def mock_IAP_mine(self, mine, name_list=None, default_data=None, sim_error=None):
./addons/crm_iap_mine/tests/common.py:        company_data = super(MockIAPReveal, self)._get_iap_company_data(base_name, service=service, add_values=add_values)
./addons/web_hierarchy/static/tests/hierarchy_view.test.js:import { advanceFrame, animationFrame } from "@odoo/hoot-mock";
./addons/web_hierarchy/static/tests/hierarchy_view.test.js:    mockService,
./addons/web_hierarchy/static/tests/hierarchy_view.test.js:    mockService("action", {
./addons/web_hierarchy/static/tests/hierarchy_mock_server.js:function _mockHierarchyRead({ model, args, kwargs }) {
./addons/web_hierarchy/static/tests/hierarchy_mock_server.js:registry.category("mock_rpc").add("hierarchy_read", _mockHierarchyRead);
./addons/lunch/static/tests/lunch_is_favorite_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/lunch/tests/test_supplier.py:from unittest.mock import patch
./addons/html_editor/static/tests/keyboard/arrow.test.js:import { tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/toolbar.test.js:import { advanceTime, animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/html_field.test.js:import { Deferred, animationFrame, mockSendBeacon, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/html_field.test.js:        mockSendBeacon((route, blob) => {
./addons/html_editor/static/tests/icon.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/wysiwyg.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/image.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/paste.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/list/automatic_list_detection.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/power_buttons.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/movenode.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/mouse/click.test.js:import { tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/selection.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/insert/paragraph_break.test.js:import { tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/insert/html.test.js:import { tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/emoji.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/media.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/media.test.js:import { makeMockEnv, onRpc } from "@web/../tests/web_test_helpers";
./addons/html_editor/static/tests/media.test.js:    const env = await makeMockEnv();
./addons/html_editor/static/tests/media.test.js:    const env = await makeMockEnv();
./addons/html_editor/static/tests/media.test.js:    const env = await makeMockEnv();
./addons/html_editor/static/tests/media.test.js:    const env = await makeMockEnv();
./addons/html_editor/static/tests/html_viewer.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/history.test.js:import { animationFrame, mockUserAgent, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/history.test.js:        mockUserAgent("mac");
./addons/html_editor/static/tests/dynamic_placeholder.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/_helpers/editor.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/_helpers/html_editor_mock_server.js:const mockRegistry = registry.category("mock_rpc");
./addons/html_editor/static/tests/_helpers/html_editor_mock_server.js:mockRegistry.add("/web/dataset/call_kw/res.lang/get_installed", async function (request) {
./addons/html_editor/static/tests/_helpers/user_actions.js:import { tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/_helpers/user_actions.js:        // Create and dispatch events to mock text insertion. Unfortunatly, the
./addons/html_editor/static/tests/_helpers/user_actions.js:// Mock an paste event and send it to the editor.
./addons/html_editor/static/tests/signature.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/embedded_components.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/embedded_components.test.js:import { makeMockEnv } from "@web/../tests/_framework/env_test_helpers";
./addons/html_editor/static/tests/embedded_components.test.js:        const rootEnv = await makeMockEnv();
./addons/html_editor/static/tests/format/text_direction.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/format/font_family.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/format/font_size.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/format/remove_format.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/format/bold.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/collaboration.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/embedded_components_plugins/toggle_block.test.js:import { Deferred } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/file.test.js:    const mockedUploadPromise = new Promise((resolve) => {
./addons/html_editor/static/tests/file.test.js:    return mockedUploadPromise;
./addons/html_editor/static/tests/file.test.js:        const mockedUpload = patchUpload(editor);
./addons/html_editor/static/tests/file.test.js:        await mockedUpload;
./addons/html_editor/static/tests/file.test.js:        const mockedUpload = patchUpload(editor);
./addons/html_editor/static/tests/file.test.js:        await mockedUpload;
./addons/html_editor/static/tests/file.test.js:        const mockedUpload = patchUpload(editor);
./addons/html_editor/static/tests/file.test.js:        await mockedUpload;
./addons/html_editor/static/tests/file.test.js:        let mockUpload = patchUpload(editor);
./addons/html_editor/static/tests/file.test.js:        await mockUpload;
./addons/html_editor/static/tests/file.test.js:        mockUpload = patchUpload(editor);
./addons/html_editor/static/tests/file.test.js:        await mockUpload;
./addons/html_editor/static/tests/columnize.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/link/isolated.test.js:import { tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/link/popover.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/link/popover.test.js:        const mockedUploadPromise = new Promise((resolve) => {
./addons/html_editor/static/tests/link/popover.test.js:        return mockedUploadPromise;
./addons/html_editor/static/tests/link/popover.test.js:        const mockedUpload = patchUpload(editor);
./addons/html_editor/static/tests/link/popover.test.js:        await mockedUpload;
./addons/html_editor/static/tests/link/popover.test.js:        const mockedUpload = patchUpload(editor);
./addons/html_editor/static/tests/link/popover.test.js:        await mockedUpload;
./addons/html_editor/static/tests/link/edit_label.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/overlay.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/hint.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/rating_star.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/qweb.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/table/selection.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/table/ui.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/table/adding_table.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/table/misc.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/tags.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/delete/forward.test.js:import { tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/delete/backward.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/chatgpt.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/powerbox.test.js:import { animationFrame, tick } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/banner.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/tests/color_selector.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/html_editor/static/src/main/link/link_plugin.js:        // Because of some kind of race condition between the hoot mock event and the owl renderer.
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:from unittest.mock import patch
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:def mocked_l10n_es_edi_call_web_service_sign(edi_format, invoices, info_list):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                new=mocked_l10n_es_edi_call_web_service_sign
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/tests/test_edi_xml.py:                   new=mocked_l10n_es_edi_call_web_service_sign):
./addons/l10n_es_edi_sii/models/account_edi_format.py:        if not cancel: #retrocompatibility and mocks in tests
./addons/hr/static/tests/web/m2x_avatar_user.test.js:import { contains, makeMockServer, mountView, onRpc } from "@web/../tests/web_test_helpers";
./addons/hr/static/tests/web/m2x_avatar_user.test.js:    const { env } = await makeMockServer();
./addons/hr/static/tests/hr_test_helpers.js:import { HrDepartment } from "@hr/../tests/mock_server/mock_models/hr_department";
./addons/hr/static/tests/hr_test_helpers.js:import { HrEmployee } from "@hr/../tests/mock_server/mock_models/hr_employee";
./addons/hr/static/tests/hr_test_helpers.js:import { HrEmployeePublic } from "@hr/../tests/mock_server/mock_models/hr_employee_public";
./addons/hr/static/tests/hr_test_helpers.js:import { M2xAvatarEmployee } from "@hr/../tests/mock_server/mock_models/m2x_avatar_employee";
./addons/hr/static/tests/hr_test_helpers.js:import { FakeUser } from "@hr/../tests/mock_server/mock_models/fake_user";
./addons/hr/static/tests/profile_form_view.test.js:    makeMockServer,
./addons/hr/static/tests/profile_form_view.test.js:    mockService,
./addons/hr/static/tests/profile_form_view.test.js:    const { env } = await makeMockServer();
./addons/hr/static/tests/profile_form_view.test.js:    mockService("action", {
./addons/hr/static/tests/m2x_avatar_employee.test.js:import { contains, makeMockServer, mountView, onRpc } from "@web/../tests/web_test_helpers";
./addons/hr/static/tests/m2x_avatar_employee.test.js:    const { env } = await makeMockServer();
./addons/hr/static/tests/m2x_avatar_employee.test.js:    const { env } = await makeMockServer();
./addons/hr/static/tests/m2x_avatar_employee.test.js:    const { env } = await makeMockServer();
./addons/hr/static/tests/m2x_avatar_employee.test.js:    const { env } = await makeMockServer();
./addons/hr/static/tests/m2x_avatar_employee.test.js:    const { env } = await makeMockServer();
./addons/hr/static/tests/m2x_avatar_employee.test.js:    const { env } = await makeMockServer();
./addons/hr/static/tests/m2x_avatar_employee.test.js:    const { env } = await makeMockServer();
./addons/hr/static/tests/m2x_avatar_employee.test.js:    const { env } = await makeMockServer();
./addons/hr/static/tests/m2x_avatar_employee.test.js:    const { env } = await makeMockServer();
./addons/hr/static/tests/m2x_avatar_employee.test.js:    const { env } = await makeMockServer();
./addons/hr/static/tests/m2x_avatar_employee.test.js:    const { env } = await makeMockServer();
./addons/point_of_sale/static/tests/unit/data_service.test.js:import { defineModels, getService, makeMockEnv, models } from "@web/../tests/web_test_helpers";
./addons/point_of_sale/static/tests/unit/data_service.test.js:    await makeMockEnv();
./addons/point_of_sale/tests/test_pos_basic_config.py:import unittest.mock
./addons/point_of_sale/tests/test_pos_basic_config.py:            unittest.mock.patch('odoo.addons.point_of_sale.models.pos_order.randrange', return_value=1996)
./addons/point_of_sale/tests/common.py:        """ Mocks the order_data generated by the pos ui.
./addons/point_of_sale/tests/test_frontend.py:from unittest.mock import patch
./addons/hr_holidays/static/tests/leave_stats.test.js:import { HrLeave } from "@hr_holidays/../tests/mock_server/mock_models/hr_leave";
./addons/hr_holidays/static/tests/leave_stats.test.js:import { mockTimeZone } from "@odoo/hoot-mock";
./addons/hr_holidays/static/tests/leave_stats.test.js:    mockTimeZone("Europe/Brussels");
./addons/hr_holidays/static/tests/leave_stats.test.js:    // The test below can be uncommented once array_agg is implemented in the mock server.
./addons/hr_holidays/static/tests/legacy/time_off_dashboard_tests.js:    const webClient = await createWebClient({ serverData, async mockRPC(route, args) {
./addons/hr_holidays/static/tests/hr_holidays_test_helpers.js:import { ResPartner } from "./mock_server/mock_models/res_partner";
./addons/hr_holidays/static/tests/hr_holidays_test_helpers.js:import { HrEmployee } from "./mock_server/mock_models/hr_employee";
./addons/hr_holidays/static/tests/hr_holidays_test_helpers.js:import { HrLeave } from "./mock_server/mock_models/hr_leave";
./addons/hr_holidays/static/tests/hr_holidays_test_helpers.js:import { HrDepartment } from "./mock_server/mock_models/hr_department";
./addons/hr_holidays/static/tests/hr_holidays_test_helpers.js:import { HrLeaveType } from "./mock_server/mock_models/hr_leave_type";
./addons/hr_holidays/tests/test_holidays_mail.py:            with self.mock_mail_gateway():
./addons/website_blog/static/tests/interactions/snippets/website_blog.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website_blog/tests/test_website_blog_flow.py:from odoo.addons.website.tools import MockRequest
./addons/website_blog/tests/test_website_blog_flow.py:        with MockRequest(self.env):
./addons/website_blog/tests/test_website_blog_flow.py:        with self.assertRaises(UserError), MockRequest(self.env):
./addons/website_event_track/tests/test_track_internals.py:from unittest.mock import patch
./addons/board/static/tests/add_to_dashboard.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/board/static/tests/board.test.js:    mockService,
./addons/board/static/tests/board.test.js:        mockService("action", {
./addons/board/static/tests/board.test.js:        mockService("action", {
./addons/board/static/tests/board.test.js:        mockService("action", {
./addons/board/static/tests/board.test.js:        mockService("action", {
./addons/product/static/tests/product_pricelist_report_test.js:        const mockRPC = (route, args) => {
./addons/product/static/tests/product_pricelist_report_test.js:        const webClient = await createWebClient({ serverData, mockRPC });
./addons/product/tests/test_variants.py:from unittest.mock import patch
./addons/product/tests/test_variants.py:import unittest.mock
./addons/product/tests/test_variants.py:        with unittest.mock.patch.object(Template, 'write', write):
./addons/website_livechat/static/tests/mock_server/mock_models/@types/mock_models.d.ts:declare module "mock_models" {
./addons/website_livechat/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResCountry} */
./addons/website_livechat/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResLang} */
./addons/website_livechat/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/website_livechat/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").Website} */
./addons/website_livechat/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").WebsiteVisitor} */
./addons/website_livechat/static/tests/mock_server/mock_models/website_visitor.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/website_livechat/static/tests/mock_server/mock_models/website_visitor.js:        /** @type {import("mock_models").BusBus} */
./addons/website_livechat/static/tests/mock_server/mock_models/website_visitor.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/website_livechat/static/tests/mock_server/mock_models/website_visitor.js:        /** @type {import("mock_models").MailGuest} */
./addons/website_livechat/static/tests/mock_server/mock_models/website_visitor.js:        /** @type {import("mock_models").ResCountry} */
./addons/website_livechat/static/tests/mock_server/mock_models/website_visitor.js:        /** @type {import("mock_models").ResPartner} */
./addons/website_livechat/static/tests/website_livechat_test_helpers.js:import { DiscussChannel } from "./mock_server/mock_models/discuss_channel";
./addons/website_livechat/static/tests/website_livechat_test_helpers.js:import { Website } from "./mock_server/mock_models/website";
./addons/website_livechat/static/tests/website_livechat_test_helpers.js:import { WebsiteVisitor } from "./mock_server/mock_models/website_visitor";
./addons/website_livechat/tests/common.py:        def get_visitor_from_request(self_mock, **kwargs):
./addons/website_livechat/controllers/test.py:    at client side, if we are running in test mode or not. This route can be called while running tours to mock
./addons/website_livechat/controllers/test.py:    in test mode, we need to mock a 'message added' notification that is normally triggered by the bus.
./addons/website_project/tests/test_project_portal_access.py:from odoo.addons.website.tools import MockRequest
./addons/website_project/tests/test_project_portal_access.py:        with self.with_user('chell'), MockRequest(self.env, path=share_link):
./addons/l10n_id_efaktur/tests/test_l10n_id_efaktur.py:from unittest.mock import patch
./addons/event_crm/tests/test_event_crm_flow.py:from unittest.mock import patch
./addons/iap/tests/common.py:from unittest.mock import patch
./addons/iap/tests/common.py:class MockIAPEnrich(common.TransactionCase):
./addons/iap/tests/common.py:        super(MockIAPEnrich, cls).setUpClass()
./addons/iap/tests/common.py:        cls._init_iap_mock()
./addons/iap/tests/common.py:    def mockIAPEnrichGateway(self, default_data=None, email_data=None, sim_error=None, failing_emails=None):
./addons/iap/tests/common.py:            # mock single sms sending
./addons/iap/tests/common.py:    def _init_iap_mock(cls):
./addons/base_import/static/tests/import_action_tests.js:import { makeFakeNotificationService } from "@web/../tests/helpers/mock_services";
./addons/base_import/static/tests/import_action_tests.js:        mockRPC: function (route, { args }) {
./addons/base_import/static/tests/import_action_tests.js:            const notificationMock = (message) => {
./addons/base_import/static/tests/import_action_tests.js:                .add("notification", makeFakeNotificationService(notificationMock), {
./addons/base_import/static/tests/import_action_tests.js:            mockRPC: function (route, { args }) {
./addons/base_import/static/tests/import_records_tests.js:import { clearRegistryWithCleanup } from "@web/../tests/helpers/mock_env";
./addons/website_crm_partner_assign/tests/test_partner_assign.py:from unittest.mock import patch
./addons/website_crm_partner_assign/tests/test_partner_assign.py:from odoo.addons.website.tools import MockRequest
./addons/website_crm_partner_assign/tests/test_partner_assign.py:        # YTI Note: We should probably mock the call
./addons/website_crm_partner_assign/tests/test_partner_assign.py:        with self.with_user(self.user_portal.login), MockRequest(
./addons/website_crm_partner_assign/tests/test_partner_assign.py:        ) as mock_request:
./addons/website_crm_partner_assign/tests/test_partner_assign.py:            mock_request.render = render_function
./addons/website_crm_partner_assign/tests/test_partner_assign.py:    def test_03_crm_partner_assign_geolocalization(self, GeoIpMock):
./addons/website_crm_partner_assign/tests/test_partner_assign.py:        GeoIpMock.return_value.country_code = 'MX'
./addons/website_crm_partner_assign/tests/test_partner_assign.py:        with MockRequest(self.env, website=self.env['website'].browse(1)) as mock_request:
./addons/website_crm_partner_assign/tests/test_partner_assign.py:            mock_request.render = render_function
./addons/l10n_it_edi/tests/test_edi_import.py:from unittest.mock import patch
./addons/l10n_it_edi/tests/test_edi_import.py:        def mock_commit(self):
./addons/l10n_it_edi/tests/test_edi_import.py:        def mock_create(self, vals_list):
./addons/l10n_it_edi/tests/test_edi_import.py:              patch.object(sql_db.Cursor, "commit", mock_commit),
./addons/l10n_it_edi/tests/test_edi_import.py:              patch.object(self.env.registry['account.move'], 'create', mock_create),
./addons/l10n_it_edi/tests/test_edi_import.py:        def mock_commit(self):
./addons/l10n_it_edi/tests/test_edi_import.py:              patch.object(sql_db.Cursor, "commit", mock_commit)):
./addons/l10n_it_edi/tests/test_edi_import.py:        def mock_commit(self):
./addons/l10n_it_edi/tests/test_edi_import.py:              patch.object(sql_db.Cursor, "commit", mock_commit),
./addons/l10n_it_edi/tests/test_account_move_send.py:from unittest.mock import patch
./addons/payment_flutterwave/tests/test_payment_transaction.py:from unittest.mock import patch
./addons/payment_flutterwave/tests/test_payment_transaction.py:        ) as tokenize_mock:
./addons/payment_flutterwave/tests/test_payment_transaction.py:        self.assertEqual(tokenize_mock.call_count, 1)
./addons/payment_flutterwave/tests/test_processing_flows.py:from unittest.mock import patch
./addons/payment_flutterwave/tests/test_processing_flows.py:        ) as handle_notification_data_mock:
./addons/payment_flutterwave/tests/test_processing_flows.py:        self.assertEqual(handle_notification_data_mock.call_count, 1)
./addons/payment_flutterwave/tests/test_processing_flows.py:        ) as handle_notification_data_mock:
./addons/payment_flutterwave/tests/test_processing_flows.py:        self.assertEqual(handle_notification_data_mock.call_count, 1)
./addons/payment_flutterwave/tests/test_processing_flows.py:        ) as signature_check_mock, patch(
./addons/payment_flutterwave/tests/test_processing_flows.py:            self.assertEqual(signature_check_mock.call_count, 1)
./addons/l10n_in/tests/test_check_status.py:from unittest.mock import patch
./addons/l10n_in/tests/test_check_status.py:        self.mock_responses = {
./addons/l10n_in/tests/test_check_status.py:    def check_gstin_status(self, partner, expected_status, mock_response, raises_exception=False):
./addons/l10n_in/tests/test_check_status.py:        with patch.object(IapAccount, "_l10n_in_connect_to_server", return_value=mock_response):
./addons/l10n_in/tests/test_check_status.py:            mock_response=self.mock_responses["active"]
./addons/l10n_in/tests/test_check_status.py:            mock_response=self.mock_responses["cancelled"]
./addons/l10n_in/tests/test_check_status.py:            mock_response=self.mock_responses["invalid"],
./addons/l10n_in/tests/test_check_status.py:            mock_response=self.mock_responses["no_records"],
./addons/auth_passkey/tests/test_passkey_demo.py:from unittest.mock import patch
./addons/auth_passkey/tests/test_passkey_demo.py:                # Reset the challenge, which is forced to the same challenge with a mock patch above
./addons/base_setup/tests/test_res_config.py:from unittest.mock import patch
./addons/auth_signup/tests/test_reset_password.py:from unittest.mock import patch
./addons/auth_signup/tests/test_reset_password.py:    def test_reset_password_mail_server_error(self, mock_send):
./addons/auth_signup/tests/test_reset_password.py:        mock_send.side_effect = MailDeliveryException(
./addons/auth_signup/tests/test_reset_password.py:        mock_send.side_effect = MailDeliveryException(
./addons/auth_signup/tests/test_auth_signup.py:from unittest.mock import patch
./addons/auth_ldap/tests/test_auth_ldap.py:from unittest.mock import patch
./addons/pos_online_payment/tests/test_frontend.py:from unittest.mock import patch
./addons/hr_attendance/static/tests/hr_attendance_mock_server.js:import { MockServer } from "@web/../tests/helpers/mock_server";
./addons/hr_attendance/static/tests/hr_attendance_mock_server.js:patch(MockServer.prototype, {
./addons/hr_attendance/static/src/views/attendance_helper_view.xml:                <img src="/hr_attendance/static/img/mock-tablet.png" height="180" class="mb-2"/>
./addons/hr_attendance/static/src/views/attendance_helper_view.xml:                    <img src="/hr_attendance/static/img/mock-tablet.png" height="180" class="mb-2"/>
./addons/hr_attendance/tests/test_hr_attendance_process.py:from unittest.mock import patch
./addons/hr_attendance/__manifest__.py:            'hr_attendance/static/tests/hr_attendance_mock_server.js',
./addons/google_address_autocomplete/static/tests/google_address_autocomplete.test.js:import * as fields from "@web/../tests/_framework/mock_server/mock_fields";
./addons/google_address_autocomplete/static/tests/google_address_autocomplete.test.js:import { Model, ServerModel } from "@web/../tests/_framework/mock_server/mock_model";
./addons/google_address_autocomplete/static/tests/google_address_autocomplete.test.js:import { runAllTimers } from "@odoo/hoot-mock";
./addons/google_address_autocomplete/tests/test_ui.py:from .mock_google_places import make_mock_google_route
./addons/google_address_autocomplete/tests/test_ui.py:            make_mock_google_route(on_route),
./addons/google_address_autocomplete/tests/test_ui.py:            make_mock_google_route(on_route),
./addons/google_address_autocomplete/tests/test_ui.py:            make_mock_google_route(),
./addons/google_address_autocomplete/tests/__init__.py:from . import mock_google_places
./addons/google_address_autocomplete/tests/mock_google_places.py:def make_mock_google_route(on_call=None):
./addons/microsoft_outlook/tests/test_fetchmail_outlook.py:from unittest.mock import ANY, Mock, patch
./addons/microsoft_outlook/tests/test_fetchmail_outlook.py:    def test_connect(self, mock_imap):
./addons/microsoft_outlook/tests/test_fetchmail_outlook.py:        mock_connection = Mock()
./addons/microsoft_outlook/tests/test_fetchmail_outlook.py:        mock_imap.return_value = mock_connection
./addons/microsoft_outlook/tests/test_fetchmail_outlook.py:        mock_connection.authenticate.assert_called_once_with('XOAUTH2', ANY)
./addons/microsoft_outlook/tests/test_fetchmail_outlook.py:        args = mock_connection.authenticate.call_args[0]
./addons/microsoft_outlook/tests/test_fetchmail_outlook.py:        mock_connection.select.assert_called_once_with('INBOX')
./addons/website/data/image_library.xml:<record id="website.s_mockup_image_default_image" model="ir.attachment">
./addons/website/data/image_library.xml:    <field name="name">s_mockup_image_default_image.jpg</field>
./addons/website/data/image_library.xml:    <field name="url">/website/static/src/img/snippets_demo/s_mockup_image.jpg</field>
./addons/website/data/image_library.xml:<record id="website.s_cta_mockups_default_image" model="ir.attachment">
./addons/website/data/image_library.xml:    <field name="name">s_cta_mockups_default_image.jpg</field>
./addons/website/data/image_library.xml:    <field name="url">/website/static/src/img/snippets_demo/s_cta_mockups.jpg</field>
./addons/website/data/image_library.xml:<record id="website.s_cta_mockups_default_image_1" model="ir.attachment">
./addons/website/data/image_library.xml:    <field name="name">s_cta_mockups_default_image_1.jpg</field>
./addons/website/data/image_library.xml:    <field name="url">/website/static/src/img/snippets_demo/s_cta_mockups_1.jpg</field>
./addons/website/static/tests/interactions/anchor_slide.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/carousel/carousel_bootstrap_upgrade_fix.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/post_link.test.js:    mockSendRequests,
./addons/website/static/tests/interactions/post_link.test.js:    const requests = mockSendRequests();
./addons/website/static/tests/interactions/cookies/cookies.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/popup/popup.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/image_lazy_loading.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/scroll_button.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/image_shape_hover_effect.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/ripple_effect.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/snippets/gallery_slider.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/snippets/chart.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/snippets/form.test.js:import { advanceTime, Deferred } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/snippets/countdown.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/snippets/search_bar.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/snippets/gallery.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/snippets/dynamic_snippet_carousel.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/footer_slideout.test.js:import { mockUserAgent } from "@odoo/hoot-mock";
./addons/website/static/tests/interactions/footer_slideout.test.js:    mockUserAgent("android");
./addons/website/static/tests/interactions/footer_slideout.test.js:    mockUserAgent("safari");
./addons/website/static/tests/interactions/listing_layout.test.js:import { Deferred } from "@odoo/hoot-mock";
./addons/website/static/tests/tours/media_dialog.js:    content: "Search for 'banner' to call the media library", // Mocked call
./addons/website/static/tests/tours/link_to_document.js:// mock the upload service.
./addons/website/static/tests/website_service_mock.js:import { utils, clearRegistryWithCleanup } from '@web/../tests/helpers/mock_env';
./addons/website/static/tests/helpers.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/website/tests/test_website_reset_password.py:from unittest.mock import patch
./addons/website/tests/test_fuzzy.py:from odoo.addons.website.tools import distance, MockRequest
./addons/website/tests/test_fuzzy.py:        with MockRequest(self.env, website=self.website):
./addons/website/tests/test_snippets.py:from odoo.addons.website.tools import MockRequest, create_image_attachment
./addons/website/tests/test_snippets.py:        with MockRequest(self.env, website=self.env['website'].browse(1)):
./addons/website/tests/test_lang_url.py:from odoo.addons.website.tools import MockRequest
./addons/website/tests/test_lang_url.py:        with MockRequest(self.env, website=self.website):
./addons/website/tests/test_lang_url.py:            self.assertEqual(self.env['ir.http']._url_for('', '[lang]'), '/[lang]/mockrequest', "`[lang]` is used to be replaced in the url_return after installing a language, it should not be replaced or removed.")
./addons/website/tests/test_configurator.py:from unittest.mock import patch
./addons/website/tests/test_configurator.py:        def iap_jsonrpc_mocked_configurator(*args, **kwargs):
./addons/website/tests/test_configurator.py:        iap_patch = patch('odoo.addons.iap.tools.iap_tools.iap_jsonrpc', iap_jsonrpc_mocked_configurator)
./addons/website/tests/test_menu.py:from unittest.mock import Mock, patch
./addons/website/tests/test_menu.py:from odoo.addons.website.tools import MockRequest
./addons/website/tests/test_menu.py:        def url_parse_mock(s):
./addons/website/tests/test_menu.py:            if isinstance(s, Mock):
./addons/website/tests/test_menu.py:                return url_parse(self.request_url_mock)
./addons/website/tests/test_menu.py:            self.request_url_mock = 'http://localhost:8069' + url
./addons/website/tests/test_menu.py:            with MockRequest(self.env, website=website_1), \
./addons/website/tests/test_menu.py:                 patch('odoo.addons.website.models.website_menu.url_parse', new=url_parse_mock):
./addons/website/tests/test_menu.py:                self.request_url_mock = f'http://localhost:8069{url}?qs=2'
./addons/website/tests/test_menu.py:                self.request_url_mock = f'http://localhost:8069{url}?qs=1'
./addons/website/tests/test_menu.py:                self.request_url_mock = f'http://localhost:8069{url}?qs=1&qs_extra=1'
./addons/website/tests/test_menu.py:                self.request_url_mock = f'http://example.com:8069{url}'
./addons/website/tests/test_menu.py:                self.request_url_mock = f'http://localhost.com:8069{url}'
./addons/website/tests/test_menu.py:        self.request_url_mock = 'http://localhost:8069/'
./addons/website/tests/test_menu.py:        with MockRequest(self.env, website=website_1), \
./addons/website/tests/test_menu.py:             patch('odoo.addons.website.models.website_menu.url_parse', new=url_parse_mock):
./addons/website/tests/test_menu.py:            self.request_url_mock = 'http://localhost:8069/contactus'
./addons/website/tests/test_menu.py:        # router and registry, even MockRequest is not enough
./addons/website/tests/test_res_users.py:from odoo.addons.website.tools import MockRequest
./addons/website/tests/test_res_users.py:        with MockRequest(self.env, website=website):
./addons/website/tests/test_disable_unused_snippets_assets.py:from unittest.mock import patch
./addons/website/tests/test_iap.py:from unittest.mock import patch
./addons/website/tests/test_ui.py:        def mock_media_library_search(self, **params):
./addons/website/tests/test_ui.py:        # Mocked for the previews in the media dialog
./addons/website/tests/test_ui.py:        mock_media_library_search.routing_type = 'json'
./addons/website/tests/test_ui.py:        Web_Editor.media_library_search = http.route(['/web_editor/media_library_search'], type='jsonrpc', auth='user', website=True)(mock_media_library_search)
./addons/website/tests/test_views.py:from unittest.mock import patch
./addons/website/tests/test_website_visitor.py:from unittest.mock import patch
./addons/website/tests/test_website_visitor.py:class MockVisitor(common.BaseCase):
./addons/website/tests/test_website_visitor.py:    def mock_visitor_from_request(self, force_visitor=False):
./addons/website/tests/test_website_visitor.py:                          side_effect=_get_visitor_from_request) as _get_visitor_from_request_mock:
./addons/website/tests/test_website_visitor.py:class WebsiteVisitorTestsCommon(MockVisitor, HttpCaseWithUserDemo):
./addons/website/tests/test_qweb.py:from odoo.addons.website.tools import MockRequest
./addons/website/tests/test_qweb.py:        with MockRequest(self.env):
./addons/website/tests/test_qweb.py:        with MockRequest(self.env, website=self.website, multilang=False):
./addons/website/tests/test_qweb.py:        with MockRequest(self.env, website=self.website):
./addons/website/tests/test_qweb.py:        with MockRequest(self.env, website=self.website, context={'lang': 'fr_FR'}):
./addons/website/tests/test_qweb.py:        with MockRequest(self.env, website=self.website):
./addons/website/tests/test_qweb.py:        with MockRequest(self.env, website=self.website, context={'lang': 'fr_FR'}, routing=False):
./addons/website/tests/test_qweb.py:        with MockRequest(self.env, website=self.website):
./addons/website/tests/test_controllers.py:from unittest.mock import patch, Mock
./addons/website/tests/test_controllers.py:    def test_05_seo_suggest_language_regex(self, mock_get):
./addons/website/tests/test_controllers.py:        # Mocking the response from Google API to simulate what would be
./addons/website/tests/test_controllers.py:        mock_response = Mock()
./addons/website/tests/test_controllers.py:        mock_response.content = '''<?xml version="1.0"?>
./addons/website/tests/test_controllers.py:        mock_get.return_value = mock_response
./addons/website/tests/test_controllers.py:                # Extract the parameters that were passed in the mock
./addons/website/tests/test_controllers.py:                called_params = mock_get.call_args[1]['params']
./addons/website/tests/test_get_current_website.py:from odoo.addons.website.tools import MockRequest
./addons/website/tests/test_get_current_website.py:        with MockRequest(self.env, website=self.website):
./addons/website/tests/test_page.py:from unittest.mock import patch
./addons/website/tests/test_page.py:from odoo.addons.website.tools import MockRequest
./addons/website/tests/test_page.py:        with MockRequest(self.env, website=self.env['website'].browse(1)):
./addons/website/tests/test_page.py:             MockRequest(self.env, website=self.env['website'].browse(1)):
./addons/website/tests/test_page.py:        with MockRequest(self.env, website=website):
./addons/website/tests/test_page.py:        with MockRequest(self.env, website=website):
./addons/website/tests/test_page.py:        with MockRequest(self.env, website=website):
./addons/website/tests/test_page.py:        with MockRequest(self.env, website=website):
./addons/website/tests/test_website_form_editor.py:from odoo.addons.website.tools import MockRequest
./addons/website/tests/test_website_form_editor.py:        with MockRequest(self.env, website=website):
./addons/website/models/ir_http.py:    This method is easy to mock during python tests to simulate frontend
./addons/website/models/ir_http.py:    context, rather than mocking every method accessing request.website.
./addons/website/models/ir_http.py:    Don't import directly the method or it won't be mocked during tests, do:
./addons/website/views/snippets/snippets.xml:                    <keywords>content, picture, photo, illustration, media, visual, focus, in-depth, analysis, more, contact, detailed, mockup, explore, insight</keywords>
./addons/website/views/snippets/snippets.xml:                <t t-snippet="website.s_mockup_image" string="Mockup Image" group="content">
./addons/website/views/snippets/snippets.xml:                    <keywords>CTA, button, btn, action, engagement, link, offer, appeal, call to action, prompt, interact, trigger, mockup</keywords>
./addons/website/views/snippets/snippets.xml:                <t t-snippet="website.s_cta_mockups" string="Call to Action Mockups" group="content">
./addons/website/views/snippets/snippets.xml:                    <keywords>CTA, button, btn, action, engagement, link, offer, appeal, call to action, prompt, interact, trigger, mockups</keywords>
./addons/website/views/snippets/snippets.xml:                    <keywords>stores, button, engagement, appeal, mockup, text, content, picture, photo, illustration, media, visual, article, story</keywords>
./addons/website/views/snippets/s_mockup_image.xml:<template id="s_mockup_image" name="Mockup Image">
./addons/website/views/snippets/s_mockup_image.xml:    <section class="s_mockup_image o_cc o_cc1 pt72 pb72" data-oe-shape-data="{'shape':'web_editor/Wavy/11', 'colors':{'c1': '#2D3142', 'c4': '#FFFFFF'}, 'showOnMobile':true}">
./addons/website/views/snippets/s_mockup_image.xml:                    <img src="/web_editor/image_shape/website.s_mockup_image_default_image/web_editor/devices/macbook_front.svg" class="img-fluid ms-auto" data-shape="web_editor/devices/macbook_front" data-shape-colors=";;#F3F2F2;;" data-file-name="s_text_image.jpg" data-original-mimetype="image/jpeg" alt=""/>
./addons/website/views/snippets/s_cta_mobile.xml:                    <img src="web_editor/image_shape/website.s_cta_mockups_default_image_1/web_editor/devices/galaxy_front_portrait_half.svg" class="img img-fluid" data-shape="web_editor/devices/galaxy_front_portrait_half" data-shape-colors=";;;;#111827" data-original-mimetype="image/jpeg" data-file-name="s_cta_mockups_1.jpg" alt=""/>
./addons/website/views/snippets/s_cta_mockups.xml:<template id="s_cta_mockups" name="Call to Action Mockups">
./addons/website/views/snippets/s_cta_mockups.xml:    <section class="s_cta_mockups o_cc o_cc2 pt64 pb64">
./addons/website/views/snippets/s_cta_mockups.xml:                    <img src="web_editor/image_shape/website.s_cta_mockups_default_image/web_editor/devices/macbook_front.svg" class="img img-fluid" data-shape="web_editor/devices/macbook_front" data-original-mimetype="image/jpeg" data-file-name="s_cta_mockups.jpg" alt=""/>
./addons/website/views/snippets/s_cta_mockups.xml:                    <img src="web_editor/image_shape/website.s_cta_mockups_default_image_1/web_editor/devices/iphone_front_portrait.svg" class="img img-fluid" data-shape="web_editor/devices/iphone_front_portrait" data-original-mimetype="image/jpeg" data-file-name="s_cta_mockups_1.jpg" alt=""/>
./addons/website/tools.py:from unittest.mock import Mock, MagicMock, patch
./addons/website/tools.py:def MockRequest(
./addons/website/tools.py:    env, *, path='/mockrequest', routing=True, multilang=True,
./addons/website/tools.py:    # TODO move MockRequest to a package in addons/web/tests
./addons/website/tools.py:    request = Mock(
./addons/website/tools.py:        httprequest=Mock(
./addons/website/tools.py:        render=lambda *a, **kw: '<MockResponse>',
./addons/website/tools.py:    # The following code mocks match() to return a fake rule with a fake
./addons/website/tools.py:    router = MagicMock()
./addons/website/i18n/website.pot:#: model_terms:ir.ui.view,arch_db:website.s_cta_mockups
./addons/website/i18n/website.pot:"prompt, interact, trigger, mockup"
./addons/website/i18n/website.pot:"prompt, interact, trigger, mockups"
./addons/website/i18n/website.pot:msgid "Call to Action Mockups"
./addons/website/i18n/website.pot:#: model_terms:ir.ui.view,arch_db:website.s_cta_mockups
./addons/website/i18n/website.pot:#: model_terms:ir.ui.view,arch_db:website.s_cta_mockups
./addons/website/i18n/website.pot:#: model_terms:ir.ui.view,arch_db:website.s_mockup_image
./addons/website/i18n/website.pot:msgid "Mockup Image"
./addons/website/i18n/website.pot:#: model_terms:ir.ui.view,arch_db:website.s_mockup_image
./addons/website/i18n/website.pot:#: model_terms:ir.ui.view,arch_db:website.s_mockup_image
./addons/website/i18n/website.pot:#: model_terms:ir.ui.view,arch_db:website.s_mockup_image
./addons/website/i18n/website.pot:"analysis, more, contact, detailed, mockup, explore, insight"
./addons/website/i18n/website.pot:"stores, button, engagement, appeal, mockup, text, content, picture, photo, "
./addons/website/__manifest__.py:        'views/snippets/s_mockup_image.xml',
./addons/website/__manifest__.py:        'views/snippets/s_cta_mockups.xml',
./addons/website/__manifest__.py:            'website/static/tests/website_service_mock.js',
./addons/website_event_exhibitor/tests/test_sponsor_internals.py:        """ Test date computation. Pay attention that mocks returns UTC values, meaning
./addons/website_hr_recruitment/tests/test_website_hr_recruitment.py:from odoo.addons.website.tools import MockRequest
./addons/website_hr_recruitment/tests/test_website_hr_recruitment.py:        with MockRequest(self.env, website=self.env['website'].browse(1)):
./addons/purchase_mrp/tests/test_purchase_mrp_flow.py:        mock_currency = self.env['res.currency'].create({
./addons/purchase_mrp/tests/test_purchase_mrp_flow.py:            'currency_id': mock_currency.id,
./addons/purchase_mrp/tests/test_purchase_mrp_flow.py:        po.currency_id = mock_currency
./addons/payment/static/tests/payment_wizard_copy_clipboard_field_tests.js:        async mockRPC(route, { method, model }) {},
./addons/payment/tests/test_payment_provider.py:from unittest.mock import patch
./addons/payment/tests/common.py:from unittest.mock import patch
./addons/payment/tests/test_payment_transaction.py:from unittest.mock import patch
./addons/payment/tests/test_flows.py:from unittest.mock import patch
./addons/test_event_full/static/src/js/tests/test_template_reference_field_widget.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/test_event_full/tests/common.py:from odoo.addons.website.tests.test_website_visitor import MockVisitor
./addons/test_event_full/tests/common.py:class TestEventFullCommon(EventCrmCase, TestSalesCommon, MockVisitor):
./addons/test_event_full/tests/common.py:        # Mock dates to have reproducible computed fields based on time
./addons/test_event_full/tests/common.py:        with cls.mock_datetime_and_now(cls, cls.reference_now):
./addons/test_event_full/tests/common.py:        with cls.mock_datetime_and_now(cls, cls.reference_now):
./addons/test_event_full/tests/common.py:class TestWEventCommon(HttpCaseWithUserDemo, HttpCaseWithUserPortal, MockVisitor):
./addons/test_event_full/tests/common.py:        # Mock dates to have reproducible computed fields based on time
./addons/test_event_full/tests/test_event_event.py:        with self.mock_datetime_and_now(self.reference_now), \
./addons/test_event_full/tests/test_event_event.py:             self.mock_mail_gateway():
./addons/test_event_full/tests/test_event_event.py:        with self.mock_datetime_and_now(self.reference_now), \
./addons/test_event_full/tests/test_event_event.py:        with self.mock_datetime_and_now(self.reference_now), \
./addons/test_event_full/tests/test_event_event.py:             self.mock_mail_gateway():
./addons/test_event_full/tests/test_event_event.py:        with self.mock_datetime_and_now(self.reference_now), \
./addons/test_event_full/tests/test_event_mail.py:from unittest.mock import patch
./addons/test_event_full/tests/test_event_mail.py:        with self.mock_datetime_and_now(self.event_date_begin - timedelta(days=2)), \
./addons/test_event_full/tests/test_event_mail.py:             self.mock_mail_gateway(), \
./addons/test_event_full/tests/test_event_mail.py:             self.mockSMSGateway():
./addons/test_event_full/tests/test_event_mail.py:            ) as mock_exec,
./addons/test_event_full/tests/test_event_mail.py:            self.mock_datetime_and_now(current_now),
./addons/test_event_full/tests/test_event_mail.py:            self.mockSMSGateway(),
./addons/test_event_full/tests/test_event_mail.py:            self.mock_mail_gateway(),
./addons/test_event_full/tests/test_event_mail.py:        self.assertEqual(mock_exec.call_count, 8, "Batch of 5 to make 20 registrations: 4 calls / scheduler")
./addons/test_event_full/tests/test_event_mail.py:            self.mock_datetime_and_now(current_now),
./addons/test_event_full/tests/test_event_mail.py:            self.mockSMSGateway(),
./addons/test_event_full/tests/test_event_mail.py:            self.mock_mail_gateway(),
./addons/test_event_full/tests/test_event_mail.py:            self.mock_datetime_and_now(current_now),
./addons/test_event_full/tests/test_event_mail.py:            self.mockSMSGateway(),
./addons/test_event_full/tests/test_event_mail.py:            self.mock_mail_gateway(),
./addons/test_event_full/tests/test_event_mail.py:        self.assertEqual(mock_exec.call_count, 8, "Batch of 5 to make 20 registrations: 4 calls / scheduler")
./addons/test_event_full/tests/test_event_mail.py:            self.mock_datetime_and_now(current_now),
./addons/test_event_full/tests/test_event_mail.py:            self.mockSMSGateway(),
./addons/test_event_full/tests/test_event_mail.py:            self.mock_mail_gateway(),
./addons/test_event_full/tests/test_event_mail.py:             ) as mock_exec, \
./addons/test_event_full/tests/test_event_mail.py:             self.mock_datetime_and_now(self.reference_now + timedelta(hours=1)), \
./addons/test_event_full/tests/test_event_mail.py:             self.mockSMSGateway(), \
./addons/test_event_full/tests/test_event_mail.py:             self.mock_mail_gateway(), \
./addons/test_event_full/tests/test_event_mail.py:        self.assertEqual(mock_exec.call_count, 8, "Batch of 5 to make 20 registrations: 4 calls / scheduler")
./addons/test_event_full/tests/test_event_mail.py:            ) as mock_exec,
./addons/test_event_full/tests/test_event_mail.py:            self.mock_datetime_and_now(self.reference_now + timedelta(hours=1)),
./addons/test_event_full/tests/test_event_mail.py:            self.mockSMSGateway(),
./addons/test_event_full/tests/test_event_mail.py:            self.mock_mail_gateway(),
./addons/test_event_full/tests/test_event_mail.py:        self.assertEqual(mock_exec.call_count, 4, "Batch of 5 to make 10 remaining registrations: 2 calls / scheduler")
./addons/test_event_full/tests/test_event_mail.py:        with self.mock_mail_gateway():
./addons/membership/tests/test_membership.py:from unittest.mock import patch
./addons/website_event_booth_sale/tests/test_website_event_booth_sale_pricelist.py:from odoo.addons.website_sale.tests.common import MockRequest
./addons/website_event_booth_sale/tests/test_website_event_booth_sale_pricelist.py:        with MockRequest(self.env, website=self.website, sale_order_id=self.empty_cart.id) as req:
./addons/pos_viva_wallet/tests/test_frontend.py:from unittest.mock import patch
./addons/pos_viva_wallet/tests/test_frontend.py:        def mocked_call_viva_wallet_check_post_data(self, endpoint, action, data=None):
./addons/pos_viva_wallet/tests/test_frontend.py:        with patch.object(PosPaymentMethod, '_call_viva_wallet', mocked_call_viva_wallet_check_post_data):
./addons/sale/static/tests/sale_product_field_tests.js:            mockRPC(route, args) {
./addons/sale/static/tests/sales_team_dashboard_tests.js:        async mockRPC(route, { method, model }) {
./addons/sale/tests/test_sale_to_invoice.py:from unittest.mock import patch
./addons/sale/tests/test_payment_flow.py:from unittest.mock import ANY, patch
./addons/sale/tests/test_payment_flow.py:        ) as _create_invoices_mock:
./addons/sale/tests/test_payment_flow.py:        self.assertTrue(_create_invoices_mock.call_args.kwargs['final'])
./addons/sale/tests/test_payment_flow.py:        with patch.object(CustomerPortal, '_document_check_access') as mock:
./addons/sale/tests/test_payment_flow.py:                mock.call_count, 0, msg="No check should be made when sale_order_id is not provided."
./addons/sale/tests/test_payment_flow.py:            mock.reset_mock()
./addons/sale/tests/test_payment_flow.py:                mock.call_count, 1, msg="The check should be made as sale_order_id is provided."
./addons/sale/tests/test_payment_flow.py:        def _document_check_access_mock(*_args, **_kwargs):
./addons/sale/tests/test_payment_flow.py:            CustomerPortal, '_document_check_access', _document_check_access_mock
./addons/sale/tests/test_payment_flow.py:        ), patch('odoo.addons.payment.utils.check_access_token') as check_payment_access_token_mock:
./addons/sale/tests/test_payment_flow.py:                check_payment_access_token_mock.call_count,
./addons/sale/tests/test_payment_flow.py:        ) as notification_mail_mock:
./addons/sale/tests/test_payment_flow.py:            self.assertEqual(notification_mail_mock.call_count, 1)
./addons/sale/tests/test_payment_flow.py:            notification_mail_mock.assert_called_once_with(
./addons/sale/tests/test_payment_flow.py:            self.assertEqual(notification_mail_mock.call_count, 2)
./addons/sale/tests/test_payment_flow.py:            notification_mail_mock.assert_called_with(
./addons/sale/tests/test_sale_order.py:from unittest.mock import patch
./addons/sale/__manifest__.py:            'sale/static/tests/mock_server/**/*',
./addons/sale/__manifest__.py:            ('remove', 'sale/static/tests/mock_server/**/*'),
./addons/payment_aps/tests/test_processing_flows.py:from unittest.mock import patch
./addons/payment_aps/tests/test_processing_flows.py:        ) as handle_notification_data_mock:
./addons/payment_aps/tests/test_processing_flows.py:            self.assertEqual(handle_notification_data_mock.call_count, 1)
./addons/payment_aps/tests/test_processing_flows.py:        ) as handle_notification_data_mock:
./addons/payment_aps/tests/test_processing_flows.py:            self.assertEqual(handle_notification_data_mock.call_count, 1)
./addons/payment_aps/tests/test_processing_flows.py:        ) as signature_check_mock, patch(
./addons/payment_aps/tests/test_processing_flows.py:            self.assertEqual(signature_check_mock.call_count, 1)
./addons/payment_aps/tests/test_processing_flows.py:        ) as signature_check_mock, patch(
./addons/payment_aps/tests/test_processing_flows.py:            self.assertEqual(signature_check_mock.call_count, 1)
./addons/crm_mail_plugin/tests/test_crm_mail_plugin.py:from odoo.addons.mail_plugin.tests.common import TestMailPluginControllerCommon, mock_auth_method_outlook
./addons/crm_mail_plugin/tests/test_crm_mail_plugin.py:    @mock_auth_method_outlook('employee')
./addons/crm_mail_plugin/tests/test_crm_mail_plugin.py:    @mock_auth_method_outlook('employee')
./addons/spreadsheet/static/tests/links/model/link_menu_cells.test.js:import { makeSpreadsheetMockEnv } from "@spreadsheet/../tests/helpers/model";
./addons/spreadsheet/static/tests/links/model/link_menu_cells.test.js:    const env = await makeSpreadsheetMockEnv({ serverData: getMenuServerData() });
./addons/spreadsheet/static/tests/links/model/link_menu_cells.test.js:    const env = await makeSpreadsheetMockEnv({ serverData: getMenuServerData() });
./addons/spreadsheet/static/tests/links/model/link_menu_cells.test.js:    const env = await makeSpreadsheetMockEnv({ serverData: getMenuServerData() });
./addons/spreadsheet/static/tests/links/model/link_menu_cells.test.js:    const env = await makeSpreadsheetMockEnv({ serverData: getMenuServerData() });
./addons/spreadsheet/static/tests/links/model/link_menu_cells.test.js:    const env = await makeSpreadsheetMockEnv({ serverData: getMenuServerData() });
./addons/spreadsheet/static/tests/links/open_links.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/links/open_links.test.js:import { makeSpreadsheetMockEnv } from "@spreadsheet/../tests/helpers/model";
./addons/spreadsheet/static/tests/links/open_links.test.js:import { makeMockEnv, mockService, patchWithCleanup } from "@web/../tests/web_test_helpers";
./addons/spreadsheet/static/tests/links/open_links.test.js:    const env = await makeMockEnv();
./addons/spreadsheet/static/tests/links/open_links.test.js:        // TODO: this is the conversion 1/1 of the old test, where the mock action service didn't contain a loadAction
./addons/spreadsheet/static/tests/links/open_links.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/links/open_links.test.js:    const env = await makeSpreadsheetMockEnv({ serverData: getMenuServerData() });
./addons/spreadsheet/static/tests/links/open_links.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/links/open_links.test.js:    const env = await makeSpreadsheetMockEnv({ serverData: getMenuServerData() });
./addons/spreadsheet/static/tests/links/open_links.test.js:    mockService("action", {
./addons/spreadsheet/static/tests/links/open_links.test.js:    const env = await makeSpreadsheetMockEnv({ serverData: getMenuServerData() });
./addons/spreadsheet/static/tests/links/open_links.test.js:    const env = await makeSpreadsheetMockEnv({ serverData: getMenuServerData() });
./addons/spreadsheet/static/tests/links/open_links.test.js:    const env = await makeSpreadsheetMockEnv({ serverData: getMenuServerData() });
./addons/spreadsheet/static/tests/global_filters/filter_value_component.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/global_filters/filter_value_component.test.js:import { contains, makeMockEnv, mountWithCleanup, onRpc } from "@web/../tests/web_test_helpers";
./addons/spreadsheet/static/tests/global_filters/filter_value_component.test.js:    const env = await makeMockEnv();
./addons/spreadsheet/static/tests/global_filters/filter_value_component.test.js:    const env = await makeMockEnv();
./addons/spreadsheet/static/tests/global_filters/filter_value_component.test.js:    const env = await makeMockEnv();
./addons/spreadsheet/static/tests/global_filters/filter_value_component.test.js:    const env = await makeMockEnv();
./addons/spreadsheet/static/tests/global_filters/global_filters_chart.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/global_filters/global_filters_chart.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/global_filters/global_filters_chart.test.js:    mockDate("2022-07-10 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:import { animationFrame, mockDate, mockTimeZone } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-07-14 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-07-14 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-07-14 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-07-14 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:        mockRPC: function (route, { method, args }) {
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-03-10 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-12-10 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-05-16 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-05-16 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-05-16 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockTimeZone(+2); // UTC+2
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockTimeZone(-2); // UTC-2
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-05-16 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-05-16 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-07-14 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-07-14 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-04-16 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-04-16 00:00:00");
./addons/spreadsheet/static/tests/global_filters/global_filters_model.test.js:    mockDate("2022-04-16 00:00:00");
./addons/spreadsheet/static/tests/data_fetching/data_source.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/data_fetching/server_data.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/pivots/pivot_see_records.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/pivots/pivot_see_records.test.js:import { mockService, onRpc } from "@web/../tests/web_test_helpers";
./addons/spreadsheet/static/tests/pivots/pivot_see_records.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/pivots/pivot_see_records.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/pivots/pivot_see_records.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/pivots/pivot_see_records.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/pivots/pivot_see_records.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/pivots/pivot_see_records.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/pivots/pivot_see_records.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/pivots/pivot_see_records.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/pivots/model/pivot_table_function.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: async function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: function (route, args) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: function (route, args) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: function (route, args) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: async function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/pivots/model/pivot_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/command_palette.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/public_spreadsheet/public_spreadsheet.test.js:import { contains, mockService } from "@web/../tests/web_test_helpers";
./addons/spreadsheet/static/tests/public_spreadsheet/public_spreadsheet.test.js:mockService("http", {
./addons/spreadsheet/static/tests/widgets/spreadsheet_binary_field.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:import { makeServerError, mockService, serverState } from "@web/../tests/web_test_helpers";
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:        mockRPC: function (route, { model, method }) {
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:        mockRPC: function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:    mockService("action", {
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:    mockService("action", {
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:        mockRPC: function (route, args) {
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:        mockRPC: function (route, args) {
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:        mockRPC: function (route, args) {
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:        mockRPC: function (route, args) {
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/lists/list_plugin.test.js:        mockRPC: async function (route, { model, method, kwargs }) {
./addons/spreadsheet/static/tests/charts/ui/link_chart_figure.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/charts/ui/link_chart_figure.test.js:import { mockService, serverState } from "@web/../tests/web_test_helpers";
./addons/spreadsheet/static/tests/charts/ui/link_chart_figure.test.js:function mockActionService(doActionStep) {
./addons/spreadsheet/static/tests/charts/ui/link_chart_figure.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/charts/ui/link_chart_figure.test.js:    mockActionService(doActionStep);
./addons/spreadsheet/static/tests/charts/ui/link_chart_figure.test.js:    mockActionService(doActionStep);
./addons/spreadsheet/static/tests/charts/ui/link_chart_figure.test.js:    mockActionService("doAction");
./addons/spreadsheet/static/tests/charts/ui/link_chart_figure.test.js:    mockActionService("doAction");
./addons/spreadsheet/static/tests/charts/ui/link_chart_figure.test.js:    mockService("notification", {
./addons/spreadsheet/static/tests/charts/model/odoo_chart_plugin.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/charts/model/odoo_chart_plugin.test.js:import { mockService, makeServerError } from "@web/../tests/web_test_helpers";
./addons/spreadsheet/static/tests/charts/model/odoo_chart_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/charts/model/odoo_chart_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/charts/model/odoo_chart_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/charts/model/odoo_chart_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/charts/model/odoo_chart_plugin.test.js:        mockRPC: function (route, args) {
./addons/spreadsheet/static/tests/charts/model/odoo_chart_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/charts/model/odoo_chart_plugin.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/charts/model/odoo_chart_plugin.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/charts/model/odoo_chart_plugin.test.js:    mockService("action", fakeActionService);
./addons/spreadsheet/static/tests/charts/model/link_chart_plugin.test.js:import { defineMenus, makeMockEnv } from "@web/../tests/web_test_helpers";
./addons/spreadsheet/static/tests/charts/model/link_chart_plugin.test.js:    const env = await makeMockEnv();
./addons/spreadsheet/static/tests/charts/model/link_chart_plugin.test.js:    const env = await makeMockEnv();
./addons/spreadsheet/static/tests/charts/model/link_chart_plugin.test.js:    const env = await makeMockEnv();
./addons/spreadsheet/static/tests/charts/model/link_chart_plugin.test.js:    const env = await makeMockEnv();
./addons/spreadsheet/static/tests/currency/currency_plugin.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/currency/currency_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/currency/currency_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/currency/currency_plugin.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/currency/currency_rate_function.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/currency/currency_rate_function.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/currency/currency_rate_function.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/currency/currency_rate_function.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/currency/currency_rate_function.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/currency/currency_rate_function.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/currency/currency_rate_function.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/currency/currency_rate_function.test.js:        mockRPC: async function (route, args) {
./addons/spreadsheet/static/tests/helpers/ui.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/helpers/list.js: * @param {function} [params.mockRPC]
./addons/spreadsheet/static/tests/helpers/list.js:        mockRPC: params.mockRPC,
./addons/spreadsheet/static/tests/helpers/data.js:    MockServer,
./addons/spreadsheet/static/tests/helpers/data.js:function mockSpreadsheetDataController(request) {
./addons/spreadsheet/static/tests/helpers/data.js:onRpc("/spreadsheet/data/*", mockSpreadsheetDataController, { pure: true });
./addons/spreadsheet/static/tests/helpers/data.js: * Add the records inside serverData in the MockServer
./addons/spreadsheet/static/tests/helpers/data.js: * Add the views inside serverData in the MockServer
./addons/spreadsheet/static/tests/helpers/data.js:    const mockServer = MockServer.current;
./addons/spreadsheet/static/tests/helpers/data.js:    if (!mockServer) {
./addons/spreadsheet/static/tests/helpers/data.js:        throw new Error("No mock server found");
./addons/spreadsheet/static/tests/helpers/data.js:    return mockServer.env;
./addons/spreadsheet/static/tests/helpers/model.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/helpers/model.js:import { defineActions, defineParams, makeMockEnv, onRpc } from "@web/../tests/web_test_helpers";
./addons/spreadsheet/static/tests/helpers/model.js:import { getMockEnv } from "@web/../tests/_framework/env_test_helpers";
./addons/spreadsheet/static/tests/helpers/model.js: * @typedef {import("@web/../tests/_framework/mock_server/mock_server").MockServerEnvironment} MockServerEnvironment
./addons/spreadsheet/static/tests/helpers/model.js: * Create a spreadsheet model with a mocked server environnement
./addons/spreadsheet/static/tests/helpers/model.js: * @param {ServerData} [params.serverData] Data to be injected in the mock server
./addons/spreadsheet/static/tests/helpers/model.js: * @param {function} [params.mockRPC] Mock rpc function
./addons/spreadsheet/static/tests/helpers/model.js:    const env = await makeSpreadsheetMockEnv(params);
./addons/spreadsheet/static/tests/helpers/model.js: * Create a mocked server environnement
./addons/spreadsheet/static/tests/helpers/model.js: * @param {ServerData} [params.serverData] Data to be injected in the mock server
./addons/spreadsheet/static/tests/helpers/model.js: * @param {function} [params.mockRPC] Mock rpc function
./addons/spreadsheet/static/tests/helpers/model.js:export async function makeSpreadsheetMockEnv(params = {}) {
./addons/spreadsheet/static/tests/helpers/model.js:    if (params.mockRPC) {
./addons/spreadsheet/static/tests/helpers/model.js:        onRpc((args) => params.mockRPC(args.route, args)); // separate route from args for legacy (& forward ports) compatibility
./addons/spreadsheet/static/tests/helpers/model.js:    const env = getMockEnv() || (await makeMockEnv());
./addons/spreadsheet/static/tests/helpers/pivot_list.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/helpers/pivot.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/helpers/pivot.js: * @param {function} [params.mockRPC]
./addons/spreadsheet/static/tests/helpers/pivot.js:        mockRPC: params.mockRPC,
./addons/spreadsheet/static/tests/helpers/chart.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/tests/helpers/chart.js: * @param {function} [params.mockRPC]
./addons/spreadsheet/static/tests/helpers/commands.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/spreadsheet/static/src/o_spreadsheet/o_spreadsheet.js:     * Also useful for mocking a store.
./addons/purchase_stock/tests/test_purchase_lead_time.py:from unittest.mock import patch
./addons/purchase_stock/tests/test_purchase_lead_time.py:        self.mock_date = self.startPatcher(self.patcher)
./addons/purchase_stock/tests/test_purchase_lead_time.py:        self.mock_date.today.return_value = fields.Date.today() + timedelta(days=2)
./addons/purchase_stock/tests/test_uninstall.py:from unittest.mock import patch
./addons/purchase_stock/tests/test_stockvaluation.py:from unittest.mock import patch
./addons/purchase/tests/test_purchase_dashboard.py:        with self.mock_mail_gateway():
./addons/purchase/tests/test_purchase_dashboard.py:        with self.mock_mail_gateway():
./addons/l10n_vn_edi_viettel/tests/test_edi.py:from unittest import mock
./addons/l10n_vn_edi_viettel/tests/test_edi.py:from unittest.mock import patch
./addons/l10n_vn_edi_viettel/tests/test_edi.py:                    'transactionUuid': mock.ANY,  # Random, not important.
./addons/l10n_vn_edi_viettel/tests/test_edi.py:        Note: we are not trying to test the API, thus the few api call will be mocked to not happen.
./addons/calendar/static/tests/activity_menu.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/calendar/static/tests/activity_menu.test.js:    mockService,
./addons/calendar/static/tests/activity_menu.test.js:    mockDate(2018, 3, 20, 6, 0, 0);
./addons/calendar/static/tests/activity_menu.test.js:    mockService("action", {
./addons/calendar/static/tests/calendar.test.js:import { contains, makeMockServer, mountView, onRpc } from "@web/../tests/web_test_helpers";
./addons/calendar/static/tests/calendar.test.js:    const { env: pyEnv } = await makeMockServer();
./addons/calendar/static/tests/calendar_notification.test.js:    mockService,
./addons/calendar/static/tests/calendar_notification.test.js:    mockService("action", {
./addons/calendar/static/tests/attendee_calendar_views.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/calendar/static/tests/attendee_calendar_views.test.js:    makeMockServer,
./addons/calendar/static/tests/attendee_calendar_views.test.js:    MockServer,
./addons/calendar/static/tests/attendee_calendar_views.test.js:    mockDate("2016-12-12 08:00:00", 0);
./addons/calendar/static/tests/attendee_calendar_views.test.js:    const { env: pyEnv } = await makeMockServer();
./addons/calendar/static/tests/attendee_calendar_views.test.js:    const pyEnv = MockServer.current.env;
./addons/calendar/static/tests/calendar_test_helpers.js:import { CalendarEvent } from "./mock_server/mock_models/calendar_event";
./addons/calendar/static/tests/calendar_test_helpers.js:import { CalendarAttendee } from "./mock_server/mock_models/calendar_attendee";
./addons/calendar/static/tests/calendar_test_helpers.js:import { ResUsers } from "./mock_server/mock_models/res_users";
./addons/calendar/static/tests/calendar_test_helpers.js:import { MailActivity } from "./mock_server/mock_models/mail_activity";
./addons/calendar/static/tests/calendar_test_helpers.js:import { CalendarFilters } from "./mock_server/mock_models/calendar_filters";
./addons/calendar/static/tests/helpers/mock_server/models/calendar_event.js:import { MockServer } from '@web/../tests/helpers/mock_server';
./addons/calendar/static/tests/helpers/mock_server/models/calendar_event.js:patch(MockServer.prototype, {
./addons/calendar/static/src/views/list_view/calendar_list_view.js:function _mockGetCalendarPartnerIds(params) {
./addons/calendar/static/src/views/list_view/calendar_list_view.js:    /* Mock function for when there aren't records to be shown. */
./addons/calendar/static/src/views/list_view/calendar_list_view.js:registry.category("sample_server").add("get_selected_calendars_partner_ids", _mockGetCalendarPartnerIds);
./addons/calendar/tests/test_event_notifications.py:from unittest.mock import patch
./addons/calendar/tests/test_event_notifications.py:from odoo.addons.mail.tests.common import MailCase, MockEmail
./addons/calendar/tests/test_event_notifications.py:class TestEventNotifications(TransactionCase, MailCase, MockEmail, CronMixinCase):
./addons/calendar/tests/test_event_notifications.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/calendar/tests/test_event_notifications.py:        with self.mock_mail_gateway(mail_unlink_sent=False), self.mock_mail_app():
./addons/calendar/tests/test_event_notifications.py:        with self.mock_mail_gateway():
./addons/payment_adyen/tests/test_adyen.py:from unittest.mock import patch
./addons/payment_adyen/tests/test_adyen.py:        ) as signature_check_mock, patch(
./addons/payment_adyen/tests/test_adyen.py:            self.assertEqual(signature_check_mock.call_count, 1)
./addons/website_sale_stock/tests/test_website_sale_stock_product_warehouse.py:from odoo.addons.website_sale.tests.common import MockRequest
./addons/website_sale_stock/tests/test_website_sale_stock_product_warehouse.py:        with MockRequest(test_env, website=self.website.with_env(test_env)):
./addons/website_sale_stock/tests/test_website_sale_stock_product_warehouse.py:        with MockRequest(test_env, website=self.website.with_env(test_env)):
./addons/website_sale_stock/tests/test_website_sale_stock_product_warehouse.py:        with MockRequest(test_env, website=self.website.with_env(test_env)):
./addons/website_sale_stock/tests/test_website_sale_stock_product_warehouse.py:        with MockRequest(test_env, website=self.website.with_env(test_env)):
./addons/website_sale_stock/tests/test_website_sale_stock_product_warehouse.py:        with MockRequest(self.env, website=self.website, sale_order_id=so.id) as req:
./addons/website_sale_stock/tests/test_website_sale_stock_product_template.py:from odoo.addons.website_sale.tests.common import MockRequest
./addons/website_sale_stock/tests/test_website_sale_stock_product_template.py:        with MockRequest(env, website=self.website.with_env(env)):
./addons/website_sale_stock/tests/test_website_sale_stock_delivery.py:from odoo.addons.website_sale.tests.common import MockRequest, WebsiteSaleCommon
./addons/website_sale_stock/tests/test_website_sale_stock_delivery.py:        with MockRequest(self.env, website=self.website):
./addons/mrp/static/tests/mock_server/mock_models/res_fake.js:import { DEFAULT_MAIL_VIEW_ID } from "@mail/../tests/mock_server/mock_models/constants";
./addons/mrp/static/tests/mrp_test_helpers.js:import { ProductDocument } from "@mrp/../tests/mock_server/mock_models/product_document";
./addons/mrp/static/tests/mrp_test_helpers.js:import { ResFake } from "@mrp/../tests/mock_server/mock_models/res_fake";
./addons/event_sms/tests/test_sms_schedule.py:        with cls.mock_datetime_and_now(cls, cls.reference_now):
./addons/event_sms/tests/test_sms_schedule.py:        with self.mock_datetime_and_now(self.reference_now), self.mockSMSGateway():
./addons/event_sms/tests/test_sms_schedule.py:        with self.mock_datetime_and_now(self.reference_now + timedelta(days=3)), self.mockSMSGateway():
./addons/l10n_hu_edi/tests/test_flows_live.py:from unittest import skipIf, mock
./addons/l10n_hu_edi/tests/test_flows_live.py:        def mock_call_nav_endpoint(self, mode, service, data, timeout=20):
./addons/l10n_hu_edi/tests/test_flows_live.py:        with mock.patch.object(L10nHuEdiConnection, '_call_nav_endpoint', new=mock_call_nav_endpoint):
./addons/l10n_hu_edi/tests/__init__.py:from . import test_flows_mocked
./addons/l10n_hu_edi/tests/test_flows_mocked.py:from unittest import mock
./addons/l10n_hu_edi/tests/test_flows_mocked.py:class L10nHuEdiTestFlowsMocked(L10nHuEdiTestCommon, TestAccountMoveSendCommon):
./addons/l10n_hu_edi/tests/test_flows_mocked.py:    """ Test the Hungarian EDI flows using mocked data from the test servers. """
./addons/l10n_hu_edi/tests/test_flows_mocked.py:        with tools.file_open('l10n_hu_edi/tests/mocked_requests/queryTransactionStatus_response_warning.xml', 'r') as response_file:
./addons/l10n_hu_edi/tests/test_flows_mocked.py:        with tools.file_open('l10n_hu_edi/tests/mocked_requests/queryTransactionStatus_response_error.xml', 'r') as response_file:
./addons/l10n_hu_edi/tests/test_flows_mocked.py:        with tools.file_open('l10n_hu_edi/tests/mocked_requests/queryTransactionStatus_response_original.xml', 'r') as response_file:
./addons/l10n_hu_edi/tests/test_flows_mocked.py:        with tools.file_open('l10n_hu_edi/tests/mocked_requests/queryTransactionStatus_response_original.xml', 'r') as response_file:
./addons/l10n_hu_edi/tests/test_flows_mocked.py:            with tools.file_open('l10n_hu_edi/tests/mocked_requests/queryTransactionStatus_response_error.xml', 'r') as response_file:
./addons/l10n_hu_edi/tests/test_flows_mocked.py:            with tools.file_open('l10n_hu_edi/tests/mocked_requests/queryTransactionStatus_response_annulment_pending.xml', 'r') as response_file:
./addons/l10n_hu_edi/tests/test_flows_mocked.py:            with tools.file_open('l10n_hu_edi/tests/mocked_requests/queryTransactionStatus_response_annulment_done.xml', 'r') as response_file:
./addons/l10n_hu_edi/tests/test_flows_mocked.py:            with tools.file_open('l10n_hu_edi/tests/mocked_requests/queryTransactionStatus_response_annulment_done.xml', 'r') as response_file:
./addons/l10n_hu_edi/tests/test_flows_mocked.py:                          mocked_requests/{service}_response.xml
./addons/l10n_hu_edi/tests/test_flows_mocked.py:        class MockedSession:
./addons/l10n_hu_edi/tests/test_flows_mocked.py:                mocked_requests = ['manageInvoice', 'queryTaxpayer', 'tokenExchange', 'queryTransactionStatus', 'queryTransactionList', 'manageAnnulment']
./addons/l10n_hu_edi/tests/test_flows_mocked.py:                if base_url not in (prod_url, demo_url) or service not in mocked_requests:
./addons/l10n_hu_edi/tests/test_flows_mocked.py:                with tools.file_open(f'l10n_hu_edi/tests/mocked_requests/{service}_request.xml', 'rb') as expected_request_file:
./addons/l10n_hu_edi/tests/test_flows_mocked.py:                mock_response = mock.Mock(spec=requests.Response)
./addons/l10n_hu_edi/tests/test_flows_mocked.py:                mock_response.status_code = 200
./addons/l10n_hu_edi/tests/test_flows_mocked.py:                mock_response.headers = ''
./addons/l10n_hu_edi/tests/test_flows_mocked.py:                    mock_response.text = responses[service]
./addons/l10n_hu_edi/tests/test_flows_mocked.py:                    with tools.file_open(f'l10n_hu_edi/tests/mocked_requests/{service}_response.xml', 'r') as response_file:
./addons/l10n_hu_edi/tests/test_flows_mocked.py:                        mock_response.text = response_file.read()
./addons/l10n_hu_edi/tests/test_flows_mocked.py:                return mock_response
./addons/l10n_hu_edi/tests/test_flows_mocked.py:        with mock.patch('odoo.addons.l10n_hu_edi.models.l10n_hu_edi_connection.requests.Session', side_effect=MockedSession, autospec=True):
./addons/l10n_hu_edi/models/res_company.py:            - Demo: Mocks the NAV system (does not require credentials).
./addons/l10n_hu_edi/i18n/l10n_hu_edi.pot:"            - Demo: Mocks the NAV system (does not require credentials).\n"
./addons/l10n_hu_edi/i18n/hu.po:"            - Demo: Mocks the NAV system (does not require credentials).\n"
./addons/hr_recruitment/static/tests/ir_attachments.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/website_payment/tests/test_mailing.py:from odoo.addons.mail.tests.common import MockEmail
./addons/website_payment/tests/test_mailing.py:class TestMailing(PaymentCommon, MockEmail):
./addons/website_payment/tests/test_mailing.py:        with self.mock_mail_gateway():
./addons/im_livechat/static/tests/mock_server/livechat_mock_server.js:} from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/mock_server/livechat_mock_server.js:import { MockResponse } from "@web/../lib/hoot/mock/network";
./addons/im_livechat/static/tests/mock_server/livechat_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/im_livechat/static/tests/mock_server/livechat_mock_server.js:    /** @type {import("mock_models").LivechatChannel} */
./addons/im_livechat/static/tests/mock_server/livechat_mock_server.js:    /** @type {import("mock_models").ResCountry} */
./addons/im_livechat/static/tests/mock_server/livechat_mock_server.js:    /** @type {import("mock_models").ResPartner} */
./addons/im_livechat/static/tests/mock_server/livechat_mock_server.js:    /** @type {import("mock_models").ResUsers} */
./addons/im_livechat/static/tests/mock_server/livechat_mock_server.js:        const countryCode = context.mockedCountryCode;
./addons/im_livechat/static/tests/mock_server/livechat_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/im_livechat/static/tests/mock_server/livechat_mock_server.js:    /** @type {import("mock_models").DiscussChannel} */
./addons/im_livechat/static/tests/mock_server/livechat_mock_server.js:    /** @type {import("mock_models").RatingRating} */
./addons/im_livechat/static/tests/mock_server/livechat_mock_server.js:    return new MockResponse();
./addons/im_livechat/static/tests/mock_server/mock_models/im_livechat_channel.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/mock_server/mock_models/im_livechat_channel.js:        /** @type {import("mock_models").ResUsers} */
./addons/im_livechat/static/tests/mock_server/mock_models/im_livechat_channel.js:        /** @type {import("mock_models").ResUsers} */
./addons/im_livechat/static/tests/mock_server/mock_models/im_livechat_channel.js:     * Simplified mock implementation: returns
./addons/im_livechat/static/tests/mock_server/mock_models/@types/mock_models.d.ts:declare module "mock_models" {
./addons/im_livechat/static/tests/mock_server/mock_models/discuss_channel.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/im_livechat/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResCountry} */
./addons/im_livechat/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").ResPartner} */
./addons/im_livechat/static/tests/mock_server/mock_models/discuss_channel.js:        /** @type {import("mock_models").BusBus} */
./addons/im_livechat/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/im_livechat/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").DiscussChannelMember} */
./addons/im_livechat/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").LivechatChannel} */
./addons/im_livechat/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").ResLang} */
./addons/im_livechat/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").ResPartner} */
./addons/im_livechat/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").ResUsers} */
./addons/im_livechat/static/tests/mock_server/mock_models/res_partner.js:        /** @type {import("mock_models").ResPartner} */
./addons/im_livechat/static/tests/mock_server/mock_models/mail_message.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/im_livechat/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").MailMessage} */
./addons/im_livechat/static/tests/mock_server/mock_models/mail_message.js:        /** @type {import("mock_models").ResPartner} */
./addons/im_livechat/static/tests/mock_server/mock_models/discuss_channel_member.js:        /** @type {import("mock_models").DiscussChannel} */
./addons/im_livechat/static/tests/mock_server/mock_models/livechat_channel_rule.js:import { ServerModel } from "@web/../tests/_framework/mock_server/mock_model";
./addons/im_livechat/static/tests/thread_icon_patch.test.js:import { withGuest } from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/channel_join_leave.test.js:import { withGuest } from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/chat_window_patch.test.js:import { animationFrame } from "@odoo/hoot-mock";
./addons/im_livechat/static/tests/chat_window_patch.test.js:import { withGuest } from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/sidebar_patch.test.js:import { withGuest } from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/sidebar_patch.test.js:import { mockDate, tick } from "@odoo/hoot-mock";
./addons/im_livechat/static/tests/sidebar_patch.test.js:    mockDate("2023-01-03 12:00:00"); // so that it's after last interest (mock server is in 2019 by default!)
./addons/im_livechat/static/tests/sidebar_patch.test.js:    mockDate("2023-01-03 12:00:00");
./addons/im_livechat/static/tests/sidebar_patch.test.js:    mockDate("2023-01-03 12:00:00");
./addons/im_livechat/static/tests/sidebar_patch.test.js:    mockDate("2023-01-03 12:00:00");
./addons/im_livechat/static/tests/sidebar_patch.test.js:    mockDate("2023-01-03 12:00:00");
./addons/im_livechat/static/tests/visitor_disconnection.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/im_livechat/static/tests/visitor_disconnection.test.js:    mockDate("2025-01-01 12:00:00", +1);
./addons/im_livechat/static/tests/visitor_disconnection.test.js:    mockDate("2025-01-02 12:00:00", +1);
./addons/im_livechat/static/tests/visitor_disconnection.test.js:    mockDate("2025-01-05 12:00:00", +1);
./addons/im_livechat/static/tests/messaging_service_patch.test.js:import { withGuest } from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/messaging_service_patch.test.js:    mockService,
./addons/im_livechat/static/tests/messaging_service_patch.test.js:    mockService("presence", { isOdooFocused: () => false });
./addons/im_livechat/static/tests/discuss_patch.test.js:import { withGuest } from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/discuss_patch.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/im_livechat/static/tests/discuss_patch.test.js:    mockDate("2023-01-03 12:00:00"); // so that it's after last interest (mock server is in 2019 by default!)
./addons/im_livechat/static/tests/discuss_patch.test.js:    mockDate("2023-01-03 12:00:00"); // so that it's after last interest (mock server is in 2019 by default!)
./addons/im_livechat/static/tests/channel_invite.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/im_livechat/static/tests/channel_invite.test.js:    mockDate("2023-01-03 12:00:00");
./addons/im_livechat/static/tests/channel_invite.test.js:    mockDate("2023-01-03 12:00:00");
./addons/im_livechat/static/tests/embed/livechat_session.test.js:import { advanceTime } from "@odoo/hoot-mock";
./addons/im_livechat/static/tests/embed/autopopup.test.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/embed/expirable_storage.test.js:import { mockDate } from "@odoo/hoot-mock";
./addons/im_livechat/static/tests/embed/expirable_storage.test.js:    mockDate("2023-01-01 00:00:00");
./addons/im_livechat/static/tests/embed/expirable_storage.test.js:    mockDate("2023-01-01 23:00:00");
./addons/im_livechat/static/tests/embed/expirable_storage.test.js:    mockDate("2023-01-02 00:00:01");
./addons/im_livechat/static/tests/embed/livechat_button.test.js:import { mailDataHelpers } from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/composer_patch.test.js:import { withGuest } from "@mail/../tests/mock_server/mail_mock_server";
./addons/im_livechat/static/tests/livechat_test_helpers.js:import { RatingRating } from "@rating/../tests/mock_server/models/rating_rating";
./addons/im_livechat/static/tests/livechat_test_helpers.js:    MockServer,
./addons/im_livechat/static/tests/livechat_test_helpers.js:import { DiscussChannel } from "./mock_server/mock_models/discuss_channel";
./addons/im_livechat/static/tests/livechat_test_helpers.js:import { DiscussChannelMember } from "./mock_server/mock_models/discuss_channel_member";
./addons/im_livechat/static/tests/livechat_test_helpers.js:import { LivechatChannel } from "./mock_server/mock_models/im_livechat_channel";
./addons/im_livechat/static/tests/livechat_test_helpers.js:import { LivechatChannelRule } from "./mock_server/mock_models/livechat_channel_rule";
./addons/im_livechat/static/tests/livechat_test_helpers.js:import { ResGroups } from "./mock_server/mock_models/res_groups";
./addons/im_livechat/static/tests/livechat_test_helpers.js:import { ResLang } from "./mock_server/mock_models/res_lang";
./addons/im_livechat/static/tests/livechat_test_helpers.js:import { ResPartner } from "./mock_server/mock_models/res_partner";
./addons/im_livechat/static/tests/livechat_test_helpers.js:import { ResUsers } from "./mock_server/mock_models/res_users";
./addons/im_livechat/static/tests/livechat_test_helpers.js:    const pyEnv = MockServer.env ?? (await startServer());
./addons/im_livechat/static/src/embed/common/expirable_storage.js:    // the `MockStorage` class.
./addons/im_livechat/tests/test_im_livechat_report.py:from unittest.mock import patch
./addons/im_livechat/tests/test_get_discuss_channel.py:from unittest.mock import patch, PropertyMock
./addons/im_livechat/tests/test_get_discuss_channel.py:        with patch('odoo.http.GeoIP.country_code', new_callable=PropertyMock(return_value=belgium.code)):
./addons/im_livechat/tests/test_get_operator.py:from unittest.mock import patch
./addons/im_livechat/__manifest__.py:            'bus/static/tests/mock_server/**/*',
./addons/im_livechat/__manifest__.py:            'mail/static/tests/mock_server/**/*',
./addons/im_livechat/__manifest__.py:            'rating/static/tests/mock_server/**/*',
./addons/im_livechat/__manifest__.py:            'im_livechat/static/tests/mock_server/**/*',
./addons/im_livechat/__manifest__.py:            'bus/static/tests/mock_websocket.js',
./addons/stock_delivery/tests/test_packing_delivery.py:from unittest.mock import patch
./addons/stock_delivery/tests/test_packing_delivery.py:        # Mock carrier shipping method
./addons/stock_delivery/tests/test_carrier_propagation.py:from unittest.mock import patch, DEFAULT
./addons/project_sms/tests/test_project_sharing.py:        with self.mockSMSGateway():
./addons/project_sms/tests/test_project_sharing.py:        with self.mockSMSGateway():
./addons/project_sms/tests/test_project_sharing.py:        with self.mockSMSGateway():
./addons/project_sms/tests/test_project_sharing.py:        with self.mockSMSGateway():
./addons/project_sms/tests/test_project_sharing.py:        with self.mockSMSGateway():
./addons/loyalty/tests/test_loyalty.py:from unittest.mock import patch
./addons/loyalty/tests/test_loyalty.py:        def mock_send_mail(self, *args, **kwargs):
./addons/loyalty/tests/test_loyalty.py:        with patch('odoo.addons.mail.models.mail_template.MailTemplate.send_mail', new=mock_send_mail):
./addons/microsoft_calendar/static/tests/microsoft_calendar_mock_server.js:import { MockServer } from "@web/../tests/helpers/mock_server";
./addons/microsoft_calendar/static/tests/microsoft_calendar_mock_server.js:patch(MockServer.prototype, {
./addons/microsoft_calendar/static/tests/microsoft_calendar_tests.js:import { patchUserWithCleanup } from "@web/../tests/helpers/mock_services";
./addons/microsoft_calendar/static/tests/microsoft_calendar_tests.js:            async mockRPC(route, args) {
./addons/microsoft_calendar/tests/test_delete_events.py:from unittest.mock import patch, ANY, call
./addons/microsoft_calendar/tests/test_delete_events.py:    mock_get_token,
./addons/microsoft_calendar/tests/test_delete_events.py:@patch.object(ResUsers, '_get_microsoft_calendar_token', mock_get_token)
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_delete_simple_event_from_odoo_organizer_calendar(self, mock_delete):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_delete.assert_called_once_with(
./addons/microsoft_calendar/tests/test_delete_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_delete_simple_event_from_odoo_attendee_calendar(self, mock_delete):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_delete.assert_called_once_with(
./addons/microsoft_calendar/tests/test_delete_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_archive_simple_event_from_odoo_organizer_calendar(self, mock_delete):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_delete.assert_called_once_with(
./addons/microsoft_calendar/tests/test_delete_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_archive_simple_event_from_odoo_attendee_calendar(self, mock_delete):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_delete.assert_called_once_with(
./addons/microsoft_calendar/tests/test_delete_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_archive_several_events_at_once(self, mock_delete):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_delete.assert_has_calls([
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_cancel_simple_event_from_outlook_organizer_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_get_events.return_value = (
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_delete_one_event_from_recurrence_from_odoo_calendar(self, mock_delete):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_delete.assert_called_once_with(
./addons/microsoft_calendar/tests/test_delete_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_delete_first_event_from_recurrence_from_odoo_calendar(self, mock_delete):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_delete.assert_called_once_with(
./addons/microsoft_calendar/tests/test_delete_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_delete_one_event_from_recurrence_from_outlook_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_get_events.return_value = (MicrosoftEvent(rec_values), None)
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_delete_first_event_from_recurrence_from_outlook_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_get_events.return_value = (MicrosoftEvent(rec_values), None)
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_delete_one_event_and_future_from_recurrence_from_outlook_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_get_events.return_value = (MicrosoftEvent(rec_values), None)
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_delete_first_event_and_future_from_recurrence_from_outlook_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_get_events.return_value = (
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_delete_all_events_from_recurrence_from_outlook_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_delete_single_event_from_recurrence_from_odoo_calendar(self, mock_delete):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_delete.assert_called_once_with(
./addons/microsoft_calendar/tests/test_delete_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_delete_synced_event_with_sync_config_paused(self, mock_delete):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_delete.assert_not_called()
./addons/microsoft_calendar/tests/test_delete_events.py:    def test_delete_recurrence_previously_synced(self, mock_delete):
./addons/microsoft_calendar/tests/test_delete_events.py:        mock_delete.assert_not_called()
./addons/microsoft_calendar/tests/common.py:from unittest.mock import patch, MagicMock
./addons/microsoft_calendar/tests/common.py:def mock_get_token(user):
./addons/microsoft_calendar/tests/common.py:    @patch.object(MicrosoftCalendarSync, '_microsoft_insert', MagicMock())
./addons/microsoft_calendar/tests/common.py:    @patch.object(MicrosoftCalendarSync, '_microsoft_delete', MagicMock())
./addons/microsoft_calendar/tests/common.py:    @patch.object(MicrosoftCalendarSync, '_microsoft_patch', MagicMock())
./addons/microsoft_calendar/tests/test_update_events.py:from unittest.mock import patch, ANY
./addons/microsoft_calendar/tests/test_update_events.py:from odoo.addons.microsoft_calendar.tests.common import TestCommon, mock_get_token, _modified_date_in_the_future, patch_api
./addons/microsoft_calendar/tests/test_update_events.py:@patch.object(ResUsers, '_get_microsoft_calendar_token', mock_get_token)
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_odoo_simple_event_without_sync(self, mock_patch):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_not_called()
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_simple_event_from_odoo(self, mock_patch):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.return_value = True
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_called_once_with(
./addons/microsoft_calendar/tests/test_update_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_simple_event_from_odoo_attendee_calendar(self, mock_patch):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.return_value = True
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_called_once_with(
./addons/microsoft_calendar/tests/test_update_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_name_of_one_event_of_recurrence_from_odoo(self, mock_patch):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_called_once_with(
./addons/microsoft_calendar/tests/test_update_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_start_of_one_event_of_recurrence_from_odoo(self, mock_patch):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_called_once_with(
./addons/microsoft_calendar/tests/test_update_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_start_of_one_event_of_recurrence_from_odoo_with_overlap(self, mock_patch):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_not_called()
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_name_of_one_event_of_recurrence_from_odoo_attendee_calendar(self, mock_patch):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_called_once_with(
./addons/microsoft_calendar/tests/test_update_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:        self, mock_patch, mock_insert, mock_delete
./addons/microsoft_calendar/tests/test_update_events.py:        self.assertEqual(mock_patch.call_count, self.recurrent_events_count - modified_event_id)
./addons/microsoft_calendar/tests/test_update_events.py:            mock_patch.assert_any_call(
./addons/microsoft_calendar/tests/test_update_events.py:                token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:        self, mock_patch, mock_insert, mock_delete
./addons/microsoft_calendar/tests/test_update_events.py:            mock_delete.assert_any_call(
./addons/microsoft_calendar/tests/test_update_events.py:                token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_called_once_with(
./addons/microsoft_calendar/tests/test_update_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:        self, mock_patch, mock_insert, mock_delete
./addons/microsoft_calendar/tests/test_update_events.py:            mock_delete.assert_any_call(
./addons/microsoft_calendar/tests/test_update_events.py:                token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_called_once_with(
./addons/microsoft_calendar/tests/test_update_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:        self, mock_patch, mock_insert, mock_delete
./addons/microsoft_calendar/tests/test_update_events.py:            mock_delete.assert_any_call(
./addons/microsoft_calendar/tests/test_update_events.py:                token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_called_once_with(
./addons/microsoft_calendar/tests/test_update_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:        self, mock_patch, mock_insert, mock_delete
./addons/microsoft_calendar/tests/test_update_events.py:        self.assertEqual(mock_patch.call_count, self.recurrent_events_count)
./addons/microsoft_calendar/tests/test_update_events.py:            mock_patch.assert_any_call(
./addons/microsoft_calendar/tests/test_update_events.py:                token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:        self, mock_patch, mock_insert, mock_delete
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_called_once_with(
./addons/microsoft_calendar/tests/test_update_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:            mock_delete.assert_any_call(
./addons/microsoft_calendar/tests/test_update_events.py:                token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:        self, mock_patch, mock_insert, mock_delete
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_called_once_with(
./addons/microsoft_calendar/tests/test_update_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:            mock_delete.assert_any_call(
./addons/microsoft_calendar/tests/test_update_events.py:                token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_simple_event_from_outlook_organizer_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_simple_event_from_outlook_attendee_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_name_of_one_event_of_recurrence_from_outlook_organizer_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (MicrosoftEvent(events), None)
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_start_of_one_event_of_recurrence_from_outlook_organizer_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (MicrosoftEvent(events), None)
./addons/microsoft_calendar/tests/test_update_events.py:        self, mock_get_events
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (MicrosoftEvent(events), None)
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_name_of_one_event_and_future_of_recurrence_from_outlook_organizer_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (MicrosoftEvent(events), None)
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_start_of_one_event_and_future_of_recurrence_from_outlook_organizer_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (MicrosoftEvent(events), None)
./addons/microsoft_calendar/tests/test_update_events.py:        self, mock_get_events
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (MicrosoftEvent(events), None)
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_name_of_all_events_of_recurrence_from_outlook_organizer_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (MicrosoftEvent(events), None)
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_start_of_all_events_of_recurrence_from_outlook_organizer_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (MicrosoftEvent(events), None)
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_start_of_all_events_of_recurrence_with_more_events(self, mock_get_events):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (MicrosoftEvent(events), None)
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_start_of_all_events_of_recurrence_with_less_events(self, mock_get_events):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (MicrosoftEvent(events), None)
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_start_of_all_events_of_recurrence_with_exceptions(self, mock_get_events):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (MicrosoftEvent(events), None)
./addons/microsoft_calendar/tests/test_update_events.py:    def test_forbid_simple_event_become_recurrence_sync_on(self, mock_patch):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_not_called()
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_synced_event_with_sync_config_paused(self, mock_patch):
./addons/microsoft_calendar/tests/test_update_events.py:        mock_patch.assert_not_called()
./addons/microsoft_calendar/tests/test_update_events.py:    def test_changing_event_organizer_to_another_user(self, mock_insert, mock_delete, mock_get_events):
./addons/microsoft_calendar/tests/test_update_events.py:        # Set mock return values for the event re-creation.
./addons/microsoft_calendar/tests/test_update_events.py:        mock_insert.return_value = (event_id, event_iCalUId)
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = ([], None)
./addons/microsoft_calendar/tests/test_update_events.py:        mock_delete.assert_any_call(
./addons/microsoft_calendar/tests/test_update_events.py:            token=mock_get_token(self.attendee_user),
./addons/microsoft_calendar/tests/test_update_events.py:    def test_restart_sync_with_synced_recurrence(self, mock_patch):
./addons/microsoft_calendar/tests/test_update_events.py:    def test_update_old_event_synced_with_outlook(self, mock_get_events, mock_write_from_microsoft):
./addons/microsoft_calendar/tests/test_update_events.py:        # Mock the modification time in Microsoft with 10 minutes ahead Odoo event 'write_date'.
./addons/microsoft_calendar/tests/test_update_events.py:        mock_get_events.return_value = (
./addons/microsoft_calendar/tests/test_update_events.py:        mock_write_from_microsoft.assert_not_called()
./addons/microsoft_calendar/tests/test_create_events.py:from unittest.mock import patch, call
./addons/microsoft_calendar/tests/test_create_events.py:from odoo.addons.microsoft_calendar.tests.common import TestCommon, mock_get_token, _modified_date_in_the_future
./addons/microsoft_calendar/tests/test_create_events.py:@patch.object(ResUsers, '_get_microsoft_calendar_token', mock_get_token)
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_simple_event_without_sync(self, mock_insert):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_not_called()
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_simple_event_from_outlook_organizer_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = (MicrosoftEvent([self.simple_event_from_outlook_organizer]), None)
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_simple_event_from_outlook_attendee_calendar_and_organizer_exists_in_odoo(self, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = (MicrosoftEvent([self.simple_event_from_outlook_attendee]), None)
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_simple_event_from_outlook_attendee_calendar_and_organizer_does_not_exist_in_odoo(self, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = (MicrosoftEvent([outlook_event]), None)
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_simple_event_from_outlook_attendee_calendar_where_email_addresses_are_capitalized(self, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = (MicrosoftEvent([outlook_event]), None)
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_recurrent_event_without_sync(self, mock_insert):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_not_called()
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_recurrent_event_with_sync(self, mock_insert, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_not_called()
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.return_value = (event_id, event_iCalUId)
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = ([], None)
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_called_once()
./addons/microsoft_calendar/tests/test_create_events.py:        self.assert_dict_equal(mock_insert.call_args[0][0], self.recurrent_event_ms_values)
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_recurrent_event_with_sync_by_another_user(self, mock_insert, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_not_called()
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.return_value = (event_id, event_iCalUId)
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = ([], None)
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_not_called()
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_recurrent_event_from_outlook_organizer_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = (MicrosoftEvent(self.recurrent_event_from_outlook_organizer), None)
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_recurrent_event_from_outlook_attendee_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = (MicrosoftEvent(self.recurrent_event_from_outlook_attendee), None)
./addons/microsoft_calendar/tests/test_create_events.py:    def test_forbid_recurrences_creation_synced_outlook_calendar(self, mock_insert):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_not_called()
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_event_with_sync_config_paused(self, mock_insert):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_not_called()
./addons/microsoft_calendar/tests/test_create_events.py:    def test_sync_create_update_single_event(self, mock_insert, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        # Assert that insert was not called and prepare mock for the synchronization restart.
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_not_called()
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = ([], None)
./addons/microsoft_calendar/tests/test_create_events.py:            mock_insert.assert_not_called()
./addons/microsoft_calendar/tests/test_create_events.py:        # Prepare mock for new synchronization.
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.return_value = (event_id, event_iCalUId)
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = ([], None)
./addons/microsoft_calendar/tests/test_create_events.py:        # Assert that the event got synchronized with Microsoft (through mock).
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_called_once()
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_event_for_another_user(self, mock_insert, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        # Set mock return values for the event creation.
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.return_value = (event_id, event_iCalUId)
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = ([], None)
./addons/microsoft_calendar/tests/test_create_events.py:        # Create event matching the creation conditions: user B is synced and now listed as an attendee. Set mock return values.
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_called_once()
./addons/microsoft_calendar/tests/test_create_events.py:        # Mock event from Microsoft and sync event with Odoo through self.attendee_user (synced user).
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = (MicrosoftEvent([self.simple_event_from_outlook_organizer]), None)
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_simple_event_from_outlook_without_organizer(self, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = (MicrosoftEvent([outlook_event]), None)
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_videocall_sync_microsoft_calendar(self, mock_insert, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        # Mock values to simulate Microsoft event creation
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.return_value = (event_id, event_iCalUId)
./addons/microsoft_calendar/tests/test_create_events.py:        # Prepare the mock event response from Microsoft
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = (MicrosoftEvent([self.response_from_outlook_organizer]), None)
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_called_once()
./addons/microsoft_calendar/tests/test_create_events.py:        self.assertEqual(mock_insert.call_args[0][0].get('isOnlineMeeting'), True,
./addons/microsoft_calendar/tests/test_create_events.py:        self.assertEqual(mock_insert.call_args[0][0].get('onlineMeetingProvider'), 'teamsForBusiness',
./addons/microsoft_calendar/tests/test_create_events.py:    def test_no_videocall_hr_holidays(self, mock_insert, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        # Mock Microsoft API response for event creation
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.return_value = (event_id, event_iCalUId)
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = ([], None)
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_called_once()
./addons/microsoft_calendar/tests/test_create_events.py:        self.assertEqual(mock_insert.call_args[0][0].get('isOnlineMeeting'), False,
./addons/microsoft_calendar/tests/test_create_events.py:        self.assertFalse(mock_insert.call_args[0][0].get('onlineMeetingProvider', False))
./addons/microsoft_calendar/tests/test_create_events.py:    def test_skip_sync_for_non_synchronized_users_new_events(self, mock_insert):
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_not_called()
./addons/microsoft_calendar/tests/test_create_events.py:    def test_create_duplicate_event_microsoft_calendar(self, mock_insert, mock_get_events):
./addons/microsoft_calendar/tests/test_create_events.py:        # Mock values to simulate Microsoft event creation
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.return_value = (event_id, event_iCalUId)
./addons/microsoft_calendar/tests/test_create_events.py:        # Prepare the mock event response from Microsoft
./addons/microsoft_calendar/tests/test_create_events.py:        mock_get_events.return_value = (MicrosoftEvent([self.response_from_outlook_organizer, self.response_from_outlook_organizer_1]), None)
./addons/microsoft_calendar/tests/test_create_events.py:        mock_insert.assert_called()
./addons/microsoft_calendar/tests/test_sync_odoo2microsoft_mail.py:from unittest.mock import patch
./addons/microsoft_calendar/tests/test_sync_odoo2microsoft_mail.py:                with self.mock_mail_gateway(), patch.object(MicrosoftCalendarService, 'insert') as mock_insert:
./addons/microsoft_calendar/tests/test_sync_odoo2microsoft_mail.py:                    mock_insert.return_value = ('1', '1')
./addons/microsoft_calendar/tests/test_sync_odoo2microsoft_mail.py:                    mock_insert.assert_called_once()
./addons/microsoft_calendar/tests/test_sync_odoo2microsoft_mail.py:                    self.assert_dict_equal(mock_insert.call_args[0][0]['organizer'], {
./addons/microsoft_calendar/tests/test_sync_odoo2microsoft_mail.py:                    mock_insert.assert_not_called()
./addons/microsoft_calendar/tests/test_answer_events.py:from unittest.mock import patch, ANY
./addons/microsoft_calendar/tests/test_answer_events.py:from odoo.addons.microsoft_calendar.tests.common import TestCommon, mock_get_token, _modified_date_in_the_future, patch_api
./addons/microsoft_calendar/tests/test_answer_events.py:@patch.object(ResUsers, '_get_microsoft_calendar_token', mock_get_token)
./addons/microsoft_calendar/tests/test_answer_events.py:    def test_attendee_accepts_event_from_odoo_calendar(self, mock_answer, mock_get_single_event):
./addons/microsoft_calendar/tests/test_answer_events.py:        mock_get_single_event.return_value = (True, {'value': [{'id': attendee.event_id.microsoft_id}]})
./addons/microsoft_calendar/tests/test_answer_events.py:        mock_answer.assert_called_once_with(
./addons/microsoft_calendar/tests/test_answer_events.py:            token=mock_get_token(self.attendee_user),
./addons/microsoft_calendar/tests/test_answer_events.py:    def test_attendee_declines_event_from_odoo_calendar(self, mock_answer, mock_get_single_event):
./addons/microsoft_calendar/tests/test_answer_events.py:        mock_get_single_event.return_value = (True, {'value': [{'id': attendee.event_id.microsoft_id}]})
./addons/microsoft_calendar/tests/test_answer_events.py:        mock_answer.assert_called_once_with(
./addons/microsoft_calendar/tests/test_answer_events.py:            token=mock_get_token(self.attendee_user),
./addons/microsoft_calendar/tests/test_answer_events.py:    def test_attendee_accepts_event_from_outlook_calendar(self, mock_get_events):
./addons/microsoft_calendar/tests/test_answer_events.py:        mock_get_events.return_value = (
./addons/microsoft_calendar/tests/test_answer_events.py:    def test_attendee_accepts_event_from_outlook_calendar_synced_by_organizer(self, mock_get_events):
./addons/microsoft_calendar/tests/test_answer_events.py:        mock_get_events.return_value = (
./addons/microsoft_calendar/tests/test_answer_events.py:    def test_attendee_declines_event_from_outlook_calendar_synced_by_organizer(self, mock_get_events):
./addons/microsoft_calendar/tests/test_answer_events.py:        mock_get_events.return_value = (
./addons/microsoft_calendar/tests/test_answer_events.py:    def test_answer_event_with_external_organizer(self, mock_answer, mock_get_single_event):
./addons/microsoft_calendar/tests/test_answer_events.py:        mock_get_single_event.return_value = (True, {'value': [{'id': attendee_ms_organizer_event_id}]})
./addons/microsoft_calendar/tests/test_answer_events.py:        mock_answer.assert_called_once_with(
./addons/microsoft_calendar/tests/test_answer_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_answer_events.py:        mock_answer.assert_called_with(
./addons/microsoft_calendar/tests/test_answer_events.py:            token=mock_get_token(self.organizer_user),
./addons/microsoft_calendar/tests/test_microsoft_service.py:from unittest.mock import patch, call, MagicMock
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_get_events_unexpected_exception(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.side_effect = Exception()
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_get_events_delta_token_error(self, mock_do_request, mock_check_full_sync_required):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.side_effect = [
./addons/microsoft_calendar/tests/test_microsoft_service.py:            requests.HTTPError(response=MagicMock(status_code=410, content="fullSyncRequired")),
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_check_full_sync_required.return_value = (True)
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_has_calls([self.call_with_sync_token, self.call_without_sync_token])
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_get_events_delta_without_sync_token(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = self._do_request_result({"value": []})
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_has_calls([self.call_without_sync_token])
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_get_events_delta_with_sync_token(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = self._do_request_result({
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_has_calls([self.call_with_sync_token])
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_get_events_one_page(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = self._do_request_result({
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_has_calls([self.call_without_sync_token])
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_get_events_loop_over_pages(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.side_effect = [
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_has_calls([
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_get_events_filter_out_occurrences(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = self._do_request_result({
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_has_calls([self.call_without_sync_token])
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_get_occurrence_details(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = self._do_request_result({
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_called_with(
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_get_events_no_serie_master(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = self._do_request_result({
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_get_events_with_one_serie_master(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.side_effect = [
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_insert(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = self._do_request_result({'id': 1, 'iCalUId': 2})
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_called_with(
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_patch_returns_false_if_event_does_not_exist(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = (404, "", None)
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_called_with(
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_patch_an_existing_event(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = (200, "", None)
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_called_with(
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_delete_returns_false_if_event_does_not_exist(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = (404, "", None)
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_called_with(
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_delete_an_already_cancelled_event(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:            mock_do_request.return_value = (status, "", None)
./addons/microsoft_calendar/tests/test_microsoft_service.py:            mock_do_request.assert_called_with(
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_delete_an_existing_event(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = (200, "", None)
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_called_with(
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_answer_returns_false_if_event_does_not_exist(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = (404, "", None)
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_called_with(
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_answer_to_an_existing_event(self, mock_do_request):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.return_value = (200, "", None)
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_called_with(
./addons/microsoft_calendar/tests/test_microsoft_service.py:    def test_get_events_delta_with_outdated_sync_token(self, mock_do_request, mock_check_full_sync_required):
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.side_effect = [
./addons/microsoft_calendar/tests/test_microsoft_service.py:            requests.HTTPError(response=MagicMock(status_code=410, error={'code': "SyncStateNotFound"})),
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_check_full_sync_required.return_value = (True)
./addons/microsoft_calendar/tests/test_microsoft_service.py:        mock_do_request.assert_has_calls([
./addons/microsoft_calendar/__manifest__.py:            'microsoft_calendar/static/tests/microsoft_calendar_mock_server.js',
./addons/auth_totp_mail/tests/test_notify_security_update_totp.py:        with self.mock_mail_gateway():
./addons/auth_totp_mail/tests/test_notify_security_update_totp.py:        with self.mock_mail_gateway():
./addons/auth_totp_mail/tests/test_notify_security_update_totp.py:        with self.mock_mail_gateway():
./addons/auth_totp_mail/tests/test_notify_security_update_totp.py:        with self.mock_mail_gateway():
./addons/mail_plugin/tests/common.py:from unittest.mock import patch
./addons/mail_plugin/tests/common.py:def mock_auth_method_outlook(login):
./addons/mail_plugin/tests/common.py:    """Mock the Outlook auth method.
./addons/mail_plugin/tests/common.py:    @mock_auth_method_outlook('employee')
./addons/mail_plugin/tests/common.py:    def mock_plugin_partner_get(self, name, email, patched_iap_enrich):
./addons/mail_plugin/tests/common.py:        The third argument "patched_iap_enrich" allow you to mock the IAP request and
./addons/mail_plugin/tests/common.py:    @mock_auth_method_outlook('employee')
./addons/mail_plugin/tests/common.py:    def mock_enrich_and_create_company(self, partner_id, patched_iap_enrich):
./addons/mail_plugin/tests/common.py:        The third argument "patched_iap_enrich" allow you to mock the IAP request and
./addons/mail_plugin/tests/test_controller.py:from unittest.mock import Mock, patch
./addons/mail_plugin/tests/test_controller.py:from odoo.addons.mail_plugin.tests.common import TestMailPluginControllerCommon, mock_auth_method_outlook
./addons/mail_plugin/tests/test_controller.py:        result = self.mock_enrich_and_create_company(
./addons/mail_plugin/tests/test_controller.py:    @mock_auth_method_outlook('employee')
./addons/mail_plugin/tests/test_controller.py:        mocked_request_enrich = Mock()
./addons/mail_plugin/tests/test_controller.py:            new=mocked_request_enrich,
./addons/mail_plugin/tests/test_controller.py:        self.assertFalse(mocked_request_enrich.called)
./addons/mail_plugin/tests/test_controller.py:        mock_iap_enrich = Mock()
./addons/mail_plugin/tests/test_controller.py:        result = self.mock_plugin_partner_get("Test", "qsd@test_domain.xyz", mock_iap_enrich)
./addons/mail_plugin/tests/test_controller.py:        self.assertFalse(mock_iap_enrich.called)
./addons/mail_plugin/tests/test_controller.py:        result = self.mock_plugin_partner_get(
./addons/mail_plugin/tests/test_controller.py:        result = self.mock_plugin_partner_get(
./addons/mail_plugin/tests/test_controller.py:        mock_iap_enrich = Mock()
./addons/mail_plugin/tests/test_controller.py:        result = self.mock_plugin_partner_get("Test", "qsd@test_domain.xyz", mock_iap_enrich)
./addons/mail_plugin/tests/test_controller.py:        self.assertFalse(mock_iap_enrich.called, "We already enriched this company, should not call IAP a second time")
./addons/mail_plugin/tests/test_controller.py:        result = self.mock_plugin_partner_get(
./addons/mail_plugin/tests/test_controller.py:            result = self.mock_plugin_partner_get(
./addons/mail_plugin/tests/test_controller.py:        result = self.mock_plugin_partner_get(
./addons/mail_plugin/tests/test_controller.py:        result = self.mock_plugin_partner_get(
./addons/mail_plugin/tests/test_controller.py:        mock_iap_enrich = Mock()
./addons/mail_plugin/tests/test_controller.py:        result = self.mock_plugin_partner_get("Test partner", "notificaTION@EXAMPLE.COM", mock_iap_enrich)
./addons/account/static/tests/legacy/x2many_buttons_tests.js:                    // for the sake of mocking data, we don't care about the consistency of duplicated refs across records
./addons/account/static/tests/legacy/x2many_buttons_tests.js:            // as the redirection to the relevant model happens through py action, for mocking purposes we assume a simple account.move to account.move scenario
./addons/account/static/tests/legacy/x2many_buttons_tests.js:            mockRPC(route, { args, method, model }) {
./addons/account/static/tests/legacy/bills_upload.js:            mockRPC(route, args) {
./addons/account/static/tests/legacy/bills_upload.js:            mockRPC(route, args) {
./addons/account/static/tests/account_test_helpers.js:import { AccountMove } from "./mock_server/mock_models/account_move";
./addons/account/static/tests/account_test_helpers.js:import { AccountMoveLine } from "./mock_server/mock_models/account_move_line";
./addons/account/static/tests/helpers/mock_server.js:import { MockServer } from "@web/../tests/helpers/mock_server";
./addons/account/static/tests/helpers/mock_server.js:patch(MockServer.prototype, {
./addons/account/tests/test_account_incoming_supplier_invoice.py:from unittest.mock import patch
./addons/account/tests/test_account_move_reconcile.py:from unittest.mock import patch
./addons/account/tests/test_chart_template.py:from unittest.mock import patch
./addons/account/tests/test_chart_template.py:        The result of '_get_chart_template_data' is mocked (correctly) in this test (and not tested).
./addons/account/tests/test_chart_template.py:        # Local mock for '_get_chart_template_mapping'
./addons/account/tests/test_chart_template.py:        # Create a local mock of '_get_chart_template_data'; "extend" 'test_get_data' with the translation info
./addons/account/tests/test_chart_template.py:        # Init empty mock translations to make sure we do not use unintended translation
./addons/account/tests/test_chart_template.py:        mock_python_translations = {}
./addons/account/tests/test_chart_template.py:            mock_python_translations.setdefault((module, lang), {})[value] = translation
./addons/account/tests/test_chart_template.py:                    with patch.object(code_translations, 'python_translations', mock_python_translations):
./addons/account/tests/test_account_move_out_invoice.py:from unittest.mock import patch
./addons/account/tests/common.py:from unittest.mock import patch
./addons/account/tests/common.py:class AccountTestMockOnlineSyncCommon(HttpCase):
./addons/account/tests/common.py:        with self.mock_online_sync_favorite_institutions():
./addons/account/tests/common.py:    def mock_online_sync_favorite_institutions(cls):
./addons/account/tests/common.py:class AccountTestInvoicingHttpCommon(AccountTestInvoicingCommon, AccountTestMockOnlineSyncCommon):
./addons/account/tests/test_account_move_send.py:from unittest.mock import patch
./addons/account/tests/test_account_move_send.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/account/tests/test_account_move_send.py:        with self.mock_mail_gateway(mail_unlink_sent=False), \
./addons/account/tests/test_account_move_send.py:             self.mock_mail_app():
./addons/account/tests/test_account_move_send.py:        with self.mock_mail_gateway(mail_unlink_sent=False), \
./addons/account/tests/test_account_move_send.py:             self.mock_mail_app():
./addons/account/tests/test_account_move_send.py:        with self.mock_mail_gateway(mail_unlink_sent=False), \
./addons/account/tests/test_account_move_send.py:             self.mock_mail_app():
./addons/account/tests/test_account_move_send.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/account/tests/test_account_move_send.py:        with patch('odoo.addons.account.models.account_move_send.AccountMoveSend._hook_invoice_document_after_pdf_report_render') as mocked_method:
./addons/account/tests/test_account_move_send.py:            mocked_method.assert_not_called()
./addons/account/tests/test_account_payment.py:from unittest.mock import patch
./addons/account/tests/test_account_payment.py:            with self.subTest(subtest_msg), patch.object(self.env.registry['account.move'], '_invoice_paid_hook', autospec=True) as mock_hook:
./addons/account/tests/test_account_payment.py:                yield mock_hook
./addons/account/tests/test_account_payment.py:                valid_calls = [call for call in mock_hook.call_args_list if call.args[0]]  # ignore when called on empty recordset
./addons/account/tests/test_sequence_mixin.py:from unittest.mock import patch
./addons/account/tests/test_account_all_l10n.py:from unittest.mock import patch
./addons/account/tests/test_account_journal.py:from unittest.mock import patch
./addons/account/tests/test_multivat.py:from unittest.mock import patch
./addons/account/tests/test_account_inalterable_hash.py:from unittest.mock import patch
./addons/account/tests/test_account_inalterable_hash.py:        to mock the old behavior."""
./addons/test_import_export/tests/test_export.py:from unittest.mock import patch
./addons/test_import_export/tests/test_export.py:        self.worksheet = {}  # mock worksheet
./addons/test_import_export/tests/test_export.py:    def _mock_write(self, row, column, value, style=None):
./addons/test_import_export/tests/test_export.py:        with patch.object(ExportXlsxWriter, 'write', self._mock_write):
./addons/test_import_export/__manifest__.py:    # website is there only for MockRequest
./addons/sms/static/tests/web/sms_button.test.js:import { MockServer, asyncStep, mockService, mountView, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/sms/static/tests/web/sms_button.test.js:    const visitorId = MockServer.env["visitor"].search([["mobile","=","+32494444444"]])[0];
./addons/sms/static/tests/web/sms_button.test.js:    const visitorId = MockServer.env["visitor"].search([["mobile","=","+32494444444"]])[0];
./addons/sms/static/tests/web/sms_button.test.js:    mockService("action", {
./addons/sms/static/tests/web/sms_button.test.js:    const partnerId = MockServer.env["partner"].search([["foo", "=", "yop"]])[0];
./addons/sms/static/tests/web/sms_button.test.js:        mockService("action", {
./addons/sms/static/tests/web/sms_button.test.js:        const partnerId = MockServer.env["partner"].search([["foo", "=", "yop"]])[0];
./addons/sms/static/tests/sms_test_helpers.js:import { Partner } from "@sms/../tests/mock_server/mock_models/partner";
./addons/sms/static/tests/sms_test_helpers.js:import { Visitor } from "@sms/../tests/mock_server/mock_models/visitor";
./addons/sms/static/tests/messaging_menu/messaging_menu_patch.test.js:import { asyncStep, mockService, serverState, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/sms/static/tests/messaging_menu/messaging_menu_patch.test.js:    mockService("action", {
./addons/sms/static/tests/thread/message_patch.test.js:import { asyncStep, mockService, waitForSteps } from "@web/../tests/web_test_helpers";
./addons/sms/static/tests/thread/message_patch.test.js:    mockService("action", {
./addons/sms/tests/common.py:from unittest.mock import patch
./addons/sms/tests/common.py:class MockSMS(common.TransactionCase):
./addons/sms/tests/common.py:        super(MockSMS, self).tearDown()
./addons/sms/tests/common.py:    def mock_datetime_and_now(self, mock_dt):
./addons/sms/tests/common.py:        in addition to standard datetime mocks. Used mainly to detect sync
./addons/sms/tests/common.py:        with freeze_time(mock_dt), \
./addons/sms/tests/common.py:             patch.object(self.env.cr, 'now', lambda: mock_dt):
./addons/sms/tests/common.py:    def mockSMSGateway(self, sms_allow_unlink=False, sim_error=None, nbr_t_error=None, moderated=False, force_delivered=False):
./addons/sms/tests/common.py:            # mock single sms sending
./addons/sms/tests/common.py:            # mock batch sending
./addons/sms/tests/common.py:        """ As SMS gateway mock keeps SMS, we may need to remove them manually
./addons/sms/tests/common.py:class SMSCase(MockSMS):
./addons/sms/tests/test_sms_composer.py:from unittest.mock import patch
./addons/sms/tests/test_sms_composer.py:                with self.with_user('admin'), self.mockSMSGateway():
./addons/sms/tests/test_sms_composer.py:                    with self.mockSMSGateway(), _message_sms_patch as _patched_message_sms:
./addons/web_editor/static/tests/owl_utils_tests.js:import { makeTestEnv } from "@web/../tests/legacy/helpers/mock_env";
./addons/web_editor/static/tests/html_field_tests.js:import { click, editInput, getFixture, makeDeferred, mockSendBeacon, nextTick, patchWithCleanup } from "@web/../tests/helpers/utils";
./addons/web_editor/static/tests/html_field_tests.js:            mockRPC(route, args) {
./addons/web_editor/static/tests/html_field_tests.js:        mockSendBeacon((route, blob) => {
./addons/web_editor/static/tests/html_field_tests.js:        const mockRPC = async function (route, args) {
./addons/web_editor/static/tests/html_field_tests.js:            mockRPC: mockRPC,
./addons/web_editor/static/tests/html_field_tests.js:        const mockRPC = async function (route, args) {
./addons/web_editor/static/tests/html_field_tests.js:            mockRPC: mockRPC,
./addons/web_editor/static/tests/html_field_tests.js:        const mockRPC = async function (route, args) {
./addons/web_editor/static/tests/html_field_tests.js:            mockRPC: mockRPC,
./addons/web_editor/static/tests/html_field_tests.js:            const mockRPC = (route, args) => {
./addons/web_editor/static/tests/html_field_tests.js:            const webClient = await createWebClient({ serverData, mockRPC });
./addons/web_editor/static/tests/html_field_tests.js:            // redefine 'files' so we can put mock data in through js
./addons/web_editor/static/tests/test_wysiwyg_collaboration.js:import { makeTestEnv } from "@web/../tests/helpers/mock_env";
./addons/web_editor/static/tests/test_wysiwyg_collaboration.js:import { makeFakeNotificationService } from "@web/../tests/helpers/mock_services";
./addons/web_editor/static/tests/test_wysiwyg_collaboration.js:            mockRPC(route) {
./addons/web_editor/static/tests/mock_services.js:import { utils } from '@web/../tests/helpers/mock_env';
./addons/web_editor/static/tests/test_utils.js:import { MockServer } from "@web/../tests/helpers/mock_server";
./addons/web_editor/static/tests/test_utils.js:patch(MockServer.prototype, {
./addons/web_editor/static/src/js/editor/odoo-editor/test/utils.js:    // Create and dispatch events to mock text insertion. Unfortunatly, the
./addons/web_editor/static/src/js/editor/odoo-editor/test/utils.js:// Mock an paste event and send it to the editor.
./addons/web_editor/static/src/js/editor/odoo-editor/test/utils.js:    var mockEvent = {
./addons/web_editor/static/src/js/editor/odoo-editor/test/utils.js:    await editor._onPaste(mockEvent);
./addons/mass_mailing/static/tests/mass_mailing_favourite_filter_tests.js:            mockRPC: function (_, { args, model, method }) {
./addons/mass_mailing/static/tests/mass_mailing_favourite_filter_tests.js:            mockRPC: function (route, args) {
./addons/mass_mailing/tests/test_mailing_list.py:from unittest.mock import patch
./addons/mass_mailing/tests/test_mailing_controllers.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/mass_mailing/tests/test_mailing_controllers.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/mass_mailing/tests/test_mailing_ab_testing.py:        with self.mock_mail_gateway():
./addons/mass_mailing/tests/test_mailing_ab_testing.py:        with self.mock_mail_gateway():
./addons/mass_mailing/tests/test_mailing_ab_testing.py:        with self.mock_mail_gateway():
./addons/mass_mailing/tests/test_mailing_ab_testing.py:        with self.mock_mail_gateway(), self.enter_registry_test_mode():
./addons/mass_mailing/tests/test_mailing_ab_testing.py:        with self.mock_mail_gateway():
./addons/mass_mailing/tests/test_mailing_ab_testing.py:        with self.mock_mail_gateway():
./addons/mass_mailing/tests/test_mailing_ab_testing.py:        with self.mock_mail_gateway():
./addons/mass_mailing/tests/test_mailing_internals.py:from unittest.mock import patch
./addons/mass_mailing/tests/test_mailing_internals.py:from unittest.mock import patch
./addons/mass_mailing/tests/test_mailing_internals.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/mass_mailing/tests/test_mailing_internals.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/mass_mailing/tests/test_mailing_internals.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/mass_mailing/tests/test_mailing_internals.py:        with self.mock_mail_gateway(mail_unlink_sent=True):
./addons/mass_mailing/tests/test_mailing_internals.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/mass_mailing/tests/test_mailing_internals.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/mass_mailing/tests/test_mailing_internals.py:        with self.mock_mail_gateway(mail_unlink_sent=False):
./addons/mass_mailing/tests/common.py:from unittest.mock import patch
./addons/mass_mailing/tests/common.py:from odoo.addons.link_tracker.tests.common import MockLinkTracker
./addons/mass_mailing/tests/common.py:class MassMailCase(MailCase, MockLinkTracker):
./addons/mass_mailing/tests/test_mailing_retry.py:from unittest.mock import patch
